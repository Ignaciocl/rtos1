
practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006158  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006328  08006328  00007328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f8  080064f8  00008084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080064f8  080064f8  000074f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006500  08006500  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006500  08006500  00007500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08006508  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f4  20000084  0800658c  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004378  0800658c  00008378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147f6  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f6  00000000  00000000  0001c8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0001fda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e57  00000000  00000000  00021030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250c6  00000000  00000000  00021e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168a3  00000000  00000000  00046f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da95a  00000000  00000000  0005d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013814a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ac  00000000  00000000  00138190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013da3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006310 	.word	0x08006310

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006310 	.word	0x08006310

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000a0 	.word	0x200000a0
 800061c:	200000f4 	.word	0x200000f4

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000626:	f004 fcc7 	bl	8004fb8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fadf 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f81d 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8b3 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000636:	f000 f887 	bl	8000748 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 800063a:	480a      	ldr	r0, [pc, #40]	@ (8000664 <main+0x44>)
 800063c:	f001 fc34 	bl	8001ea8 <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 8000640:	f004 f912 	bl	8004868 <app_init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Sem */
  osSemaphoreDef(Binary_Sem);
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  Binary_SemHandle = osSemaphoreCreate(osSemaphore(Binary_Sem), 1);
 800064c:	463b      	mov	r3, r7
 800064e:	2101      	movs	r1, #1
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f948 	bl	80028e6 <osSemaphoreCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a03      	ldr	r2, [pc, #12]	@ (8000668 <main+0x48>)
 800065a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f002 f93c 	bl	80028d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0x40>
 8000664:	200002f4 	.word	0x200002f4
 8000668:	20000384 	.word	0x20000384

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	@ 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 ff27 	bl	80054ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemClock_Config+0xd4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a29      	ldr	r2, [pc, #164]	@ (8000740 <SystemClock_Config+0xd4>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <SystemClock_Config+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b8:	4a22      	ldr	r2, [pc, #136]	@ (8000744 <SystemClock_Config+0xd8>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <SystemClock_Config+0xd8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e0:	2310      	movs	r3, #16
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f8dc 	bl	80018b8 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000706:	f000 f8e5 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fd4a 	bl	80011c0 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000732:	f000 f8cf 	bl	80008d4 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	@ 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_USART2_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USART2_UART_Init+0x4c>)
 8000780:	f001 fdd4 	bl	800232c <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f8a3 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000033c 	.word	0x2000033c
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b31      	ldr	r3, [pc, #196]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a30      	ldr	r2, [pc, #192]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a29      	ldr	r2, [pc, #164]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a22      	ldr	r2, [pc, #136]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b20      	ldr	r3, [pc, #128]	@ (800087c <MX_GPIO_Init+0xe0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_GPIO_Init+0xe0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <MX_GPIO_Init+0xe0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_GPIO_Init+0xe0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	4816      	ldr	r0, [pc, #88]	@ (8000880 <MX_GPIO_Init+0xe4>)
 8000828:	f000 fc98 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <MX_GPIO_Init+0xe8>)
 8000844:	f000 faf6 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000848:	2320      	movs	r3, #32
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4808      	ldr	r0, [pc, #32]	@ (8000880 <MX_GPIO_Init+0xe4>)
 8000860:	f000 fae8 	bl	8000e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2105      	movs	r1, #5
 8000868:	2028      	movs	r0, #40	@ 0x28
 800086a:	f000 fab9 	bl	8000de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800086e:	2028      	movs	r0, #40	@ 0x28
 8000870:	f000 fad2 	bl	8000e18 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	@ 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800

08000888 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
	if(USER_Btn_Pin == GPIO_Pin)
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000898:	d104      	bne.n	80008a4 <HAL_GPIO_EXTI_Callback+0x1c>
		osSemaphoreRelease (Binary_SemHandle);
 800089a:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x24>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 f854 	bl	800294c <osSemaphoreRelease>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000384 	.word	0x20000384

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008c2:	f000 f9b5 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010000 	.word	0x40010000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_MspInit+0x54>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ee:	4a11      	ldr	r2, [pc, #68]	@ (8000934 <HAL_MspInit+0x54>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <HAL_MspInit+0x54>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <HAL_MspInit+0x54>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	@ 0x40
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fa5b 	bl	8000de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a19      	ldr	r2, [pc, #100]	@ (80009bc <HAL_UART_MspInit+0x84>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12b      	bne.n	80009b2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <HAL_UART_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <HAL_UART_MspInit+0x88>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_UART_MspInit+0x88>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <HAL_UART_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <HAL_UART_MspInit+0x88>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_UART_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000992:	230c      	movs	r3, #12
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a2:	2307      	movs	r3, #7
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <HAL_UART_MspInit+0x8c>)
 80009ae:	f000 fa41 	bl	8000e34 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	@ 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40004400 	.word	0x40004400
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	@ 0x30
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a98 <HAL_InitTick+0xd0>)
 80009de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a98 <HAL_InitTick+0xd0>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a98 <HAL_InitTick+0xd0>)
 80009ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 020c 	add.w	r2, r7, #12
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fcf8 	bl	80013f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a04:	f000 fce2 	bl	80013cc <HAL_RCC_GetPCLK2Freq>
 8000a08:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <HAL_InitTick+0xd4>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9b      	lsrs	r3, r3, #18
 8000a14:	3b01      	subs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <HAL_InitTick+0xd8>)
 8000a1a:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <HAL_InitTick+0xdc>)
 8000a1c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <HAL_InitTick+0xd8>)
 8000a20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a26:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <HAL_InitTick+0xd8>)
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_InitTick+0xd8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_InitTick+0xd8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_InitTick+0xd8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a3e:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <HAL_InitTick+0xd8>)
 8000a40:	f001 f9d8 	bl	8001df4 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d11b      	bne.n	8000a8a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a52:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <HAL_InitTick+0xd8>)
 8000a54:	f001 fa28 	bl	8001ea8 <HAL_TIM_Base_Start_IT>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d111      	bne.n	8000a8a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a66:	2019      	movs	r0, #25
 8000a68:	f000 f9d6 	bl	8000e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d808      	bhi.n	8000a84 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a72:	2200      	movs	r2, #0
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	2019      	movs	r0, #25
 8000a78:	f000 f9b2 	bl	8000de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_InitTick+0xe0>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e002      	b.n	8000a8a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3730      	adds	r7, #48	@ 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	20000388 	.word	0x20000388
 8000aa4:	40010000 	.word	0x40010000
 8000aa8:	20000004 	.word	0x20000004

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000aea:	f001 fa4d 	bl	8001f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000388 	.word	0x20000388

08000af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000afc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b00:	f000 fb46 	bl	8001190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f004 fd18 	bl	800556c <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	200003d0 	.word	0x200003d0
 8000b70:	20004378 	.word	0x20004378

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b9c:	f7ff ffea 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	@ (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f004 fcd7 	bl	8005578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fd29 	bl	8000620 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000bdc:	08006508 	.word	0x08006508
  ldr r2, =_sbss
 8000be0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000be4:	20004378 	.word	0x20004378

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8d8 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f7ff fed4 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe5e 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200003d4 	.word	0x200003d4

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200003d4 	.word	0x200003d4

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	@ (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	@ 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e165      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8154 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80ae 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001134 <HAL_GPIO_Init+0x300>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a5c      	ldr	r2, [pc, #368]	@ (8001134 <HAL_GPIO_Init+0x300>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b5a      	ldr	r3, [pc, #360]	@ (8001134 <HAL_GPIO_Init+0x300>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a58      	ldr	r2, [pc, #352]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800113c <HAL_GPIO_Init+0x308>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	@ (8001140 <HAL_GPIO_Init+0x30c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	@ (8001144 <HAL_GPIO_Init+0x310>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	@ (8001148 <HAL_GPIO_Init+0x314>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	@ (800114c <HAL_GPIO_Init+0x318>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x20a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4a      	ldr	r2, [pc, #296]	@ (8001150 <HAL_GPIO_Init+0x31c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x206>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a49      	ldr	r2, [pc, #292]	@ (8001154 <HAL_GPIO_Init+0x320>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x202>
 8001032:	2306      	movs	r3, #6
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001036:	2307      	movs	r3, #7
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4935      	ldr	r1, [pc, #212]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b3a      	ldr	r3, [pc, #232]	@ (8001158 <HAL_GPIO_Init+0x324>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001092:	4a31      	ldr	r2, [pc, #196]	@ (8001158 <HAL_GPIO_Init+0x324>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001098:	4b2f      	ldr	r3, [pc, #188]	@ (8001158 <HAL_GPIO_Init+0x324>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010bc:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <HAL_GPIO_Init+0x324>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c2:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <HAL_GPIO_Init+0x324>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <HAL_GPIO_Init+0x324>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <HAL_GPIO_Init+0x324>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001110:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <HAL_GPIO_Init+0x324>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f ae96 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021400 	.word	0x40021400
 8001154:	40021800 	.word	0x40021800
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a6:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fb6a 	bl	8000888 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40013c00 	.word	0x40013c00

080011c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0cc      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d4:	4b68      	ldr	r3, [pc, #416]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d90c      	bls.n	80011fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b65      	ldr	r3, [pc, #404]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b63      	ldr	r3, [pc, #396]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0b8      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001214:	4b59      	ldr	r3, [pc, #356]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	4a58      	ldr	r2, [pc, #352]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800121e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800122c:	4b53      	ldr	r3, [pc, #332]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4a52      	ldr	r2, [pc, #328]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001238:	4b50      	ldr	r3, [pc, #320]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	494d      	ldr	r1, [pc, #308]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d044      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b47      	ldr	r3, [pc, #284]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d119      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e07f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127a:	2b03      	cmp	r3, #3
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127e:	4b3f      	ldr	r3, [pc, #252]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e06f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e067      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129e:	4b37      	ldr	r3, [pc, #220]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f023 0203 	bic.w	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4934      	ldr	r1, [pc, #208]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b0:	f7ff fcd2 	bl	8000c58 <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b8:	f7ff fcce 	bl	8000c58 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e04f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 020c 	and.w	r2, r3, #12
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	429a      	cmp	r2, r3
 80012de:	d1eb      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d20c      	bcs.n	8001308 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e032      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4916      	ldr	r1, [pc, #88]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	490e      	ldr	r1, [pc, #56]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	4313      	orrs	r3, r2
 8001344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001346:	f000 f887 	bl	8001458 <HAL_RCC_GetSysClockFreq>
 800134a:	4602      	mov	r2, r0
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	490a      	ldr	r1, [pc, #40]	@ (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	5ccb      	ldrb	r3, [r1, r3]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_RCC_ClockConfig+0x1c8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fb2e 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00
 800137c:	40023800 	.word	0x40023800
 8001380:	0800648c 	.word	0x0800648c
 8001384:	20000000 	.word	0x20000000
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000

080013a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013a8:	f7ff fff0 	bl	800138c <HAL_RCC_GetHCLKFreq>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	0a9b      	lsrs	r3, r3, #10
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	4903      	ldr	r1, [pc, #12]	@ (80013c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	0800649c 	.word	0x0800649c

080013cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013d0:	f7ff ffdc 	bl	800138c <HAL_RCC_GetHCLKFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	0b5b      	lsrs	r3, r3, #13
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	4903      	ldr	r1, [pc, #12]	@ (80013f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	0800649c 	.word	0x0800649c

080013f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	220f      	movs	r2, #15
 8001402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0203 	and.w	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001436:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <HAL_RCC_GetClockConfig+0x60>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 020f 	and.w	r2, r3, #15
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40023c00 	.word	0x40023c00

08001458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800145c:	b0ae      	sub	sp, #184	@ 0xb8
 800145e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147e:	4bcb      	ldr	r3, [pc, #812]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b0c      	cmp	r3, #12
 8001488:	f200 8206 	bhi.w	8001898 <HAL_RCC_GetSysClockFreq+0x440>
 800148c:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <HAL_RCC_GetSysClockFreq+0x3c>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014c9 	.word	0x080014c9
 8001498:	08001899 	.word	0x08001899
 800149c:	08001899 	.word	0x08001899
 80014a0:	08001899 	.word	0x08001899
 80014a4:	080014d1 	.word	0x080014d1
 80014a8:	08001899 	.word	0x08001899
 80014ac:	08001899 	.word	0x08001899
 80014b0:	08001899 	.word	0x08001899
 80014b4:	080014d9 	.word	0x080014d9
 80014b8:	08001899 	.word	0x08001899
 80014bc:	08001899 	.word	0x08001899
 80014c0:	08001899 	.word	0x08001899
 80014c4:	080016c9 	.word	0x080016c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4bb9      	ldr	r3, [pc, #740]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014ce:	e1e7      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014d0:	4bb8      	ldr	r3, [pc, #736]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014d6:	e1e3      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d8:	4bb4      	ldr	r3, [pc, #720]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e4:	4bb1      	ldr	r3, [pc, #708]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d071      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	4bae      	ldr	r3, [pc, #696]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014fc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001508:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001516:	4622      	mov	r2, r4
 8001518:	462b      	mov	r3, r5
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	0159      	lsls	r1, r3, #5
 8001524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001528:	0150      	lsls	r0, r2, #5
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4621      	mov	r1, r4
 8001530:	1a51      	subs	r1, r2, r1
 8001532:	6439      	str	r1, [r7, #64]	@ 0x40
 8001534:	4629      	mov	r1, r5
 8001536:	eb63 0301 	sbc.w	r3, r3, r1
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001548:	4649      	mov	r1, r9
 800154a:	018b      	lsls	r3, r1, #6
 800154c:	4641      	mov	r1, r8
 800154e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001552:	4641      	mov	r1, r8
 8001554:	018a      	lsls	r2, r1, #6
 8001556:	4641      	mov	r1, r8
 8001558:	1a51      	subs	r1, r2, r1
 800155a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800155c:	4649      	mov	r1, r9
 800155e:	eb63 0301 	sbc.w	r3, r3, r1
 8001562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001570:	4649      	mov	r1, r9
 8001572:	00cb      	lsls	r3, r1, #3
 8001574:	4641      	mov	r1, r8
 8001576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800157a:	4641      	mov	r1, r8
 800157c:	00ca      	lsls	r2, r1, #3
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	4603      	mov	r3, r0
 8001584:	4622      	mov	r2, r4
 8001586:	189b      	adds	r3, r3, r2
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
 800158a:	462b      	mov	r3, r5
 800158c:	460a      	mov	r2, r1
 800158e:	eb42 0303 	adc.w	r3, r2, r3
 8001592:	637b      	str	r3, [r7, #52]	@ 0x34
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015a0:	4629      	mov	r1, r5
 80015a2:	024b      	lsls	r3, r1, #9
 80015a4:	4621      	mov	r1, r4
 80015a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015aa:	4621      	mov	r1, r4
 80015ac:	024a      	lsls	r2, r1, #9
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015b6:	2200      	movs	r2, #0
 80015b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80015c4:	f7fe fe7c 	bl	80002c0 <__aeabi_uldivmod>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4613      	mov	r3, r2
 80015ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015d2:	e067      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d4:	4b75      	ldr	r3, [pc, #468]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	2200      	movs	r2, #0
 80015dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015ee:	2300      	movs	r3, #0
 80015f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015f6:	4622      	mov	r2, r4
 80015f8:	462b      	mov	r3, r5
 80015fa:	f04f 0000 	mov.w	r0, #0
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	0159      	lsls	r1, r3, #5
 8001604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001608:	0150      	lsls	r0, r2, #5
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4621      	mov	r1, r4
 8001610:	1a51      	subs	r1, r2, r1
 8001612:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001614:	4629      	mov	r1, r5
 8001616:	eb63 0301 	sbc.w	r3, r3, r1
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001628:	4649      	mov	r1, r9
 800162a:	018b      	lsls	r3, r1, #6
 800162c:	4641      	mov	r1, r8
 800162e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001632:	4641      	mov	r1, r8
 8001634:	018a      	lsls	r2, r1, #6
 8001636:	4641      	mov	r1, r8
 8001638:	ebb2 0a01 	subs.w	sl, r2, r1
 800163c:	4649      	mov	r1, r9
 800163e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800164e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001652:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001656:	4692      	mov	sl, r2
 8001658:	469b      	mov	fp, r3
 800165a:	4623      	mov	r3, r4
 800165c:	eb1a 0303 	adds.w	r3, sl, r3
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	462b      	mov	r3, r5
 8001664:	eb4b 0303 	adc.w	r3, fp, r3
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001676:	4629      	mov	r1, r5
 8001678:	028b      	lsls	r3, r1, #10
 800167a:	4621      	mov	r1, r4
 800167c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001680:	4621      	mov	r1, r4
 8001682:	028a      	lsls	r2, r1, #10
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800168c:	2200      	movs	r2, #0
 800168e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001690:	677a      	str	r2, [r7, #116]	@ 0x74
 8001692:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001696:	f7fe fe13 	bl	80002c0 <__aeabi_uldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4613      	mov	r3, r2
 80016a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016a4:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	0c1b      	lsrs	r3, r3, #16
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	3301      	adds	r3, #1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80016b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016c6:	e0eb      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c8:	4b38      	ldr	r3, [pc, #224]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016d4:	4b35      	ldr	r3, [pc, #212]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d06b      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e0:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	2200      	movs	r2, #0
 80016e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80016f4:	2300      	movs	r3, #0
 80016f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80016f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016fc:	4622      	mov	r2, r4
 80016fe:	462b      	mov	r3, r5
 8001700:	f04f 0000 	mov.w	r0, #0
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	0159      	lsls	r1, r3, #5
 800170a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170e:	0150      	lsls	r0, r2, #5
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4621      	mov	r1, r4
 8001716:	1a51      	subs	r1, r2, r1
 8001718:	61b9      	str	r1, [r7, #24]
 800171a:	4629      	mov	r1, r5
 800171c:	eb63 0301 	sbc.w	r3, r3, r1
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800172e:	4659      	mov	r1, fp
 8001730:	018b      	lsls	r3, r1, #6
 8001732:	4651      	mov	r1, sl
 8001734:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001738:	4651      	mov	r1, sl
 800173a:	018a      	lsls	r2, r1, #6
 800173c:	4651      	mov	r1, sl
 800173e:	ebb2 0801 	subs.w	r8, r2, r1
 8001742:	4659      	mov	r1, fp
 8001744:	eb63 0901 	sbc.w	r9, r3, r1
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001754:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001758:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800175c:	4690      	mov	r8, r2
 800175e:	4699      	mov	r9, r3
 8001760:	4623      	mov	r3, r4
 8001762:	eb18 0303 	adds.w	r3, r8, r3
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	462b      	mov	r3, r5
 800176a:	eb49 0303 	adc.w	r3, r9, r3
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800177c:	4629      	mov	r1, r5
 800177e:	024b      	lsls	r3, r1, #9
 8001780:	4621      	mov	r1, r4
 8001782:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001786:	4621      	mov	r1, r4
 8001788:	024a      	lsls	r2, r1, #9
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001792:	2200      	movs	r2, #0
 8001794:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001796:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001798:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800179c:	f7fe fd90 	bl	80002c0 <__aeabi_uldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4613      	mov	r3, r2
 80017a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80017aa:	e065      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x420>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	00f42400 	.word	0x00f42400
 80017b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b8:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	2200      	movs	r2, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	4611      	mov	r1, r2
 80017c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80017ca:	2300      	movs	r3, #0
 80017cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80017ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80017d2:	4642      	mov	r2, r8
 80017d4:	464b      	mov	r3, r9
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0159      	lsls	r1, r3, #5
 80017e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e4:	0150      	lsls	r0, r2, #5
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4641      	mov	r1, r8
 80017ec:	1a51      	subs	r1, r2, r1
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	4649      	mov	r1, r9
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001804:	4659      	mov	r1, fp
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	4651      	mov	r1, sl
 800180a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180e:	4651      	mov	r1, sl
 8001810:	018a      	lsls	r2, r1, #6
 8001812:	4651      	mov	r1, sl
 8001814:	1a54      	subs	r4, r2, r1
 8001816:	4659      	mov	r1, fp
 8001818:	eb63 0501 	sbc.w	r5, r3, r1
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	00eb      	lsls	r3, r5, #3
 8001826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800182a:	00e2      	lsls	r2, r4, #3
 800182c:	4614      	mov	r4, r2
 800182e:	461d      	mov	r5, r3
 8001830:	4643      	mov	r3, r8
 8001832:	18e3      	adds	r3, r4, r3
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	464b      	mov	r3, r9
 8001838:	eb45 0303 	adc.w	r3, r5, r3
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800184a:	4629      	mov	r1, r5
 800184c:	028b      	lsls	r3, r1, #10
 800184e:	4621      	mov	r1, r4
 8001850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001854:	4621      	mov	r1, r4
 8001856:	028a      	lsls	r2, r1, #10
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001860:	2200      	movs	r2, #0
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001864:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001866:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800186a:	f7fe fd29 	bl	80002c0 <__aeabi_uldivmod>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4613      	mov	r3, r2
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001878:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0f1b      	lsrs	r3, r3, #28
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800188a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001896:	e003      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800189a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800189e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	37b8      	adds	r7, #184	@ 0xb8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	00f42400 	.word	0x00f42400

080018b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e28d      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8083 	beq.w	80019de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018d8:	4b94      	ldr	r3, [pc, #592]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d019      	beq.n	8001918 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018e4:	4b91      	ldr	r3, [pc, #580]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
        || \
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018f0:	4b8e      	ldr	r3, [pc, #568]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018fc:	d00c      	beq.n	8001918 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d112      	bne.n	8001930 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190a:	4b88      	ldr	r3, [pc, #544]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001912:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001916:	d10b      	bne.n	8001930 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	4b84      	ldr	r3, [pc, #528]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d05b      	beq.n	80019dc <HAL_RCC_OscConfig+0x124>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d157      	bne.n	80019dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e25a      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001938:	d106      	bne.n	8001948 <HAL_RCC_OscConfig+0x90>
 800193a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e01d      	b.n	8001984 <HAL_RCC_OscConfig+0xcc>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0xb4>
 8001952:	4b76      	ldr	r3, [pc, #472]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a75      	ldr	r2, [pc, #468]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b73      	ldr	r3, [pc, #460]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a72      	ldr	r2, [pc, #456]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0xcc>
 800196c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6e      	ldr	r2, [pc, #440]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b6c      	ldr	r3, [pc, #432]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f964 	bl	8000c58 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f960 	bl	8000c58 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	@ 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e21f      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b61      	ldr	r3, [pc, #388]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xdc>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f950 	bl	8000c58 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff f94c 	bl	8000c58 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	@ 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e20b      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	4b57      	ldr	r3, [pc, #348]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x104>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06f      	beq.n	8001aca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ea:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d017      	beq.n	8001a26 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019f6:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d105      	bne.n	8001a0e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a02:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d11c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1a:	4b44      	ldr	r3, [pc, #272]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d116      	bne.n	8001a54 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	4b41      	ldr	r3, [pc, #260]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x186>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e1d3      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4937      	ldr	r1, [pc, #220]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	e03a      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5c:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <HAL_RCC_OscConfig+0x278>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f8f9 	bl	8000c58 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f8f5 	bl	8000c58 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1b4      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4925      	ldr	r1, [pc, #148]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	e015      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9e:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <HAL_RCC_OscConfig+0x278>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f8d8 	bl	8000c58 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aac:	f7ff f8d4 	bl	8000c58 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e193      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d036      	beq.n	8001b44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d016      	beq.n	8001b0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f8b8 	bl	8000c58 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f8b4 	bl	8000c58 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e173      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x234>
 8001b0a:	e01b      	b.n	8001b44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff f8a1 	bl	8000c58 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	e00e      	b.n	8001b38 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f89d 	bl	8000c58 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d907      	bls.n	8001b38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e15c      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470000 	.word	0x42470000
 8001b34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b38:	4b8a      	ldr	r3, [pc, #552]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ea      	bne.n	8001b1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8097 	beq.w	8001c80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b56:	4b83      	ldr	r3, [pc, #524]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10f      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b7f      	ldr	r3, [pc, #508]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b72:	4b7c      	ldr	r3, [pc, #496]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b79      	ldr	r3, [pc, #484]	@ (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b76      	ldr	r3, [pc, #472]	@ (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a75      	ldr	r2, [pc, #468]	@ (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f85d 	bl	8000c58 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff f859 	bl	8000c58 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e118      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x31e>
 8001bc8:	4b66      	ldr	r3, [pc, #408]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bcc:	4a65      	ldr	r2, [pc, #404]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd4:	e01c      	b.n	8001c10 <HAL_RCC_OscConfig+0x358>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x340>
 8001bde:	4b61      	ldr	r3, [pc, #388]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be2:	4a60      	ldr	r2, [pc, #384]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bea:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	4a5d      	ldr	r2, [pc, #372]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0x358>
 8001bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfc:	4a59      	ldr	r2, [pc, #356]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c04:	4b57      	ldr	r3, [pc, #348]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a56      	ldr	r2, [pc, #344]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	f023 0304 	bic.w	r3, r3, #4
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d015      	beq.n	8001c44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f81e 	bl	8000c58 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff f81a 	bl	8000c58 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0d7      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c36:	4b4b      	ldr	r3, [pc, #300]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0ee      	beq.n	8001c20 <HAL_RCC_OscConfig+0x368>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff f808 	bl	8000c58 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4c:	f7ff f804 	bl	8000c58 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e0c1      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c62:	4b40      	ldr	r3, [pc, #256]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ee      	bne.n	8001c4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c74:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	4a3a      	ldr	r2, [pc, #232]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80ad 	beq.w	8001de4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c8a:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d060      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d145      	bne.n	8001d2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b33      	ldr	r3, [pc, #204]	@ (8001d6c <HAL_RCC_OscConfig+0x4b4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ffd8 	bl	8000c58 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe ffd4 	bl	8000c58 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e093      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	041b      	lsls	r3, r3, #16
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	071b      	lsls	r3, r3, #28
 8001cf6:	491b      	ldr	r1, [pc, #108]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_RCC_OscConfig+0x4b4>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe ffa9 	bl	8000c58 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe ffa5 	bl	8000c58 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e064      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x452>
 8001d28:	e05c      	b.n	8001de4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <HAL_RCC_OscConfig+0x4b4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe ff92 	bl	8000c58 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe ff8e 	bl	8000c58 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04d      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x480>
 8001d56:	e045      	b.n	8001de4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e040      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d70:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <HAL_RCC_OscConfig+0x538>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d030      	beq.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d129      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d122      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d119      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	085b      	lsrs	r3, r3, #1
 8001db8:	3b01      	subs	r3, #1
 8001dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d10f      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e041      	b.n	8001e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f839 	bl	8001e92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 f9c0 	bl	80021b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d001      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e04e      	b.n	8001f5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d022      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eea:	d01d      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d018      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1e      	ldr	r2, [pc, #120]	@ (8001f74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	@ (8001f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a18      	ldr	r2, [pc, #96]	@ (8001f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d010      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	e007      	b.n	8001f5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40000800 	.word	0x40000800
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	40010400 	.word	0x40010400
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40001800 	.word	0x40001800

08001f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d020      	beq.n	8001fec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0202 	mvn.w	r2, #2
 8001fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8d2 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8c4 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8d5 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d020      	beq.n	8002038 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0204 	mvn.w	r2, #4
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8ac 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f89e 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8af 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d020      	beq.n	8002084 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0208 	mvn.w	r2, #8
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f886 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f878 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f889 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	d020      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0210 	mvn.w	r2, #16
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2208      	movs	r2, #8
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f860 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f852 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f863 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0201 	mvn.w	r2, #1
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fbde 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f900 	bl	8002318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f834 	bl	80021a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0220 	mvn.w	r2, #32
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8d2 	bl	8002304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a43      	ldr	r2, [pc, #268]	@ (80022d8 <TIM_Base_SetConfig+0x120>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d6:	d00f      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	@ (80022dc <TIM_Base_SetConfig+0x124>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00b      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	@ (80022e0 <TIM_Base_SetConfig+0x128>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	@ (80022e4 <TIM_Base_SetConfig+0x12c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <TIM_Base_SetConfig+0x130>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a32      	ldr	r2, [pc, #200]	@ (80022d8 <TIM_Base_SetConfig+0x120>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002218:	d027      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2f      	ldr	r2, [pc, #188]	@ (80022dc <TIM_Base_SetConfig+0x124>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d023      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2e      	ldr	r2, [pc, #184]	@ (80022e0 <TIM_Base_SetConfig+0x128>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2d      	ldr	r2, [pc, #180]	@ (80022e4 <TIM_Base_SetConfig+0x12c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a2c      	ldr	r2, [pc, #176]	@ (80022e8 <TIM_Base_SetConfig+0x130>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d017      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a2b      	ldr	r2, [pc, #172]	@ (80022ec <TIM_Base_SetConfig+0x134>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <TIM_Base_SetConfig+0x138>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a29      	ldr	r2, [pc, #164]	@ (80022f4 <TIM_Base_SetConfig+0x13c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <TIM_Base_SetConfig+0x140>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a27      	ldr	r2, [pc, #156]	@ (80022fc <TIM_Base_SetConfig+0x144>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d003      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a26      	ldr	r2, [pc, #152]	@ (8002300 <TIM_Base_SetConfig+0x148>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d108      	bne.n	800227c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0e      	ldr	r2, [pc, #56]	@ (80022d8 <TIM_Base_SetConfig+0x120>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_Base_SetConfig+0xf2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a10      	ldr	r2, [pc, #64]	@ (80022e8 <TIM_Base_SetConfig+0x130>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d103      	bne.n	80022b2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f043 0204 	orr.w	r2, r3, #4
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40000400 	.word	0x40000400
 80022e0:	40000800 	.word	0x40000800
 80022e4:	40000c00 	.word	0x40000c00
 80022e8:	40010400 	.word	0x40010400
 80022ec:	40014000 	.word	0x40014000
 80022f0:	40014400 	.word	0x40014400
 80022f4:	40014800 	.word	0x40014800
 80022f8:	40001800 	.word	0x40001800
 80022fc:	40001c00 	.word	0x40001c00
 8002300:	40002000 	.word	0x40002000

08002304 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e042      	b.n	80023c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe faf0 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	@ 0x24
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800236e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f82b 	bl	80023cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b0c0      	sub	sp, #256	@ 0x100
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e8:	68d9      	ldr	r1, [r3, #12]
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	ea40 0301 	orr.w	r3, r0, r1
 80023f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	431a      	orrs	r2, r3
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	431a      	orrs	r2, r3
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002424:	f021 010c 	bic.w	r1, r1, #12
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002432:	430b      	orrs	r3, r1
 8002434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002446:	6999      	ldr	r1, [r3, #24]
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	ea40 0301 	orr.w	r3, r0, r1
 8002452:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b8f      	ldr	r3, [pc, #572]	@ (8002698 <UART_SetConfig+0x2cc>)
 800245c:	429a      	cmp	r2, r3
 800245e:	d005      	beq.n	800246c <UART_SetConfig+0xa0>
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b8d      	ldr	r3, [pc, #564]	@ (800269c <UART_SetConfig+0x2d0>)
 8002468:	429a      	cmp	r2, r3
 800246a:	d104      	bne.n	8002476 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800246c:	f7fe ffae 	bl	80013cc <HAL_RCC_GetPCLK2Freq>
 8002470:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002474:	e003      	b.n	800247e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002476:	f7fe ff95 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 800247a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800247e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002488:	f040 810c 	bne.w	80026a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800248c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002490:	2200      	movs	r2, #0
 8002492:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002496:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800249a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800249e:	4622      	mov	r2, r4
 80024a0:	462b      	mov	r3, r5
 80024a2:	1891      	adds	r1, r2, r2
 80024a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024a6:	415b      	adcs	r3, r3
 80024a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024ae:	4621      	mov	r1, r4
 80024b0:	eb12 0801 	adds.w	r8, r2, r1
 80024b4:	4629      	mov	r1, r5
 80024b6:	eb43 0901 	adc.w	r9, r3, r1
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ce:	4690      	mov	r8, r2
 80024d0:	4699      	mov	r9, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	eb18 0303 	adds.w	r3, r8, r3
 80024d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024dc:	462b      	mov	r3, r5
 80024de:	eb49 0303 	adc.w	r3, r9, r3
 80024e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024fa:	460b      	mov	r3, r1
 80024fc:	18db      	adds	r3, r3, r3
 80024fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002500:	4613      	mov	r3, r2
 8002502:	eb42 0303 	adc.w	r3, r2, r3
 8002506:	657b      	str	r3, [r7, #84]	@ 0x54
 8002508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800250c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002510:	f7fd fed6 	bl	80002c0 <__aeabi_uldivmod>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4b61      	ldr	r3, [pc, #388]	@ (80026a0 <UART_SetConfig+0x2d4>)
 800251a:	fba3 2302 	umull	r2, r3, r3, r2
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	011c      	lsls	r4, r3, #4
 8002522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002526:	2200      	movs	r2, #0
 8002528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800252c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002530:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002534:	4642      	mov	r2, r8
 8002536:	464b      	mov	r3, r9
 8002538:	1891      	adds	r1, r2, r2
 800253a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800253c:	415b      	adcs	r3, r3
 800253e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002540:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002544:	4641      	mov	r1, r8
 8002546:	eb12 0a01 	adds.w	sl, r2, r1
 800254a:	4649      	mov	r1, r9
 800254c:	eb43 0b01 	adc.w	fp, r3, r1
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800255c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002564:	4692      	mov	sl, r2
 8002566:	469b      	mov	fp, r3
 8002568:	4643      	mov	r3, r8
 800256a:	eb1a 0303 	adds.w	r3, sl, r3
 800256e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002572:	464b      	mov	r3, r9
 8002574:	eb4b 0303 	adc.w	r3, fp, r3
 8002578:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002588:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800258c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002590:	460b      	mov	r3, r1
 8002592:	18db      	adds	r3, r3, r3
 8002594:	643b      	str	r3, [r7, #64]	@ 0x40
 8002596:	4613      	mov	r3, r2
 8002598:	eb42 0303 	adc.w	r3, r2, r3
 800259c:	647b      	str	r3, [r7, #68]	@ 0x44
 800259e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025a6:	f7fd fe8b 	bl	80002c0 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <UART_SetConfig+0x2d4>)
 80025b2:	fba3 2301 	umull	r2, r3, r3, r1
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2264      	movs	r2, #100	@ 0x64
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	1acb      	subs	r3, r1, r3
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025c6:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <UART_SetConfig+0x2d4>)
 80025c8:	fba3 2302 	umull	r2, r3, r3, r2
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025d4:	441c      	add	r4, r3
 80025d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025da:	2200      	movs	r2, #0
 80025dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80025e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80025e8:	4642      	mov	r2, r8
 80025ea:	464b      	mov	r3, r9
 80025ec:	1891      	adds	r1, r2, r2
 80025ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025f0:	415b      	adcs	r3, r3
 80025f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025f8:	4641      	mov	r1, r8
 80025fa:	1851      	adds	r1, r2, r1
 80025fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80025fe:	4649      	mov	r1, r9
 8002600:	414b      	adcs	r3, r1
 8002602:	637b      	str	r3, [r7, #52]	@ 0x34
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002610:	4659      	mov	r1, fp
 8002612:	00cb      	lsls	r3, r1, #3
 8002614:	4651      	mov	r1, sl
 8002616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800261a:	4651      	mov	r1, sl
 800261c:	00ca      	lsls	r2, r1, #3
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	4603      	mov	r3, r0
 8002624:	4642      	mov	r2, r8
 8002626:	189b      	adds	r3, r3, r2
 8002628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800262c:	464b      	mov	r3, r9
 800262e:	460a      	mov	r2, r1
 8002630:	eb42 0303 	adc.w	r3, r2, r3
 8002634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002644:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800264c:	460b      	mov	r3, r1
 800264e:	18db      	adds	r3, r3, r3
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002652:	4613      	mov	r3, r2
 8002654:	eb42 0303 	adc.w	r3, r2, r3
 8002658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800265a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800265e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002662:	f7fd fe2d 	bl	80002c0 <__aeabi_uldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <UART_SetConfig+0x2d4>)
 800266c:	fba3 1302 	umull	r1, r3, r3, r2
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	2164      	movs	r1, #100	@ 0x64
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	3332      	adds	r3, #50	@ 0x32
 800267e:	4a08      	ldr	r2, [pc, #32]	@ (80026a0 <UART_SetConfig+0x2d4>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	f003 0207 	and.w	r2, r3, #7
 800268a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4422      	add	r2, r4
 8002692:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002694:	e106      	b.n	80028a4 <UART_SetConfig+0x4d8>
 8002696:	bf00      	nop
 8002698:	40011000 	.word	0x40011000
 800269c:	40011400 	.word	0x40011400
 80026a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026b6:	4642      	mov	r2, r8
 80026b8:	464b      	mov	r3, r9
 80026ba:	1891      	adds	r1, r2, r2
 80026bc:	6239      	str	r1, [r7, #32]
 80026be:	415b      	adcs	r3, r3
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026c6:	4641      	mov	r1, r8
 80026c8:	1854      	adds	r4, r2, r1
 80026ca:	4649      	mov	r1, r9
 80026cc:	eb43 0501 	adc.w	r5, r3, r1
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	00eb      	lsls	r3, r5, #3
 80026da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026de:	00e2      	lsls	r2, r4, #3
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	18e3      	adds	r3, r4, r3
 80026e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026ec:	464b      	mov	r3, r9
 80026ee:	eb45 0303 	adc.w	r3, r5, r3
 80026f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002702:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002712:	4629      	mov	r1, r5
 8002714:	008b      	lsls	r3, r1, #2
 8002716:	4621      	mov	r1, r4
 8002718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800271c:	4621      	mov	r1, r4
 800271e:	008a      	lsls	r2, r1, #2
 8002720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002724:	f7fd fdcc 	bl	80002c0 <__aeabi_uldivmod>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4b60      	ldr	r3, [pc, #384]	@ (80028b0 <UART_SetConfig+0x4e4>)
 800272e:	fba3 2302 	umull	r2, r3, r3, r2
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	011c      	lsls	r4, r3, #4
 8002736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800273a:	2200      	movs	r2, #0
 800273c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002740:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002744:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002748:	4642      	mov	r2, r8
 800274a:	464b      	mov	r3, r9
 800274c:	1891      	adds	r1, r2, r2
 800274e:	61b9      	str	r1, [r7, #24]
 8002750:	415b      	adcs	r3, r3
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002758:	4641      	mov	r1, r8
 800275a:	1851      	adds	r1, r2, r1
 800275c:	6139      	str	r1, [r7, #16]
 800275e:	4649      	mov	r1, r9
 8002760:	414b      	adcs	r3, r1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002770:	4659      	mov	r1, fp
 8002772:	00cb      	lsls	r3, r1, #3
 8002774:	4651      	mov	r1, sl
 8002776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800277a:	4651      	mov	r1, sl
 800277c:	00ca      	lsls	r2, r1, #3
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	4603      	mov	r3, r0
 8002784:	4642      	mov	r2, r8
 8002786:	189b      	adds	r3, r3, r2
 8002788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800278c:	464b      	mov	r3, r9
 800278e:	460a      	mov	r2, r1
 8002790:	eb42 0303 	adc.w	r3, r2, r3
 8002794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027b0:	4649      	mov	r1, r9
 80027b2:	008b      	lsls	r3, r1, #2
 80027b4:	4641      	mov	r1, r8
 80027b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ba:	4641      	mov	r1, r8
 80027bc:	008a      	lsls	r2, r1, #2
 80027be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027c2:	f7fd fd7d 	bl	80002c0 <__aeabi_uldivmod>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	4b38      	ldr	r3, [pc, #224]	@ (80028b0 <UART_SetConfig+0x4e4>)
 80027ce:	fba3 2301 	umull	r2, r3, r3, r1
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2264      	movs	r2, #100	@ 0x64
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	1acb      	subs	r3, r1, r3
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	3332      	adds	r3, #50	@ 0x32
 80027e0:	4a33      	ldr	r2, [pc, #204]	@ (80028b0 <UART_SetConfig+0x4e4>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ec:	441c      	add	r4, r3
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f2:	2200      	movs	r2, #0
 80027f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80027f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80027f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	1891      	adds	r1, r2, r2
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	415b      	adcs	r3, r3
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800280c:	4641      	mov	r1, r8
 800280e:	1851      	adds	r1, r2, r1
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	4649      	mov	r1, r9
 8002814:	414b      	adcs	r3, r1
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002824:	4659      	mov	r1, fp
 8002826:	00cb      	lsls	r3, r1, #3
 8002828:	4651      	mov	r1, sl
 800282a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800282e:	4651      	mov	r1, sl
 8002830:	00ca      	lsls	r2, r1, #3
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	4603      	mov	r3, r0
 8002838:	4642      	mov	r2, r8
 800283a:	189b      	adds	r3, r3, r2
 800283c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800283e:	464b      	mov	r3, r9
 8002840:	460a      	mov	r2, r1
 8002842:	eb42 0303 	adc.w	r3, r2, r3
 8002846:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	663b      	str	r3, [r7, #96]	@ 0x60
 8002852:	667a      	str	r2, [r7, #100]	@ 0x64
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002860:	4649      	mov	r1, r9
 8002862:	008b      	lsls	r3, r1, #2
 8002864:	4641      	mov	r1, r8
 8002866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800286a:	4641      	mov	r1, r8
 800286c:	008a      	lsls	r2, r1, #2
 800286e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002872:	f7fd fd25 	bl	80002c0 <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <UART_SetConfig+0x4e4>)
 800287c:	fba3 1302 	umull	r1, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	2164      	movs	r1, #100	@ 0x64
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	3332      	adds	r3, #50	@ 0x32
 800288e:	4a08      	ldr	r2, [pc, #32]	@ (80028b0 <UART_SetConfig+0x4e4>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	f003 020f 	and.w	r2, r3, #15
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4422      	add	r2, r4
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	bf00      	nop
 80028a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028aa:	46bd      	mov	sp, r7
 80028ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028b0:	51eb851f 	.word	0x51eb851f

080028b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ba:	f3ef 8305 	mrs	r3, IPSR
 80028be:	607b      	str	r3, [r7, #4]
  return(result);
 80028c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028dc:	f000 fe60 	bl	80035a0 <vTaskStartScheduler>
  
  return osOK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af02      	add	r7, sp, #8
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00f      	beq.n	8002918 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d10a      	bne.n	8002914 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2203      	movs	r2, #3
 8002904:	9200      	str	r2, [sp, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	2001      	movs	r0, #1
 800290c:	f000 f972 	bl	8002bf4 <xQueueGenericCreateStatic>
 8002910:	4603      	mov	r3, r0
 8002912:	e016      	b.n	8002942 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	e014      	b.n	8002942 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d110      	bne.n	8002940 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800291e:	2203      	movs	r2, #3
 8002920:	2100      	movs	r1, #0
 8002922:	2001      	movs	r0, #1
 8002924:	f000 f9e3 	bl	8002cee <xQueueGenericCreate>
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <osSemaphoreCreate+0x56>
 8002930:	2300      	movs	r3, #0
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fa34 	bl	8002da4 <xQueueGenericSend>
      return sema;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	e000      	b.n	8002942 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002940:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800295c:	f7ff ffaa 	bl	80028b4 <inHandlerMode>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fb1b 	bl	8002fa8 <xQueueGiveFromISR>
 8002972:	4603      	mov	r3, r0
 8002974:	2b01      	cmp	r3, #1
 8002976:	d001      	beq.n	800297c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002978:	23ff      	movs	r3, #255	@ 0xff
 800297a:	e017      	b.n	80029ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d013      	beq.n	80029aa <osSemaphoreRelease+0x5e>
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <osSemaphoreRelease+0x68>)
 8002984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	e00a      	b.n	80029aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002994:	2300      	movs	r3, #0
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa02 	bl	8002da4 <xQueueGenericSend>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d001      	beq.n	80029aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80029a6:	23ff      	movs	r3, #255	@ 0xff
 80029a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f103 0208 	add.w	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f103 0208 	add.w	r2, r3, #8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0208 	add.w	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a70:	d103      	bne.n	8002a7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e00c      	b.n	8002a94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e002      	b.n	8002a88 <vListInsert+0x2e>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d2f6      	bcs.n	8002a82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6892      	ldr	r2, [r2, #8]
 8002ae2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6852      	ldr	r2, [r2, #4]
 8002aec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d103      	bne.n	8002b00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	1e5a      	subs	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10b      	bne.n	8002b4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b46:	bf00      	nop
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b4c:	f001 fb7c 	bl	8004248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	68f9      	ldr	r1, [r7, #12]
 8002b5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	441a      	add	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	441a      	add	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	22ff      	movs	r2, #255	@ 0xff
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	22ff      	movs	r2, #255	@ 0xff
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d114      	bne.n	8002bcc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01a      	beq.n	8002be0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3310      	adds	r3, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 ff50 	bl	8003a54 <xTaskRemoveFromEventList>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <xQueueGenericReset+0xd0>)
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	e009      	b.n	8002be0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3310      	adds	r3, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fef1 	bl	80029b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3324      	adds	r3, #36	@ 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff feec 	bl	80029b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002be0:	f001 fb64 	bl	80042ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002be4:	2301      	movs	r3, #1
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	@ 0x38
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c1a:	bf00      	nop
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10b      	bne.n	8002c3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	e7fd      	b.n	8002c3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <xQueueGenericCreateStatic+0x56>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <xQueueGenericCreateStatic+0x5a>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <xQueueGenericCreateStatic+0x5c>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10b      	bne.n	8002c6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	623b      	str	r3, [r7, #32]
}
 8002c66:	bf00      	nop
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <xQueueGenericCreateStatic+0x84>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <xQueueGenericCreateStatic+0x88>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <xQueueGenericCreateStatic+0x8a>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10b      	bne.n	8002c9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	61fb      	str	r3, [r7, #28]
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	e7fd      	b.n	8002c96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c9a:	2348      	movs	r3, #72	@ 0x48
 8002c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b48      	cmp	r3, #72	@ 0x48
 8002ca2:	d00b      	beq.n	8002cbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	61bb      	str	r3, [r7, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002cbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00d      	beq.n	8002ce4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f840 	bl	8002d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3730      	adds	r7, #48	@ 0x30
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b08a      	sub	sp, #40	@ 0x28
 8002cf2:	af02      	add	r7, sp, #8
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <xQueueGenericCreate+0x2c>
	__asm volatile
 8002d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	613b      	str	r3, [r7, #16]
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	e7fd      	b.n	8002d16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3348      	adds	r3, #72	@ 0x48
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fbaf 	bl	800448c <pvPortMalloc>
 8002d2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d011      	beq.n	8002d5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3348      	adds	r3, #72	@ 0x48
 8002d3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d48:	79fa      	ldrb	r2, [r7, #7]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f805 	bl	8002d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e002      	b.n	8002d86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d92:	2101      	movs	r1, #1
 8002d94:	69b8      	ldr	r0, [r7, #24]
 8002d96:	f7ff fec3 	bl	8002b20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08e      	sub	sp, #56	@ 0x38
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002db2:	2300      	movs	r3, #0
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <xQueueGenericSend+0x34>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <xQueueGenericSend+0x42>
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <xQueueGenericSend+0x46>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <xQueueGenericSend+0x48>
 8002dea:	2300      	movs	r3, #0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <xQueueGenericSend+0x64>
	__asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d103      	bne.n	8002e16 <xQueueGenericSend+0x72>
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <xQueueGenericSend+0x76>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <xQueueGenericSend+0x78>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <xQueueGenericSend+0x94>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	623b      	str	r3, [r7, #32]
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e38:	f000 ffcc 	bl	8003dd4 <xTaskGetSchedulerState>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <xQueueGenericSend+0xa4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <xQueueGenericSend+0xa8>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <xQueueGenericSend+0xaa>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10b      	bne.n	8002e6a <xQueueGenericSend+0xc6>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	61fb      	str	r3, [r7, #28]
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	e7fd      	b.n	8002e66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e6a:	f001 f9ed 	bl	8004248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <xQueueGenericSend+0xdc>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d129      	bne.n	8002ed4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e86:	f000 f91f 	bl	80030c8 <prvCopyDataToQueue>
 8002e8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	3324      	adds	r3, #36	@ 0x24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fddb 	bl	8003a54 <xTaskRemoveFromEventList>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa4 <xQueueGenericSend+0x200>)
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	e00a      	b.n	8002ecc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ebc:	4b39      	ldr	r3, [pc, #228]	@ (8002fa4 <xQueueGenericSend+0x200>)
 8002ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ecc:	f001 f9ee 	bl	80042ac <vPortExitCritical>
				return pdPASS;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e063      	b.n	8002f9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eda:	f001 f9e7 	bl	80042ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e05c      	b.n	8002f9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fe15 	bl	8003b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ef6:	f001 f9d9 	bl	80042ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002efa:	f000 fbb3 	bl	8003664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002efe:	f001 f9a3 	bl	8004248 <vPortEnterCritical>
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f0e:	d103      	bne.n	8002f18 <xQueueGenericSend+0x174>
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f24:	d103      	bne.n	8002f2e <xQueueGenericSend+0x18a>
 8002f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f2e:	f001 f9bd 	bl	80042ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f32:	1d3a      	adds	r2, r7, #4
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fe04 	bl	8003b48 <xTaskCheckForTimeOut>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d124      	bne.n	8002f90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f48:	f000 f97a 	bl	8003240 <prvIsQueueFull>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	3310      	adds	r3, #16
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fd54 	bl	8003a08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f62:	f000 f91b 	bl	800319c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f66:	f000 fb8b 	bl	8003680 <xTaskResumeAll>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f47f af7c 	bne.w	8002e6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f72:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <xQueueGenericSend+0x200>)
 8002f74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	e772      	b.n	8002e6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f86:	f000 f909 	bl	800319c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f8a:	f000 fb79 	bl	8003680 <xTaskResumeAll>
 8002f8e:	e76c      	b.n	8002e6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f92:	f000 f903 	bl	800319c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f96:	f000 fb73 	bl	8003680 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3738      	adds	r7, #56	@ 0x38
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	@ 0x38
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	623b      	str	r3, [r7, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	61fb      	str	r3, [r7, #28]
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <xQueueGiveFromISR+0x5c>
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <xQueueGiveFromISR+0x60>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <xQueueGiveFromISR+0x62>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	61bb      	str	r3, [r7, #24]
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003026:	f001 f9ef 	bl	8004408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800302a:	f3ef 8211 	mrs	r2, BASEPRI
 800302e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	617a      	str	r2, [r7, #20]
 8003040:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003042:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003052:	429a      	cmp	r2, r3
 8003054:	d22b      	bcs.n	80030ae <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800305c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003068:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003070:	d112      	bne.n	8003098 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	3324      	adds	r3, #36	@ 0x24
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fce8 	bl	8003a54 <xTaskRemoveFromEventList>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00e      	beq.n	80030a8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e007      	b.n	80030a8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800309c:	3301      	adds	r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	b25a      	sxtb	r2, r3
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80030a8:	2301      	movs	r3, #1
 80030aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ac:	e001      	b.n	80030b2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3738      	adds	r7, #56	@ 0x38
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d14d      	bne.n	800318a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fe8c 	bl	8003e10 <xTaskPriorityDisinherit>
 80030f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	e043      	b.n	800318a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d119      	bne.n	800313c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6858      	ldr	r0, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	461a      	mov	r2, r3
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	f002 fa57 	bl	80055c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	441a      	add	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d32b      	bcc.n	800318a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e026      	b.n	800318a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68d8      	ldr	r0, [r3, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	461a      	mov	r2, r3
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	f002 fa3d 	bl	80055c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	425b      	negs	r3, r3
 8003156:	441a      	add	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d207      	bcs.n	8003178 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	425b      	negs	r3, r3
 8003172:	441a      	add	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d105      	bne.n	800318a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	3b01      	subs	r3, #1
 8003188:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003192:	697b      	ldr	r3, [r7, #20]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031a4:	f001 f850 	bl	8004248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031b0:	e011      	b.n	80031d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3324      	adds	r3, #36	@ 0x24
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fc48 	bl	8003a54 <xTaskRemoveFromEventList>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031ca:	f000 fd21 	bl	8003c10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	dce9      	bgt.n	80031b2 <prvUnlockQueue+0x16>
 80031de:	e000      	b.n	80031e2 <prvUnlockQueue+0x46>
					break;
 80031e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	22ff      	movs	r2, #255	@ 0xff
 80031e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80031ea:	f001 f85f 	bl	80042ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031ee:	f001 f82b 	bl	8004248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031fa:	e011      	b.n	8003220 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d012      	beq.n	800322a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3310      	adds	r3, #16
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fc23 	bl	8003a54 <xTaskRemoveFromEventList>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003214:	f000 fcfc 	bl	8003c10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003218:	7bbb      	ldrb	r3, [r7, #14]
 800321a:	3b01      	subs	r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003224:	2b00      	cmp	r3, #0
 8003226:	dce9      	bgt.n	80031fc <prvUnlockQueue+0x60>
 8003228:	e000      	b.n	800322c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800322a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	22ff      	movs	r2, #255	@ 0xff
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003234:	f001 f83a 	bl	80042ac <vPortExitCritical>
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003248:	f000 fffe 	bl	8004248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	429a      	cmp	r2, r3
 8003256:	d102      	bne.n	800325e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003258:	2301      	movs	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e001      	b.n	8003262 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003262:	f001 f823 	bl	80042ac <vPortExitCritical>

	return xReturn;
 8003266:	68fb      	ldr	r3, [r7, #12]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	@ 0x38
 8003274:	af04      	add	r7, sp, #16
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800327e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	623b      	str	r3, [r7, #32]
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800329c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	61fb      	str	r3, [r7, #28]
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	e7fd      	b.n	80032b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032ba:	2354      	movs	r3, #84	@ 0x54
 80032bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b54      	cmp	r3, #84	@ 0x54
 80032c2:	d00b      	beq.n	80032dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	61bb      	str	r3, [r7, #24]
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01e      	beq.n	8003322 <xTaskCreateStatic+0xb2>
 80032e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01b      	beq.n	8003322 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032fc:	2300      	movs	r3, #0
 80032fe:	9303      	str	r3, [sp, #12]
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	9302      	str	r3, [sp, #8]
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f850 	bl	80033ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800331a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800331c:	f000 f8d6 	bl	80034cc <prvAddNewTaskToReadyList>
 8003320:	e001      	b.n	8003326 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003326:	697b      	ldr	r3, [r7, #20]
	}
 8003328:	4618      	mov	r0, r3
 800332a:	3728      	adds	r7, #40	@ 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	@ 0x30
 8003334:	af04      	add	r7, sp, #16
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f8a1 	bl	800448c <pvPortMalloc>
 800334a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003352:	2054      	movs	r0, #84	@ 0x54
 8003354:	f001 f89a 	bl	800448c <pvPortMalloc>
 8003358:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	631a      	str	r2, [r3, #48]	@ 0x30
 8003366:	e005      	b.n	8003374 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003368:	6978      	ldr	r0, [r7, #20]
 800336a:	f001 f95d 	bl	8004628 <vPortFree>
 800336e:	e001      	b.n	8003374 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d017      	beq.n	80033aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003382:	88fa      	ldrh	r2, [r7, #6]
 8003384:	2300      	movs	r3, #0
 8003386:	9303      	str	r3, [sp, #12]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	9302      	str	r3, [sp, #8]
 800338c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f80e 	bl	80033ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800339e:	69f8      	ldr	r0, [r7, #28]
 80033a0:	f000 f894 	bl	80034cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033a4:	2301      	movs	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	e002      	b.n	80033b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033b0:	69bb      	ldr	r3, [r7, #24]
	}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b088      	sub	sp, #32
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033d2:	3b01      	subs	r3, #1
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f023 0307 	bic.w	r3, r3, #7
 80033e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	617b      	str	r3, [r7, #20]
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01f      	beq.n	800344a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e012      	b.n	8003436 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	7819      	ldrb	r1, [r3, #0]
 8003418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	3334      	adds	r3, #52	@ 0x34
 8003420:	460a      	mov	r2, r1
 8003422:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	3301      	adds	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b0f      	cmp	r3, #15
 800343a:	d9e9      	bls.n	8003410 <prvInitialiseNewTask+0x56>
 800343c:	e000      	b.n	8003440 <prvInitialiseNewTask+0x86>
			{
				break;
 800343e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003448:	e003      	b.n	8003452 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003454:	2b06      	cmp	r3, #6
 8003456:	d901      	bls.n	800345c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003458:	2306      	movs	r3, #6
 800345a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003460:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003466:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	2200      	movs	r2, #0
 800346c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	3304      	adds	r3, #4
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fac0 	bl	80029f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	3318      	adds	r3, #24
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fabb 	bl	80029f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003486:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	f1c3 0207 	rsb	r2, r3, #7
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	2200      	movs	r2, #0
 800349c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	69b8      	ldr	r0, [r7, #24]
 80034ac:	f000 fd9e 	bl	8003fec <pxPortInitialiseStack>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034c2:	bf00      	nop
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034d4:	f000 feb8 	bl	8004248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <prvAddNewTaskToReadyList+0xb8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	4a29      	ldr	r2, [pc, #164]	@ (8003584 <prvAddNewTaskToReadyList+0xb8>)
 80034e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034e2:	4b29      	ldr	r3, [pc, #164]	@ (8003588 <prvAddNewTaskToReadyList+0xbc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ea:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <prvAddNewTaskToReadyList+0xbc>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034f0:	4b24      	ldr	r3, [pc, #144]	@ (8003584 <prvAddNewTaskToReadyList+0xb8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d110      	bne.n	800351a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034f8:	f000 fbae 	bl	8003c58 <prvInitialiseTaskLists>
 80034fc:	e00d      	b.n	800351a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034fe:	4b23      	ldr	r3, [pc, #140]	@ (800358c <prvAddNewTaskToReadyList+0xc0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003506:	4b20      	ldr	r3, [pc, #128]	@ (8003588 <prvAddNewTaskToReadyList+0xbc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	429a      	cmp	r2, r3
 8003512:	d802      	bhi.n	800351a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003514:	4a1c      	ldr	r2, [pc, #112]	@ (8003588 <prvAddNewTaskToReadyList+0xbc>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800351a:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <prvAddNewTaskToReadyList+0xc4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <prvAddNewTaskToReadyList+0xc4>)
 8003522:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	2201      	movs	r2, #1
 800352a:	409a      	lsls	r2, r3
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <prvAddNewTaskToReadyList+0xc8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4313      	orrs	r3, r2
 8003532:	4a18      	ldr	r2, [pc, #96]	@ (8003594 <prvAddNewTaskToReadyList+0xc8>)
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4a15      	ldr	r2, [pc, #84]	@ (8003598 <prvAddNewTaskToReadyList+0xcc>)
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3304      	adds	r3, #4
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f7ff fa60 	bl	8002a12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003552:	f000 feab 	bl	80042ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <prvAddNewTaskToReadyList+0xc0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00e      	beq.n	800357c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800355e:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <prvAddNewTaskToReadyList+0xbc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	429a      	cmp	r2, r3
 800356a:	d207      	bcs.n	800357c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <prvAddNewTaskToReadyList+0xd0>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	200004d8 	.word	0x200004d8
 8003588:	200003d8 	.word	0x200003d8
 800358c:	200004e4 	.word	0x200004e4
 8003590:	200004f4 	.word	0x200004f4
 8003594:	200004e0 	.word	0x200004e0
 8003598:	200003dc 	.word	0x200003dc
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	@ 0x28
 80035a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035ae:	463a      	mov	r2, r7
 80035b0:	1d39      	adds	r1, r7, #4
 80035b2:	f107 0308 	add.w	r3, r7, #8
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd f818 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	9202      	str	r2, [sp, #8]
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	2300      	movs	r3, #0
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	460a      	mov	r2, r1
 80035ce:	491f      	ldr	r1, [pc, #124]	@ (800364c <vTaskStartScheduler+0xac>)
 80035d0:	481f      	ldr	r0, [pc, #124]	@ (8003650 <vTaskStartScheduler+0xb0>)
 80035d2:	f7ff fe4d 	bl	8003270 <xTaskCreateStatic>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003654 <vTaskStartScheduler+0xb4>)
 80035da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <vTaskStartScheduler+0xb4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035e4:	2301      	movs	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e001      	b.n	80035ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d116      	bne.n	8003622 <vTaskStartScheduler+0x82>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	613b      	str	r3, [r7, #16]
}
 8003606:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003608:	4b13      	ldr	r3, [pc, #76]	@ (8003658 <vTaskStartScheduler+0xb8>)
 800360a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800360e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003610:	4b12      	ldr	r3, [pc, #72]	@ (800365c <vTaskStartScheduler+0xbc>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003616:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <vTaskStartScheduler+0xc0>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800361c:	f000 fd70 	bl	8004100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003620:	e00f      	b.n	8003642 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003628:	d10b      	bne.n	8003642 <vTaskStartScheduler+0xa2>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	60fb      	str	r3, [r7, #12]
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	e7fd      	b.n	800363e <vTaskStartScheduler+0x9e>
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	08006328 	.word	0x08006328
 8003650:	08003c29 	.word	0x08003c29
 8003654:	200004fc 	.word	0x200004fc
 8003658:	200004f8 	.word	0x200004f8
 800365c:	200004e4 	.word	0x200004e4
 8003660:	200004dc 	.word	0x200004dc

08003664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003668:	4b04      	ldr	r3, [pc, #16]	@ (800367c <vTaskSuspendAll+0x18>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	4a03      	ldr	r2, [pc, #12]	@ (800367c <vTaskSuspendAll+0x18>)
 8003670:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	20000500 	.word	0x20000500

08003680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800368e:	4b42      	ldr	r3, [pc, #264]	@ (8003798 <xTaskResumeAll+0x118>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <xTaskResumeAll+0x2e>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	603b      	str	r3, [r7, #0]
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	e7fd      	b.n	80036aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036ae:	f000 fdcb 	bl	8004248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036b2:	4b39      	ldr	r3, [pc, #228]	@ (8003798 <xTaskResumeAll+0x118>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	4a37      	ldr	r2, [pc, #220]	@ (8003798 <xTaskResumeAll+0x118>)
 80036ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036bc:	4b36      	ldr	r3, [pc, #216]	@ (8003798 <xTaskResumeAll+0x118>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d161      	bne.n	8003788 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036c4:	4b35      	ldr	r3, [pc, #212]	@ (800379c <xTaskResumeAll+0x11c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05d      	beq.n	8003788 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036cc:	e02e      	b.n	800372c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ce:	4b34      	ldr	r3, [pc, #208]	@ (80037a0 <xTaskResumeAll+0x120>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3318      	adds	r3, #24
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f9f6 	bl	8002acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f9f1 	bl	8002acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	2201      	movs	r2, #1
 80036f0:	409a      	lsls	r2, r3
 80036f2:	4b2c      	ldr	r3, [pc, #176]	@ (80037a4 <xTaskResumeAll+0x124>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	4a2a      	ldr	r2, [pc, #168]	@ (80037a4 <xTaskResumeAll+0x124>)
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4a27      	ldr	r2, [pc, #156]	@ (80037a8 <xTaskResumeAll+0x128>)
 800370a:	441a      	add	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f7ff f97d 	bl	8002a12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371c:	4b23      	ldr	r3, [pc, #140]	@ (80037ac <xTaskResumeAll+0x12c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003726:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <xTaskResumeAll+0x130>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800372c:	4b1c      	ldr	r3, [pc, #112]	@ (80037a0 <xTaskResumeAll+0x120>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1cc      	bne.n	80036ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800373a:	f000 fb2b 	bl	8003d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800373e:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <xTaskResumeAll+0x134>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800374a:	f000 f847 	bl	80037dc <xTaskIncrementTick>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003754:	4b16      	ldr	r3, [pc, #88]	@ (80037b0 <xTaskResumeAll+0x130>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3b01      	subs	r3, #1
 800375e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f1      	bne.n	800374a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003766:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <xTaskResumeAll+0x134>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <xTaskResumeAll+0x130>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003778:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <xTaskResumeAll+0x138>)
 800377a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003788:	f000 fd90 	bl	80042ac <vPortExitCritical>

	return xAlreadyYielded;
 800378c:	68bb      	ldr	r3, [r7, #8]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000500 	.word	0x20000500
 800379c:	200004d8 	.word	0x200004d8
 80037a0:	20000498 	.word	0x20000498
 80037a4:	200004e0 	.word	0x200004e0
 80037a8:	200003dc 	.word	0x200003dc
 80037ac:	200003d8 	.word	0x200003d8
 80037b0:	200004ec 	.word	0x200004ec
 80037b4:	200004e8 	.word	0x200004e8
 80037b8:	e000ed04 	.word	0xe000ed04

080037bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037c2:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <xTaskGetTickCount+0x1c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037c8:	687b      	ldr	r3, [r7, #4]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	200004dc 	.word	0x200004dc

080037dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003924 <xTaskIncrementTick+0x148>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 808f 	bne.w	800390e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003928 <xTaskIncrementTick+0x14c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003928 <xTaskIncrementTick+0x14c>)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d121      	bne.n	8003848 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003804:	4b49      	ldr	r3, [pc, #292]	@ (800392c <xTaskIncrementTick+0x150>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <xTaskIncrementTick+0x4a>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	603b      	str	r3, [r7, #0]
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <xTaskIncrementTick+0x46>
 8003826:	4b41      	ldr	r3, [pc, #260]	@ (800392c <xTaskIncrementTick+0x150>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	4b40      	ldr	r3, [pc, #256]	@ (8003930 <xTaskIncrementTick+0x154>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3e      	ldr	r2, [pc, #248]	@ (800392c <xTaskIncrementTick+0x150>)
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4a3e      	ldr	r2, [pc, #248]	@ (8003930 <xTaskIncrementTick+0x154>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b3e      	ldr	r3, [pc, #248]	@ (8003934 <xTaskIncrementTick+0x158>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	4a3c      	ldr	r2, [pc, #240]	@ (8003934 <xTaskIncrementTick+0x158>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	f000 faa6 	bl	8003d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003848:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <xTaskIncrementTick+0x15c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	429a      	cmp	r2, r3
 8003850:	d348      	bcc.n	80038e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003852:	4b36      	ldr	r3, [pc, #216]	@ (800392c <xTaskIncrementTick+0x150>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800385c:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <xTaskIncrementTick+0x15c>)
 800385e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003862:	601a      	str	r2, [r3, #0]
					break;
 8003864:	e03e      	b.n	80038e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003866:	4b31      	ldr	r3, [pc, #196]	@ (800392c <xTaskIncrementTick+0x150>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	429a      	cmp	r2, r3
 800387c:	d203      	bcs.n	8003886 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800387e:	4a2e      	ldr	r2, [pc, #184]	@ (8003938 <xTaskIncrementTick+0x15c>)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003884:	e02e      	b.n	80038e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f91e 	bl	8002acc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	3318      	adds	r3, #24
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff f915 	bl	8002acc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	4b24      	ldr	r3, [pc, #144]	@ (800393c <xTaskIncrementTick+0x160>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	4a22      	ldr	r2, [pc, #136]	@ (800393c <xTaskIncrementTick+0x160>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003940 <xTaskIncrementTick+0x164>)
 80038c2:	441a      	add	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7ff f8a1 	bl	8002a12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <xTaskIncrementTick+0x168>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	429a      	cmp	r2, r3
 80038dc:	d3b9      	bcc.n	8003852 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80038de:	2301      	movs	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038e2:	e7b6      	b.n	8003852 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038e4:	4b17      	ldr	r3, [pc, #92]	@ (8003944 <xTaskIncrementTick+0x168>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ea:	4915      	ldr	r1, [pc, #84]	@ (8003940 <xTaskIncrementTick+0x164>)
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d901      	bls.n	8003900 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003900:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <xTaskIncrementTick+0x16c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e004      	b.n	8003918 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800390e:	4b0f      	ldr	r3, [pc, #60]	@ (800394c <xTaskIncrementTick+0x170>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3301      	adds	r3, #1
 8003914:	4a0d      	ldr	r2, [pc, #52]	@ (800394c <xTaskIncrementTick+0x170>)
 8003916:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003918:	697b      	ldr	r3, [r7, #20]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000500 	.word	0x20000500
 8003928:	200004dc 	.word	0x200004dc
 800392c:	20000490 	.word	0x20000490
 8003930:	20000494 	.word	0x20000494
 8003934:	200004f0 	.word	0x200004f0
 8003938:	200004f8 	.word	0x200004f8
 800393c:	200004e0 	.word	0x200004e0
 8003940:	200003dc 	.word	0x200003dc
 8003944:	200003d8 	.word	0x200003d8
 8003948:	200004ec 	.word	0x200004ec
 800394c:	200004e8 	.word	0x200004e8

08003950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003956:	4b27      	ldr	r3, [pc, #156]	@ (80039f4 <vTaskSwitchContext+0xa4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800395e:	4b26      	ldr	r3, [pc, #152]	@ (80039f8 <vTaskSwitchContext+0xa8>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003964:	e040      	b.n	80039e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003966:	4b24      	ldr	r3, [pc, #144]	@ (80039f8 <vTaskSwitchContext+0xa8>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800396c:	4b23      	ldr	r3, [pc, #140]	@ (80039fc <vTaskSwitchContext+0xac>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800397a:	7afb      	ldrb	r3, [r7, #11]
 800397c:	f1c3 031f 	rsb	r3, r3, #31
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	491f      	ldr	r1, [pc, #124]	@ (8003a00 <vTaskSwitchContext+0xb0>)
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	607b      	str	r3, [r7, #4]
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	e7fd      	b.n	80039aa <vTaskSwitchContext+0x5a>
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4a11      	ldr	r2, [pc, #68]	@ (8003a00 <vTaskSwitchContext+0xb0>)
 80039ba:	4413      	add	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	3308      	adds	r3, #8
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d104      	bne.n	80039de <vTaskSwitchContext+0x8e>
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a07      	ldr	r2, [pc, #28]	@ (8003a04 <vTaskSwitchContext+0xb4>)
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	20000500 	.word	0x20000500
 80039f8:	200004ec 	.word	0x200004ec
 80039fc:	200004e0 	.word	0x200004e0
 8003a00:	200003dc 	.word	0x200003dc
 8003a04:	200003d8 	.word	0x200003d8

08003a08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	60fb      	str	r3, [r7, #12]
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a30:	4b07      	ldr	r3, [pc, #28]	@ (8003a50 <vTaskPlaceOnEventList+0x48>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3318      	adds	r3, #24
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff f80e 	bl	8002a5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a3e:	2101      	movs	r1, #1
 8003a40:	6838      	ldr	r0, [r7, #0]
 8003a42:	f000 fa6d 	bl	8003f20 <prvAddCurrentTaskToDelayedList>
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200003d8 	.word	0x200003d8

08003a54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	60fb      	str	r3, [r7, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	e7fd      	b.n	8003a7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3318      	adds	r3, #24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff f820 	bl	8002acc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <xTaskRemoveFromEventList+0xb0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11c      	bne.n	8003ace <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f817 	bl	8002acc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <xTaskRemoveFromEventList+0xb4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <xTaskRemoveFromEventList+0xb4>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4a13      	ldr	r2, [pc, #76]	@ (8003b0c <xTaskRemoveFromEventList+0xb8>)
 8003abe:	441a      	add	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fe ffa3 	bl	8002a12 <vListInsertEnd>
 8003acc:	e005      	b.n	8003ada <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480e      	ldr	r0, [pc, #56]	@ (8003b10 <xTaskRemoveFromEventList+0xbc>)
 8003ad6:	f7fe ff9c 	bl	8002a12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <xTaskRemoveFromEventList+0xc0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d905      	bls.n	8003af4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <xTaskRemoveFromEventList+0xc4>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e001      	b.n	8003af8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003af8:	697b      	ldr	r3, [r7, #20]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000500 	.word	0x20000500
 8003b08:	200004e0 	.word	0x200004e0
 8003b0c:	200003dc 	.word	0x200003dc
 8003b10:	20000498 	.word	0x20000498
 8003b14:	200003d8 	.word	0x200003d8
 8003b18:	200004ec 	.word	0x200004ec

08003b1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b24:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <vTaskInternalSetTimeOutState+0x24>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <vTaskInternalSetTimeOutState+0x28>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	605a      	str	r2, [r3, #4]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	200004f0 	.word	0x200004f0
 8003b44:	200004dc 	.word	0x200004dc

08003b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	613b      	str	r3, [r7, #16]
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60fb      	str	r3, [r7, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	e7fd      	b.n	8003b8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003b8e:	f000 fb5b 	bl	8004248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b92:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <xTaskCheckForTimeOut+0xc0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003baa:	d102      	bne.n	8003bb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	e023      	b.n	8003bfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b15      	ldr	r3, [pc, #84]	@ (8003c0c <xTaskCheckForTimeOut+0xc4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d007      	beq.n	8003bce <xTaskCheckForTimeOut+0x86>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e015      	b.n	8003bfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d20b      	bcs.n	8003bf0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff99 	bl	8003b1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e004      	b.n	8003bfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bfa:	f000 fb57 	bl	80042ac <vPortExitCritical>

	return xReturn;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200004dc 	.word	0x200004dc
 8003c0c:	200004f0 	.word	0x200004f0

08003c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c14:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <vTaskMissedYield+0x14>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	200004ec 	.word	0x200004ec

08003c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c30:	f000 f852 	bl	8003cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <prvIdleTask+0x28>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d9f9      	bls.n	8003c30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c3c:	4b05      	ldr	r3, [pc, #20]	@ (8003c54 <prvIdleTask+0x2c>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c4c:	e7f0      	b.n	8003c30 <prvIdleTask+0x8>
 8003c4e:	bf00      	nop
 8003c50:	200003dc 	.word	0x200003dc
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e00c      	b.n	8003c7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a12      	ldr	r2, [pc, #72]	@ (8003cb8 <prvInitialiseTaskLists+0x60>)
 8003c70:	4413      	add	r3, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fea0 	bl	80029b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d9ef      	bls.n	8003c64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c84:	480d      	ldr	r0, [pc, #52]	@ (8003cbc <prvInitialiseTaskLists+0x64>)
 8003c86:	f7fe fe97 	bl	80029b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c8a:	480d      	ldr	r0, [pc, #52]	@ (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003c8c:	f7fe fe94 	bl	80029b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c90:	480c      	ldr	r0, [pc, #48]	@ (8003cc4 <prvInitialiseTaskLists+0x6c>)
 8003c92:	f7fe fe91 	bl	80029b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c96:	480c      	ldr	r0, [pc, #48]	@ (8003cc8 <prvInitialiseTaskLists+0x70>)
 8003c98:	f7fe fe8e 	bl	80029b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c9c:	480b      	ldr	r0, [pc, #44]	@ (8003ccc <prvInitialiseTaskLists+0x74>)
 8003c9e:	f7fe fe8b 	bl	80029b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <prvInitialiseTaskLists+0x78>)
 8003ca4:	4a05      	ldr	r2, [pc, #20]	@ (8003cbc <prvInitialiseTaskLists+0x64>)
 8003ca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <prvInitialiseTaskLists+0x7c>)
 8003caa:	4a05      	ldr	r2, [pc, #20]	@ (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200003dc 	.word	0x200003dc
 8003cbc:	20000468 	.word	0x20000468
 8003cc0:	2000047c 	.word	0x2000047c
 8003cc4:	20000498 	.word	0x20000498
 8003cc8:	200004ac 	.word	0x200004ac
 8003ccc:	200004c4 	.word	0x200004c4
 8003cd0:	20000490 	.word	0x20000490
 8003cd4:	20000494 	.word	0x20000494

08003cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cde:	e019      	b.n	8003d14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ce0:	f000 fab2 	bl	8004248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <prvCheckTasksWaitingTermination+0x50>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe feeb 	bl	8002acc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	4a0a      	ldr	r2, [pc, #40]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d0a:	f000 facf 	bl	80042ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f810 	bl	8003d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d14:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e1      	bne.n	8003ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200004ac 	.word	0x200004ac
 8003d2c:	200004d8 	.word	0x200004d8
 8003d30:	200004c0 	.word	0x200004c0

08003d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d108      	bne.n	8003d58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fc6c 	bl	8004628 <vPortFree>
				vPortFree( pxTCB );
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fc69 	bl	8004628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d56:	e019      	b.n	8003d8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d103      	bne.n	8003d6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fc60 	bl	8004628 <vPortFree>
	}
 8003d68:	e010      	b.n	8003d8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d00b      	beq.n	8003d8c <prvDeleteTCB+0x58>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <prvDeleteTCB+0x54>
	}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dac:	e008      	b.n	8003dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	20000490 	.word	0x20000490
 8003dd0:	200004f8 	.word	0x200004f8

08003dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dda:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <xTaskGetSchedulerState+0x34>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003de2:	2301      	movs	r3, #1
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	e008      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de8:	4b08      	ldr	r3, [pc, #32]	@ (8003e0c <xTaskGetSchedulerState+0x38>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003df0:	2302      	movs	r3, #2
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	e001      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dfa:	687b      	ldr	r3, [r7, #4]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	200004e4 	.word	0x200004e4
 8003e0c:	20000500 	.word	0x20000500

08003e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d070      	beq.n	8003f08 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e26:	4b3b      	ldr	r3, [pc, #236]	@ (8003f14 <xTaskPriorityDisinherit+0x104>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d00b      	beq.n	8003e48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60fb      	str	r3, [r7, #12]
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60bb      	str	r3, [r7, #8]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d044      	beq.n	8003f08 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d140      	bne.n	8003f08 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fe1e 	bl	8002acc <uxListRemove>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d115      	bne.n	8003ec2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9a:	491f      	ldr	r1, [pc, #124]	@ (8003f18 <xTaskPriorityDisinherit+0x108>)
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xTaskPriorityDisinherit+0xb2>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <xTaskPriorityDisinherit+0x10c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	4a17      	ldr	r2, [pc, #92]	@ (8003f1c <xTaskPriorityDisinherit+0x10c>)
 8003ec0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	f1c3 0207 	rsb	r2, r3, #7
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	2201      	movs	r2, #1
 8003edc:	409a      	lsls	r2, r3
 8003ede:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <xTaskPriorityDisinherit+0x10c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8003f1c <xTaskPriorityDisinherit+0x10c>)
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4a08      	ldr	r2, [pc, #32]	@ (8003f18 <xTaskPriorityDisinherit+0x108>)
 8003ef6:	441a      	add	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f7fe fd87 	bl	8002a12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f08:	697b      	ldr	r3, [r7, #20]
	}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200003d8 	.word	0x200003d8
 8003f18:	200003dc 	.word	0x200003dc
 8003f1c:	200004e0 	.word	0x200004e0

08003f20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f2a:	4b29      	ldr	r3, [pc, #164]	@ (8003fd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f30:	4b28      	ldr	r3, [pc, #160]	@ (8003fd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fdc8 	bl	8002acc <uxListRemove>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f42:	4b24      	ldr	r3, [pc, #144]	@ (8003fd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	4b21      	ldr	r3, [pc, #132]	@ (8003fd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4013      	ands	r3, r2
 8003f56:	4a20      	ldr	r2, [pc, #128]	@ (8003fd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f60:	d10a      	bne.n	8003f78 <prvAddCurrentTaskToDelayedList+0x58>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f68:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	481a      	ldr	r0, [pc, #104]	@ (8003fdc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f72:	f7fe fd4e 	bl	8002a12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f76:	e026      	b.n	8003fc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f80:	4b14      	ldr	r3, [pc, #80]	@ (8003fd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d209      	bcs.n	8003fa4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f90:	4b13      	ldr	r3, [pc, #76]	@ (8003fe0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7fe fd5c 	bl	8002a5a <vListInsert>
}
 8003fa2:	e010      	b.n	8003fc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f7fe fd52 	bl	8002a5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d202      	bcs.n	8003fc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fc0:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6013      	str	r3, [r2, #0]
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200004dc 	.word	0x200004dc
 8003fd4:	200003d8 	.word	0x200003d8
 8003fd8:	200004e0 	.word	0x200004e0
 8003fdc:	200004c4 	.word	0x200004c4
 8003fe0:	20000494 	.word	0x20000494
 8003fe4:	20000490 	.word	0x20000490
 8003fe8:	200004f8 	.word	0x200004f8

08003fec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3b04      	subs	r3, #4
 8003ffc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b04      	subs	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b04      	subs	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800401c:	4a0c      	ldr	r2, [pc, #48]	@ (8004050 <pxPortInitialiseStack+0x64>)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b14      	subs	r3, #20
 8004026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b04      	subs	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f06f 0202 	mvn.w	r2, #2
 800403a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b20      	subs	r3, #32
 8004040:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	08004055 	.word	0x08004055

08004054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800405e:	4b13      	ldr	r3, [pc, #76]	@ (80040ac <prvTaskExitError+0x58>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004066:	d00b      	beq.n	8004080 <prvTaskExitError+0x2c>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	60fb      	str	r3, [r7, #12]
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	e7fd      	b.n	800407c <prvTaskExitError+0x28>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60bb      	str	r3, [r7, #8]
}
 8004092:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004094:	bf00      	nop
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0fc      	beq.n	8004096 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040b0:	4b07      	ldr	r3, [pc, #28]	@ (80040d0 <pxCurrentTCBConst2>)
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	6808      	ldr	r0, [r1, #0]
 80040b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ba:	f380 8809 	msr	PSP, r0
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8811 	msr	BASEPRI, r0
 80040ca:	4770      	bx	lr
 80040cc:	f3af 8000 	nop.w

080040d0 <pxCurrentTCBConst2>:
 80040d0:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop

080040d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040d8:	4808      	ldr	r0, [pc, #32]	@ (80040fc <prvPortStartFirstTask+0x24>)
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	6800      	ldr	r0, [r0, #0]
 80040de:	f380 8808 	msr	MSP, r0
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f380 8814 	msr	CONTROL, r0
 80040ea:	b662      	cpsie	i
 80040ec:	b661      	cpsie	f
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	df00      	svc	0
 80040f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040fa:	bf00      	nop
 80040fc:	e000ed08 	.word	0xe000ed08

08004100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004106:	4b47      	ldr	r3, [pc, #284]	@ (8004224 <xPortStartScheduler+0x124>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a47      	ldr	r2, [pc, #284]	@ (8004228 <xPortStartScheduler+0x128>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10b      	bne.n	8004128 <xPortStartScheduler+0x28>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004128:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <xPortStartScheduler+0x124>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3f      	ldr	r2, [pc, #252]	@ (800422c <xPortStartScheduler+0x12c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10b      	bne.n	800414a <xPortStartScheduler+0x4a>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	613b      	str	r3, [r7, #16]
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	e7fd      	b.n	8004146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800414a:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <xPortStartScheduler+0x130>)
 800414c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	22ff      	movs	r2, #255	@ 0xff
 800415a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b31      	ldr	r3, [pc, #196]	@ (8004234 <xPortStartScheduler+0x134>)
 8004170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004172:	4b31      	ldr	r3, [pc, #196]	@ (8004238 <xPortStartScheduler+0x138>)
 8004174:	2207      	movs	r2, #7
 8004176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004178:	e009      	b.n	800418e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800417a:	4b2f      	ldr	r3, [pc, #188]	@ (8004238 <xPortStartScheduler+0x138>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3b01      	subs	r3, #1
 8004180:	4a2d      	ldr	r2, [pc, #180]	@ (8004238 <xPortStartScheduler+0x138>)
 8004182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d0ef      	beq.n	800417a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800419a:	4b27      	ldr	r3, [pc, #156]	@ (8004238 <xPortStartScheduler+0x138>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1c3 0307 	rsb	r3, r3, #7
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d00b      	beq.n	80041be <xPortStartScheduler+0xbe>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	60bb      	str	r3, [r7, #8]
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041be:	4b1e      	ldr	r3, [pc, #120]	@ (8004238 <xPortStartScheduler+0x138>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004238 <xPortStartScheduler+0x138>)
 80041c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <xPortStartScheduler+0x138>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041d0:	4a19      	ldr	r2, [pc, #100]	@ (8004238 <xPortStartScheduler+0x138>)
 80041d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041dc:	4b17      	ldr	r3, [pc, #92]	@ (800423c <xPortStartScheduler+0x13c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a16      	ldr	r2, [pc, #88]	@ (800423c <xPortStartScheduler+0x13c>)
 80041e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041e8:	4b14      	ldr	r3, [pc, #80]	@ (800423c <xPortStartScheduler+0x13c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a13      	ldr	r2, [pc, #76]	@ (800423c <xPortStartScheduler+0x13c>)
 80041ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80041f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041f4:	f000 f8da 	bl	80043ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041f8:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <xPortStartScheduler+0x140>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041fe:	f000 f8f9 	bl	80043f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <xPortStartScheduler+0x144>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a0f      	ldr	r2, [pc, #60]	@ (8004244 <xPortStartScheduler+0x144>)
 8004208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800420c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800420e:	f7ff ff63 	bl	80040d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004212:	f7ff fb9d 	bl	8003950 <vTaskSwitchContext>
	prvTaskExitError();
 8004216:	f7ff ff1d 	bl	8004054 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	e000ed00 	.word	0xe000ed00
 8004228:	410fc271 	.word	0x410fc271
 800422c:	410fc270 	.word	0x410fc270
 8004230:	e000e400 	.word	0xe000e400
 8004234:	20000504 	.word	0x20000504
 8004238:	20000508 	.word	0x20000508
 800423c:	e000ed20 	.word	0xe000ed20
 8004240:	2000000c 	.word	0x2000000c
 8004244:	e000ef34 	.word	0xe000ef34

08004248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	607b      	str	r3, [r7, #4]
}
 8004260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004262:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <vPortEnterCritical+0x5c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	4a0e      	ldr	r2, [pc, #56]	@ (80042a4 <vPortEnterCritical+0x5c>)
 800426a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800426c:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <vPortEnterCritical+0x5c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d110      	bne.n	8004296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004274:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <vPortEnterCritical+0x60>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <vPortEnterCritical+0x4e>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	603b      	str	r3, [r7, #0]
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <vPortEnterCritical+0x4a>
	}
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000000c 	.word	0x2000000c
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <vPortExitCritical+0x50>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <vPortExitCritical+0x26>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	607b      	str	r3, [r7, #4]
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	e7fd      	b.n	80042ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042d2:	4b0a      	ldr	r3, [pc, #40]	@ (80042fc <vPortExitCritical+0x50>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	4a08      	ldr	r2, [pc, #32]	@ (80042fc <vPortExitCritical+0x50>)
 80042da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042dc:	4b07      	ldr	r3, [pc, #28]	@ (80042fc <vPortExitCritical+0x50>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <vPortExitCritical+0x44>
 80042e4:	2300      	movs	r3, #0
 80042e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f383 8811 	msr	BASEPRI, r3
}
 80042ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	2000000c 	.word	0x2000000c

08004300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004300:	f3ef 8009 	mrs	r0, PSP
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <pxCurrentTCBConst>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f01e 0f10 	tst.w	lr, #16
 8004310:	bf08      	it	eq
 8004312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431a:	6010      	str	r0, [r2, #0]
 800431c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004324:	f380 8811 	msr	BASEPRI, r0
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f7ff fb0e 	bl	8003950 <vTaskSwitchContext>
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f380 8811 	msr	BASEPRI, r0
 800433c:	bc09      	pop	{r0, r3}
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	6808      	ldr	r0, [r1, #0]
 8004342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004346:	f01e 0f10 	tst.w	lr, #16
 800434a:	bf08      	it	eq
 800434c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004350:	f380 8809 	msr	PSP, r0
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	f3af 8000 	nop.w

08004360 <pxCurrentTCBConst>:
 8004360:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop

08004368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	607b      	str	r3, [r7, #4]
}
 8004380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004382:	f7ff fa2b 	bl	80037dc <xTaskIncrementTick>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <SysTick_Handler+0x40>)
 800438e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	2300      	movs	r3, #0
 8004396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f383 8811 	msr	BASEPRI, r3
}
 800439e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <vPortSetupTimerInterrupt+0x34>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <vPortSetupTimerInterrupt+0x38>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <vPortSetupTimerInterrupt+0x3c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	@ (80043ec <vPortSetupTimerInterrupt+0x40>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <vPortSetupTimerInterrupt+0x44>)
 80043ca:	3b01      	subs	r3, #1
 80043cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ce:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <vPortSetupTimerInterrupt+0x34>)
 80043d0:	2207      	movs	r2, #7
 80043d2:	601a      	str	r2, [r3, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	e000e010 	.word	0xe000e010
 80043e4:	e000e018 	.word	0xe000e018
 80043e8:	20000000 	.word	0x20000000
 80043ec:	10624dd3 	.word	0x10624dd3
 80043f0:	e000e014 	.word	0xe000e014

080043f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004404 <vPortEnableVFP+0x10>
 80043f8:	6801      	ldr	r1, [r0, #0]
 80043fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80043fe:	6001      	str	r1, [r0, #0]
 8004400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004402:	bf00      	nop
 8004404:	e000ed88 	.word	0xe000ed88

08004408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800440e:	f3ef 8305 	mrs	r3, IPSR
 8004412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b0f      	cmp	r3, #15
 8004418:	d915      	bls.n	8004446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800441a:	4a18      	ldr	r2, [pc, #96]	@ (800447c <vPortValidateInterruptPriority+0x74>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <vPortValidateInterruptPriority+0x78>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	7afa      	ldrb	r2, [r7, #11]
 800442a:	429a      	cmp	r2, r3
 800442c:	d20b      	bcs.n	8004446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004446:	4b0f      	ldr	r3, [pc, #60]	@ (8004484 <vPortValidateInterruptPriority+0x7c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <vPortValidateInterruptPriority+0x80>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d90b      	bls.n	800446e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	603b      	str	r3, [r7, #0]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <vPortValidateInterruptPriority+0x62>
	}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	e000e3f0 	.word	0xe000e3f0
 8004480:	20000504 	.word	0x20000504
 8004484:	e000ed0c 	.word	0xe000ed0c
 8004488:	20000508 	.word	0x20000508

0800448c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	@ 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004498:	f7ff f8e4 	bl	8003664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800449c:	4b5c      	ldr	r3, [pc, #368]	@ (8004610 <pvPortMalloc+0x184>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044a4:	f000 f924 	bl	80046f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004614 <pvPortMalloc+0x188>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 8095 	bne.w	80045e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01e      	beq.n	80044fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044bc:	2208      	movs	r2, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d015      	beq.n	80044fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f023 0307 	bic.w	r3, r3, #7
 80044d4:	3308      	adds	r3, #8
 80044d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <pvPortMalloc+0x6e>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	617b      	str	r3, [r7, #20]
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d06f      	beq.n	80045e0 <pvPortMalloc+0x154>
 8004500:	4b45      	ldr	r3, [pc, #276]	@ (8004618 <pvPortMalloc+0x18c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d86a      	bhi.n	80045e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800450a:	4b44      	ldr	r3, [pc, #272]	@ (800461c <pvPortMalloc+0x190>)
 800450c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800450e:	4b43      	ldr	r3, [pc, #268]	@ (800461c <pvPortMalloc+0x190>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004514:	e004      	b.n	8004520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d903      	bls.n	8004532 <pvPortMalloc+0xa6>
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f1      	bne.n	8004516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004532:	4b37      	ldr	r3, [pc, #220]	@ (8004610 <pvPortMalloc+0x184>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	429a      	cmp	r2, r3
 800453a:	d051      	beq.n	80045e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2208      	movs	r2, #8
 8004542:	4413      	add	r3, r2
 8004544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	1ad2      	subs	r2, r2, r3
 8004556:	2308      	movs	r3, #8
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	429a      	cmp	r2, r3
 800455c:	d920      	bls.n	80045a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800455e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <pvPortMalloc+0xfc>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	613b      	str	r3, [r7, #16]
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800459a:	69b8      	ldr	r0, [r7, #24]
 800459c:	f000 f90a 	bl	80047b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <pvPortMalloc+0x18c>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <pvPortMalloc+0x18c>)
 80045ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004618 <pvPortMalloc+0x18c>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <pvPortMalloc+0x194>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d203      	bcs.n	80045c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045ba:	4b17      	ldr	r3, [pc, #92]	@ (8004618 <pvPortMalloc+0x18c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a18      	ldr	r2, [pc, #96]	@ (8004620 <pvPortMalloc+0x194>)
 80045c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4b13      	ldr	r3, [pc, #76]	@ (8004614 <pvPortMalloc+0x188>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045d6:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <pvPortMalloc+0x198>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	4a11      	ldr	r2, [pc, #68]	@ (8004624 <pvPortMalloc+0x198>)
 80045de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045e0:	f7ff f84e 	bl	8003680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <pvPortMalloc+0x17a>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60fb      	str	r3, [r7, #12]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <pvPortMalloc+0x176>
	return pvReturn;
 8004606:	69fb      	ldr	r3, [r7, #28]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	@ 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20004114 	.word	0x20004114
 8004614:	20004128 	.word	0x20004128
 8004618:	20004118 	.word	0x20004118
 800461c:	2000410c 	.word	0x2000410c
 8004620:	2000411c 	.word	0x2000411c
 8004624:	20004120 	.word	0x20004120

08004628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d04f      	beq.n	80046da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800463a:	2308      	movs	r3, #8
 800463c:	425b      	negs	r3, r3
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4413      	add	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <vPortFree+0xbc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <vPortFree+0x46>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60fb      	str	r3, [r7, #12]
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	e7fd      	b.n	800466a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <vPortFree+0x66>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	60bb      	str	r3, [r7, #8]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	4b14      	ldr	r3, [pc, #80]	@ (80046e4 <vPortFree+0xbc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01e      	beq.n	80046da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d11a      	bne.n	80046da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4b0e      	ldr	r3, [pc, #56]	@ (80046e4 <vPortFree+0xbc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046b4:	f7fe ffd6 	bl	8003664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <vPortFree+0xc0>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <vPortFree+0xc0>)
 80046c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046c6:	6938      	ldr	r0, [r7, #16]
 80046c8:	f000 f874 	bl	80047b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046cc:	4b07      	ldr	r3, [pc, #28]	@ (80046ec <vPortFree+0xc4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a06      	ldr	r2, [pc, #24]	@ (80046ec <vPortFree+0xc4>)
 80046d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046d6:	f7fe ffd3 	bl	8003680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20004128 	.word	0x20004128
 80046e8:	20004118 	.word	0x20004118
 80046ec:	20004124 	.word	0x20004124

080046f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80046fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046fc:	4b27      	ldr	r3, [pc, #156]	@ (800479c <prvHeapInit+0xac>)
 80046fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3307      	adds	r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0307 	bic.w	r3, r3, #7
 8004716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <prvHeapInit+0xac>)
 8004720:	4413      	add	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004728:	4a1d      	ldr	r2, [pc, #116]	@ (80047a0 <prvHeapInit+0xb0>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800472e:	4b1c      	ldr	r3, [pc, #112]	@ (80047a0 <prvHeapInit+0xb0>)
 8004730:	2200      	movs	r2, #0
 8004732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4413      	add	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800473c:	2208      	movs	r2, #8
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <prvHeapInit+0xb4>)
 8004750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004752:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <prvHeapInit+0xb4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800475a:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <prvHeapInit+0xb4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	1ad2      	subs	r2, r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <prvHeapInit+0xb4>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a0a      	ldr	r2, [pc, #40]	@ (80047a8 <prvHeapInit+0xb8>)
 800477e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a09      	ldr	r2, [pc, #36]	@ (80047ac <prvHeapInit+0xbc>)
 8004786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004788:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <prvHeapInit+0xc0>)
 800478a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	2000050c 	.word	0x2000050c
 80047a0:	2000410c 	.word	0x2000410c
 80047a4:	20004114 	.word	0x20004114
 80047a8:	2000411c 	.word	0x2000411c
 80047ac:	20004118 	.word	0x20004118
 80047b0:	20004128 	.word	0x20004128

080047b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047bc:	4b28      	ldr	r3, [pc, #160]	@ (8004860 <prvInsertBlockIntoFreeList+0xac>)
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e002      	b.n	80047c8 <prvInsertBlockIntoFreeList+0x14>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d8f7      	bhi.n	80047c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	4413      	add	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d108      	bne.n	80047f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	441a      	add	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	441a      	add	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d118      	bne.n	800483c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b15      	ldr	r3, [pc, #84]	@ (8004864 <prvInsertBlockIntoFreeList+0xb0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d00d      	beq.n	8004832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	441a      	add	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e008      	b.n	8004844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004832:	4b0c      	ldr	r3, [pc, #48]	@ (8004864 <prvInsertBlockIntoFreeList+0xb0>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e003      	b.n	8004844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	429a      	cmp	r2, r3
 800484a:	d002      	beq.n	8004852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	2000410c 	.word	0x2000410c
 8004864:	20004114 	.word	0x20004114

08004868 <app_init>:
TaskHandle_t h_task_a;
TaskHandle_t h_task_b;

/********************** external functions definition ************************/
void app_init(void)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b087      	sub	sp, #28
 800486c:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800486e:	f7ff fceb 	bl	8004248 <vPortEnterCritical>
 8004872:	4b4d      	ldr	r3, [pc, #308]	@ (80049a8 <app_init+0x140>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a4d      	ldr	r2, [pc, #308]	@ (80049ac <app_init+0x144>)
 8004878:	213f      	movs	r1, #63	@ 0x3f
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fdae 	bl	80053dc <sniprintf>
 8004880:	4603      	mov	r3, r0
 8004882:	4a4b      	ldr	r2, [pc, #300]	@ (80049b0 <app_init+0x148>)
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b48      	ldr	r3, [pc, #288]	@ (80049a8 <app_init+0x140>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f8aa 	bl	80049e4 <logger_log_print_>
 8004890:	f7ff fd0c 	bl	80042ac <vPortExitCritical>
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)xTaskGetTickCount());
 8004894:	f7ff fcd8 	bl	8004248 <vPortEnterCritical>
 8004898:	4b43      	ldr	r3, [pc, #268]	@ (80049a8 <app_init+0x140>)
 800489a:	681c      	ldr	r4, [r3, #0]
 800489c:	f7fe ff8e 	bl	80037bc <xTaskGetTickCount>
 80048a0:	4603      	mov	r3, r0
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	4b43      	ldr	r3, [pc, #268]	@ (80049b4 <app_init+0x14c>)
 80048a6:	4a44      	ldr	r2, [pc, #272]	@ (80049b8 <app_init+0x150>)
 80048a8:	213f      	movs	r1, #63	@ 0x3f
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fd96 	bl	80053dc <sniprintf>
 80048b0:	4603      	mov	r3, r0
 80048b2:	4a3f      	ldr	r2, [pc, #252]	@ (80049b0 <app_init+0x148>)
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b3c      	ldr	r3, [pc, #240]	@ (80049a8 <app_init+0x140>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f892 	bl	80049e4 <logger_log_print_>
 80048c0:	f7ff fcf4 	bl	80042ac <vPortExitCritical>

	LOGGER_LOG(p_sys);
 80048c4:	f7ff fcc0 	bl	8004248 <vPortEnterCritical>
 80048c8:	4b37      	ldr	r3, [pc, #220]	@ (80049a8 <app_init+0x140>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3b      	ldr	r2, [pc, #236]	@ (80049bc <app_init+0x154>)
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	213f      	movs	r1, #63	@ 0x3f
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fd82 	bl	80053dc <sniprintf>
 80048d8:	4603      	mov	r3, r0
 80048da:	4a35      	ldr	r2, [pc, #212]	@ (80049b0 <app_init+0x148>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b32      	ldr	r3, [pc, #200]	@ (80049a8 <app_init+0x140>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f87e 	bl	80049e4 <logger_log_print_>
 80048e8:	f7ff fce0 	bl	80042ac <vPortExitCritical>
	LOGGER_LOG(p_app);
 80048ec:	f7ff fcac 	bl	8004248 <vPortEnterCritical>
 80048f0:	4b2d      	ldr	r3, [pc, #180]	@ (80049a8 <app_init+0x140>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a32      	ldr	r2, [pc, #200]	@ (80049c0 <app_init+0x158>)
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	213f      	movs	r1, #63	@ 0x3f
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fd6e 	bl	80053dc <sniprintf>
 8004900:	4603      	mov	r3, r0
 8004902:	4a2b      	ldr	r2, [pc, #172]	@ (80049b0 <app_init+0x148>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b28      	ldr	r3, [pc, #160]	@ (80049a8 <app_init+0x140>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f86a 	bl	80049e4 <logger_log_print_>
 8004910:	f7ff fccc 	bl	80042ac <vPortExitCritical>

	/* Add threads, ... */
    BaseType_t ret;

    /* Task A thread at priority 1 */
    ret = xTaskCreate(task_a,							/* Pointer to the function thats implement the task. */
 8004914:	4b2b      	ldr	r3, [pc, #172]	@ (80049c4 <app_init+0x15c>)
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	2301      	movs	r3, #1
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	2300      	movs	r3, #0
 800491e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004922:	4929      	ldr	r1, [pc, #164]	@ (80049c8 <app_init+0x160>)
 8004924:	4829      	ldr	r0, [pc, #164]	@ (80049cc <app_init+0x164>)
 8004926:	f7fe fd03 	bl	8003330 <xTaskCreate>
 800492a:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 1ul),			/* This task will run at priority 1. */
					  &h_task_a);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d00b      	beq.n	800494a <app_init+0xe2>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60bb      	str	r3, [r7, #8]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <app_init+0xde>

    /* Task B thread at priority 1 */
    ret = xTaskCreate(task_b,							/* Pointer to the function thats implement the task. */
 800494a:	4b21      	ldr	r3, [pc, #132]	@ (80049d0 <app_init+0x168>)
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	2301      	movs	r3, #1
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	2300      	movs	r3, #0
 8004954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004958:	491e      	ldr	r1, [pc, #120]	@ (80049d4 <app_init+0x16c>)
 800495a:	481f      	ldr	r0, [pc, #124]	@ (80049d8 <app_init+0x170>)
 800495c:	f7fe fce8 	bl	8003330 <xTaskCreate>
 8004960:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 1ul),			/* This task will run at priority 1. */
					  &h_task_b);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d00b      	beq.n	8004980 <app_init+0x118>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	607b      	str	r3, [r7, #4]
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <app_init+0x114>

	cycle_counter_init();
 8004980:	4b16      	ldr	r3, [pc, #88]	@ (80049dc <app_init+0x174>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a15      	ldr	r2, [pc, #84]	@ (80049dc <app_init+0x174>)
 8004986:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800498a:	60d3      	str	r3, [r2, #12]
 800498c:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <app_init+0x178>)
 800498e:	2200      	movs	r2, #0
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	4b13      	ldr	r3, [pc, #76]	@ (80049e0 <app_init+0x178>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a12      	ldr	r2, [pc, #72]	@ (80049e0 <app_init+0x178>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6013      	str	r3, [r2, #0]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd90      	pop	{r4, r7, pc}
 80049a6:	bf00      	nop
 80049a8:	080064a4 	.word	0x080064a4
 80049ac:	08006380 	.word	0x08006380
 80049b0:	20004174 	.word	0x20004174
 80049b4:	08006384 	.word	0x08006384
 80049b8:	08006390 	.word	0x08006390
 80049bc:	20000010 	.word	0x20000010
 80049c0:	20000014 	.word	0x20000014
 80049c4:	2000412c 	.word	0x2000412c
 80049c8:	080063b4 	.word	0x080063b4
 80049cc:	08004a0d 	.word	0x08004a0d
 80049d0:	20004130 	.word	0x20004130
 80049d4:	080063bc 	.word	0x080063bc
 80049d8:	08004ac5 	.word	0x08004ac5
 80049dc:	e000edf0 	.word	0xe000edf0
 80049e0:	e0001000 	.word	0xe0001000

080049e4 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	printf(msg);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fce3 	bl	80053b8 <iprintf>
	fflush(stdout);
 80049f2:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <logger_log_print_+0x24>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fc07 	bl	800520c <fflush>
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000034 	.word	0x20000034

08004a0c <task_a>:
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
/* Task A thread */
void task_a(void *parameters)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	uint32_t task_a_cnt;
	g_task_a_cnt = G_TASK_A_CNT_INI;
 8004a14:	4b23      	ldr	r3, [pc, #140]	@ (8004aa4 <task_a+0x98>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
	{

		#if (TEST_X == TEST_0)

		/* Update Task A Counter */
		g_task_a_cnt++;
 8004a1a:	4b22      	ldr	r3, [pc, #136]	@ (8004aa4 <task_a+0x98>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	4a20      	ldr	r2, [pc, #128]	@ (8004aa4 <task_a+0x98>)
 8004a22:	6013      	str	r3, [r2, #0]

		/* Print out: Application Update */
		LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a), p_task_a);
 8004a24:	f7ff fc10 	bl	8004248 <vPortEnterCritical>
 8004a28:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa8 <task_a+0x9c>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004aac <task_a+0xa0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab0 <task_a+0xa4>)
 8004a34:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab4 <task_a+0xa8>)
 8004a36:	213f      	movs	r1, #63	@ 0x3f
 8004a38:	f000 fcd0 	bl	80053dc <sniprintf>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab8 <task_a+0xac>)
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <task_a+0x9c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff ffcc 	bl	80049e4 <logger_log_print_>
 8004a4c:	f7ff fc2e 	bl	80042ac <vPortExitCritical>

		/* Print out: Task execution counter */
		LOGGER_LOG("   Tick [mS] = %d - %s = %d\r\n", (int)xTaskGetTickCount(), GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 8004a50:	f7ff fbfa 	bl	8004248 <vPortEnterCritical>
 8004a54:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <task_a+0x9c>)
 8004a56:	681c      	ldr	r4, [r3, #0]
 8004a58:	f7fe feb0 	bl	80037bc <xTaskGetTickCount>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <task_a+0x98>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <task_a+0xb0>)
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	4a14      	ldr	r2, [pc, #80]	@ (8004ac0 <task_a+0xb4>)
 8004a6e:	213f      	movs	r1, #63	@ 0x3f
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 fcb3 	bl	80053dc <sniprintf>
 8004a76:	4603      	mov	r3, r0
 8004a78:	4a0f      	ldr	r2, [pc, #60]	@ (8004ab8 <task_a+0xac>)
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <task_a+0x9c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff ffaf 	bl	80049e4 <logger_log_print_>
 8004a86:	f7ff fc11 	bl	80042ac <vPortExitCritical>

		for (task_a_cnt = TASK_A_CNT_INI; TASK_A_CNT_MAX > task_a_cnt; task_a_cnt++);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e002      	b.n	8004a96 <task_a+0x8a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d9f7      	bls.n	8004a90 <task_a+0x84>
		g_task_a_cnt++;
 8004aa0:	e7bb      	b.n	8004a1a <task_a+0xe>
 8004aa2:	bf00      	nop
 8004aa4:	20004178 	.word	0x20004178
 8004aa8:	080064a4 	.word	0x080064a4
 8004aac:	20000018 	.word	0x20000018
 8004ab0:	080063d8 	.word	0x080063d8
 8004ab4:	080063e0 	.word	0x080063e0
 8004ab8:	20004174 	.word	0x20004174
 8004abc:	08006418 	.word	0x08006418
 8004ac0:	080063f8 	.word	0x080063f8

08004ac4 <task_b>:
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
/* Task B thread */
void task_b(void *parameters)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	uint32_t task_b_cnt;
	g_task_b_cnt = G_TASK_B_CNT_INI;
 8004acc:	4b23      	ldr	r3, [pc, #140]	@ (8004b5c <task_b+0x98>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
	for (;;)
    {
		#if (TEST_X == TEST_0)

		/* Update Task B Counter */
		g_task_b_cnt++;
 8004ad2:	4b22      	ldr	r3, [pc, #136]	@ (8004b5c <task_b+0x98>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <task_b+0x98>)
 8004ada:	6013      	str	r3, [r2, #0]

		/* Print out: Application Update */
		LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b), p_task_b);
 8004adc:	f7ff fbb4 	bl	8004248 <vPortEnterCritical>
 8004ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b60 <task_b+0x9c>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b64 <task_b+0xa0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4b1f      	ldr	r3, [pc, #124]	@ (8004b68 <task_b+0xa4>)
 8004aec:	4a1f      	ldr	r2, [pc, #124]	@ (8004b6c <task_b+0xa8>)
 8004aee:	213f      	movs	r1, #63	@ 0x3f
 8004af0:	f000 fc74 	bl	80053dc <sniprintf>
 8004af4:	4603      	mov	r3, r0
 8004af6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <task_b+0xac>)
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <task_b+0x9c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff ff70 	bl	80049e4 <logger_log_print_>
 8004b04:	f7ff fbd2 	bl	80042ac <vPortExitCritical>

		/* Print out: Task execution counter */
		LOGGER_LOG("   Tick [mS] = %d - %s = %d\r\n", (int)xTaskGetTickCount(), GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8004b08:	f7ff fb9e 	bl	8004248 <vPortEnterCritical>
 8004b0c:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <task_b+0x9c>)
 8004b0e:	681c      	ldr	r4, [r3, #0]
 8004b10:	f7fe fe54 	bl	80037bc <xTaskGetTickCount>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
 8004b18:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <task_b+0x98>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <task_b+0xb0>)
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <task_b+0xb4>)
 8004b26:	213f      	movs	r1, #63	@ 0x3f
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fc57 	bl	80053dc <sniprintf>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4a0f      	ldr	r2, [pc, #60]	@ (8004b70 <task_b+0xac>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	4b0a      	ldr	r3, [pc, #40]	@ (8004b60 <task_b+0x9c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff53 	bl	80049e4 <logger_log_print_>
 8004b3e:	f7ff fbb5 	bl	80042ac <vPortExitCritical>

		for (task_b_cnt = TASK_B_CNT_INI; TASK_B_CNT_MAX > task_b_cnt; task_b_cnt++);
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e002      	b.n	8004b4e <task_b+0x8a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d9f7      	bls.n	8004b48 <task_b+0x84>
		g_task_b_cnt++;
 8004b58:	e7bb      	b.n	8004ad2 <task_b+0xe>
 8004b5a:	bf00      	nop
 8004b5c:	2000417c 	.word	0x2000417c
 8004b60:	080064a4 	.word	0x080064a4
 8004b64:	2000001c 	.word	0x2000001c
 8004b68:	0800643c 	.word	0x0800643c
 8004b6c:	08006444 	.word	0x08006444
 8004b70:	20004174 	.word	0x20004174
 8004b74:	0800647c 	.word	0x0800647c
 8004b78:	0800645c 	.word	0x0800645c

08004b7c <findslot>:
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <findslot+0x2c>)
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	4604      	mov	r4, r0
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	b118      	cbz	r0, 8004b8e <findslot+0x12>
 8004b86:	6a03      	ldr	r3, [r0, #32]
 8004b88:	b90b      	cbnz	r3, 8004b8e <findslot+0x12>
 8004b8a:	f000 fbdf 	bl	800534c <__sinit>
 8004b8e:	2c13      	cmp	r4, #19
 8004b90:	d807      	bhi.n	8004ba2 <findslot+0x26>
 8004b92:	4806      	ldr	r0, [pc, #24]	@ (8004bac <findslot+0x30>)
 8004b94:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004b98:	3201      	adds	r2, #1
 8004b9a:	d002      	beq.n	8004ba2 <findslot+0x26>
 8004b9c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	e7fc      	b.n	8004ba0 <findslot+0x24>
 8004ba6:	bf00      	nop
 8004ba8:	20000034 	.word	0x20000034
 8004bac:	2000418c 	.word	0x2000418c

08004bb0 <error>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	f000 fcda 	bl	800556c <__errno>
 8004bb8:	2613      	movs	r6, #19
 8004bba:	4605      	mov	r5, r0
 8004bbc:	2700      	movs	r7, #0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	beab      	bkpt	0x00ab
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	602e      	str	r6, [r5, #0]
 8004bc8:	4620      	mov	r0, r4
 8004bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bcc <checkerror>:
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d101      	bne.n	8004bd4 <checkerror+0x8>
 8004bd0:	f7ff bfee 	b.w	8004bb0 <error>
 8004bd4:	4770      	bx	lr

08004bd6 <_swiread>:
 8004bd6:	b530      	push	{r4, r5, lr}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004bde:	9203      	str	r2, [sp, #12]
 8004be0:	2406      	movs	r4, #6
 8004be2:	ad01      	add	r5, sp, #4
 8004be4:	4620      	mov	r0, r4
 8004be6:	4629      	mov	r1, r5
 8004be8:	beab      	bkpt	0x00ab
 8004bea:	4604      	mov	r4, r0
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff ffed 	bl	8004bcc <checkerror>
 8004bf2:	b005      	add	sp, #20
 8004bf4:	bd30      	pop	{r4, r5, pc}

08004bf6 <_read>:
 8004bf6:	b570      	push	{r4, r5, r6, lr}
 8004bf8:	460e      	mov	r6, r1
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	f7ff ffbe 	bl	8004b7c <findslot>
 8004c00:	4605      	mov	r5, r0
 8004c02:	b930      	cbnz	r0, 8004c12 <_read+0x1c>
 8004c04:	f000 fcb2 	bl	800556c <__errno>
 8004c08:	2309      	movs	r3, #9
 8004c0a:	6003      	str	r3, [r0, #0]
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c10:	bd70      	pop	{r4, r5, r6, pc}
 8004c12:	6800      	ldr	r0, [r0, #0]
 8004c14:	4622      	mov	r2, r4
 8004c16:	4631      	mov	r1, r6
 8004c18:	f7ff ffdd 	bl	8004bd6 <_swiread>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d0f5      	beq.n	8004c0c <_read+0x16>
 8004c20:	686b      	ldr	r3, [r5, #4]
 8004c22:	1a20      	subs	r0, r4, r0
 8004c24:	4403      	add	r3, r0
 8004c26:	606b      	str	r3, [r5, #4]
 8004c28:	e7f2      	b.n	8004c10 <_read+0x1a>

08004c2a <_swilseek>:
 8004c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	4616      	mov	r6, r2
 8004c30:	f7ff ffa4 	bl	8004b7c <findslot>
 8004c34:	4605      	mov	r5, r0
 8004c36:	b940      	cbnz	r0, 8004c4a <_swilseek+0x20>
 8004c38:	f000 fc98 	bl	800556c <__errno>
 8004c3c:	2309      	movs	r3, #9
 8004c3e:	6003      	str	r3, [r0, #0]
 8004c40:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c44:	4620      	mov	r0, r4
 8004c46:	b003      	add	sp, #12
 8004c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c4a:	2e02      	cmp	r6, #2
 8004c4c:	d903      	bls.n	8004c56 <_swilseek+0x2c>
 8004c4e:	f000 fc8d 	bl	800556c <__errno>
 8004c52:	2316      	movs	r3, #22
 8004c54:	e7f3      	b.n	8004c3e <_swilseek+0x14>
 8004c56:	2e01      	cmp	r6, #1
 8004c58:	d112      	bne.n	8004c80 <_swilseek+0x56>
 8004c5a:	6843      	ldr	r3, [r0, #4]
 8004c5c:	18e4      	adds	r4, r4, r3
 8004c5e:	d4f6      	bmi.n	8004c4e <_swilseek+0x24>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	260a      	movs	r6, #10
 8004c64:	e9cd 3400 	strd	r3, r4, [sp]
 8004c68:	466f      	mov	r7, sp
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	beab      	bkpt	0x00ab
 8004c70:	4606      	mov	r6, r0
 8004c72:	4630      	mov	r0, r6
 8004c74:	f7ff ffaa 	bl	8004bcc <checkerror>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	dbe1      	blt.n	8004c40 <_swilseek+0x16>
 8004c7c:	606c      	str	r4, [r5, #4]
 8004c7e:	e7e1      	b.n	8004c44 <_swilseek+0x1a>
 8004c80:	2e02      	cmp	r6, #2
 8004c82:	6803      	ldr	r3, [r0, #0]
 8004c84:	d1ec      	bne.n	8004c60 <_swilseek+0x36>
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	260c      	movs	r6, #12
 8004c8a:	466f      	mov	r7, sp
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	4639      	mov	r1, r7
 8004c90:	beab      	bkpt	0x00ab
 8004c92:	4606      	mov	r6, r0
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7ff ff99 	bl	8004bcc <checkerror>
 8004c9a:	1c43      	adds	r3, r0, #1
 8004c9c:	d0d0      	beq.n	8004c40 <_swilseek+0x16>
 8004c9e:	4404      	add	r4, r0
 8004ca0:	e7de      	b.n	8004c60 <_swilseek+0x36>

08004ca2 <_lseek>:
 8004ca2:	f7ff bfc2 	b.w	8004c2a <_swilseek>

08004ca6 <_swiwrite>:
 8004ca6:	b530      	push	{r4, r5, lr}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004cae:	9203      	str	r2, [sp, #12]
 8004cb0:	2405      	movs	r4, #5
 8004cb2:	ad01      	add	r5, sp, #4
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	beab      	bkpt	0x00ab
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7ff ff85 	bl	8004bcc <checkerror>
 8004cc2:	b005      	add	sp, #20
 8004cc4:	bd30      	pop	{r4, r5, pc}

08004cc6 <_write>:
 8004cc6:	b570      	push	{r4, r5, r6, lr}
 8004cc8:	460e      	mov	r6, r1
 8004cca:	4615      	mov	r5, r2
 8004ccc:	f7ff ff56 	bl	8004b7c <findslot>
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	b930      	cbnz	r0, 8004ce2 <_write+0x1c>
 8004cd4:	f000 fc4a 	bl	800556c <__errno>
 8004cd8:	2309      	movs	r3, #9
 8004cda:	6003      	str	r3, [r0, #0]
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ce0:	bd70      	pop	{r4, r5, r6, pc}
 8004ce2:	6800      	ldr	r0, [r0, #0]
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	f7ff ffdd 	bl	8004ca6 <_swiwrite>
 8004cec:	1e03      	subs	r3, r0, #0
 8004cee:	dbf5      	blt.n	8004cdc <_write+0x16>
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	1ae8      	subs	r0, r5, r3
 8004cf4:	4402      	add	r2, r0
 8004cf6:	42ab      	cmp	r3, r5
 8004cf8:	6062      	str	r2, [r4, #4]
 8004cfa:	d1f1      	bne.n	8004ce0 <_write+0x1a>
 8004cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d00:	2000      	movs	r0, #0
 8004d02:	f7ff bf55 	b.w	8004bb0 <error>

08004d06 <_swiclose>:
 8004d06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d08:	2402      	movs	r4, #2
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	ad01      	add	r5, sp, #4
 8004d0e:	4620      	mov	r0, r4
 8004d10:	4629      	mov	r1, r5
 8004d12:	beab      	bkpt	0x00ab
 8004d14:	4604      	mov	r4, r0
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7ff ff58 	bl	8004bcc <checkerror>
 8004d1c:	b003      	add	sp, #12
 8004d1e:	bd30      	pop	{r4, r5, pc}

08004d20 <_close>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4605      	mov	r5, r0
 8004d24:	f7ff ff2a 	bl	8004b7c <findslot>
 8004d28:	4604      	mov	r4, r0
 8004d2a:	b930      	cbnz	r0, 8004d3a <_close+0x1a>
 8004d2c:	f000 fc1e 	bl	800556c <__errno>
 8004d30:	2309      	movs	r3, #9
 8004d32:	6003      	str	r3, [r0, #0]
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	3d01      	subs	r5, #1
 8004d3c:	2d01      	cmp	r5, #1
 8004d3e:	d809      	bhi.n	8004d54 <_close+0x34>
 8004d40:	4b09      	ldr	r3, [pc, #36]	@ (8004d68 <_close+0x48>)
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d104      	bne.n	8004d54 <_close+0x34>
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d4e:	6003      	str	r3, [r0, #0]
 8004d50:	2000      	movs	r0, #0
 8004d52:	e7f1      	b.n	8004d38 <_close+0x18>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	f7ff ffd6 	bl	8004d06 <_swiclose>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d1ec      	bne.n	8004d38 <_close+0x18>
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	e7e8      	b.n	8004d38 <_close+0x18>
 8004d66:	bf00      	nop
 8004d68:	2000418c 	.word	0x2000418c

08004d6c <_swistat>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	460c      	mov	r4, r1
 8004d70:	f7ff ff04 	bl	8004b7c <findslot>
 8004d74:	4605      	mov	r5, r0
 8004d76:	b930      	cbnz	r0, 8004d86 <_swistat+0x1a>
 8004d78:	f000 fbf8 	bl	800556c <__errno>
 8004d7c:	2309      	movs	r3, #9
 8004d7e:	6003      	str	r3, [r0, #0]
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d8c:	6063      	str	r3, [r4, #4]
 8004d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d92:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004d94:	260c      	movs	r6, #12
 8004d96:	4630      	mov	r0, r6
 8004d98:	4629      	mov	r1, r5
 8004d9a:	beab      	bkpt	0x00ab
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f7ff ff14 	bl	8004bcc <checkerror>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d0eb      	beq.n	8004d80 <_swistat+0x14>
 8004da8:	6120      	str	r0, [r4, #16]
 8004daa:	2000      	movs	r0, #0
 8004dac:	e7ea      	b.n	8004d84 <_swistat+0x18>

08004dae <_fstat>:
 8004dae:	460b      	mov	r3, r1
 8004db0:	b510      	push	{r4, lr}
 8004db2:	2100      	movs	r1, #0
 8004db4:	4604      	mov	r4, r0
 8004db6:	2258      	movs	r2, #88	@ 0x58
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fb88 	bl	80054ce <memset>
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc6:	f7ff bfd1 	b.w	8004d6c <_swistat>

08004dca <_stat>:
 8004dca:	b538      	push	{r3, r4, r5, lr}
 8004dcc:	460d      	mov	r5, r1
 8004dce:	4604      	mov	r4, r0
 8004dd0:	2258      	movs	r2, #88	@ 0x58
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 fb7a 	bl	80054ce <memset>
 8004dda:	4620      	mov	r0, r4
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f000 f811 	bl	8004e04 <_swiopen>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	4604      	mov	r4, r0
 8004de6:	d00b      	beq.n	8004e00 <_stat+0x36>
 8004de8:	686b      	ldr	r3, [r5, #4]
 8004dea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004dee:	606b      	str	r3, [r5, #4]
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7ff ffbb 	bl	8004d6c <_swistat>
 8004df6:	4605      	mov	r5, r0
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f7ff ff91 	bl	8004d20 <_close>
 8004dfe:	462c      	mov	r4, r5
 8004e00:	4620      	mov	r0, r4
 8004e02:	bd38      	pop	{r3, r4, r5, pc}

08004e04 <_swiopen>:
 8004e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8004eb4 <_swiopen+0xb0>
 8004e0c:	b096      	sub	sp, #88	@ 0x58
 8004e0e:	4607      	mov	r7, r0
 8004e10:	460e      	mov	r6, r1
 8004e12:	2400      	movs	r4, #0
 8004e14:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8004e1e:	d032      	beq.n	8004e86 <_swiopen+0x82>
 8004e20:	3401      	adds	r4, #1
 8004e22:	2c14      	cmp	r4, #20
 8004e24:	d1f6      	bne.n	8004e14 <_swiopen+0x10>
 8004e26:	f000 fba1 	bl	800556c <__errno>
 8004e2a:	2318      	movs	r3, #24
 8004e2c:	e03a      	b.n	8004ea4 <_swiopen+0xa0>
 8004e2e:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8004e32:	f240 6301 	movw	r3, #1537	@ 0x601
 8004e36:	07b2      	lsls	r2, r6, #30
 8004e38:	bf48      	it	mi
 8004e3a:	f045 0502 	orrmi.w	r5, r5, #2
 8004e3e:	421e      	tst	r6, r3
 8004e40:	bf18      	it	ne
 8004e42:	f045 0504 	orrne.w	r5, r5, #4
 8004e46:	0733      	lsls	r3, r6, #28
 8004e48:	bf48      	it	mi
 8004e4a:	f025 0504 	bicmi.w	r5, r5, #4
 8004e4e:	4638      	mov	r0, r7
 8004e50:	bf48      	it	mi
 8004e52:	f045 0508 	orrmi.w	r5, r5, #8
 8004e56:	9700      	str	r7, [sp, #0]
 8004e58:	f7fb f9da 	bl	8000210 <strlen>
 8004e5c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004e60:	2501      	movs	r5, #1
 8004e62:	4628      	mov	r0, r5
 8004e64:	4651      	mov	r1, sl
 8004e66:	beab      	bkpt	0x00ab
 8004e68:	4605      	mov	r5, r0
 8004e6a:	2d00      	cmp	r5, #0
 8004e6c:	db06      	blt.n	8004e7c <_swiopen+0x78>
 8004e6e:	44c8      	add	r8, r9
 8004e70:	2300      	movs	r3, #0
 8004e72:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8004e76:	f8c8 3004 	str.w	r3, [r8, #4]
 8004e7a:	e016      	b.n	8004eaa <_swiopen+0xa6>
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f7ff fe97 	bl	8004bb0 <error>
 8004e82:	4604      	mov	r4, r0
 8004e84:	e011      	b.n	8004eaa <_swiopen+0xa6>
 8004e86:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8004e8a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e8e:	46ea      	mov	sl, sp
 8004e90:	d1cd      	bne.n	8004e2e <_swiopen+0x2a>
 8004e92:	4651      	mov	r1, sl
 8004e94:	4638      	mov	r0, r7
 8004e96:	f7ff ff98 	bl	8004dca <_stat>
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d0c7      	beq.n	8004e2e <_swiopen+0x2a>
 8004e9e:	f000 fb65 	bl	800556c <__errno>
 8004ea2:	2311      	movs	r3, #17
 8004ea4:	6003      	str	r3, [r0, #0]
 8004ea6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004eaa:	4620      	mov	r0, r4
 8004eac:	b016      	add	sp, #88	@ 0x58
 8004eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb2:	bf00      	nop
 8004eb4:	2000418c 	.word	0x2000418c

08004eb8 <_get_semihosting_exts>:
 8004eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	460f      	mov	r7, r1
 8004ec0:	4829      	ldr	r0, [pc, #164]	@ (8004f68 <_get_semihosting_exts+0xb0>)
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4615      	mov	r5, r2
 8004ec6:	f7ff ff9d 	bl	8004e04 <_swiopen>
 8004eca:	462a      	mov	r2, r5
 8004ecc:	4604      	mov	r4, r0
 8004ece:	2100      	movs	r1, #0
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 fafc 	bl	80054ce <memset>
 8004ed6:	1c63      	adds	r3, r4, #1
 8004ed8:	d014      	beq.n	8004f04 <_get_semihosting_exts+0x4c>
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7ff fe4e 	bl	8004b7c <findslot>
 8004ee0:	f04f 080c 	mov.w	r8, #12
 8004ee4:	4681      	mov	r9, r0
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	4649      	mov	r1, r9
 8004eea:	beab      	bkpt	0x00ab
 8004eec:	4680      	mov	r8, r0
 8004eee:	4640      	mov	r0, r8
 8004ef0:	f7ff fe6c 	bl	8004bcc <checkerror>
 8004ef4:	2803      	cmp	r0, #3
 8004ef6:	dd02      	ble.n	8004efe <_get_semihosting_exts+0x46>
 8004ef8:	1ec3      	subs	r3, r0, #3
 8004efa:	42ab      	cmp	r3, r5
 8004efc:	dc07      	bgt.n	8004f0e <_get_semihosting_exts+0x56>
 8004efe:	4620      	mov	r0, r4
 8004f00:	f7ff ff0e 	bl	8004d20 <_close>
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f08:	b003      	add	sp, #12
 8004f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f0e:	2204      	movs	r2, #4
 8004f10:	eb0d 0102 	add.w	r1, sp, r2
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7ff fe6e 	bl	8004bf6 <_read>
 8004f1a:	2803      	cmp	r0, #3
 8004f1c:	ddef      	ble.n	8004efe <_get_semihosting_exts+0x46>
 8004f1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f22:	2b53      	cmp	r3, #83	@ 0x53
 8004f24:	d1eb      	bne.n	8004efe <_get_semihosting_exts+0x46>
 8004f26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004f2a:	2b48      	cmp	r3, #72	@ 0x48
 8004f2c:	d1e7      	bne.n	8004efe <_get_semihosting_exts+0x46>
 8004f2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004f32:	2b46      	cmp	r3, #70	@ 0x46
 8004f34:	d1e3      	bne.n	8004efe <_get_semihosting_exts+0x46>
 8004f36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f3a:	2b42      	cmp	r3, #66	@ 0x42
 8004f3c:	d1df      	bne.n	8004efe <_get_semihosting_exts+0x46>
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4639      	mov	r1, r7
 8004f42:	4620      	mov	r0, r4
 8004f44:	f7ff fe71 	bl	8004c2a <_swilseek>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	dbd8      	blt.n	8004efe <_get_semihosting_exts+0x46>
 8004f4c:	462a      	mov	r2, r5
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff fe50 	bl	8004bf6 <_read>
 8004f56:	4605      	mov	r5, r0
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f7ff fee1 	bl	8004d20 <_close>
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f7ff fe34 	bl	8004bcc <checkerror>
 8004f64:	e7d0      	b.n	8004f08 <_get_semihosting_exts+0x50>
 8004f66:	bf00      	nop
 8004f68:	080064a8 	.word	0x080064a8

08004f6c <initialise_semihosting_exts>:
 8004f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f6e:	4d0a      	ldr	r5, [pc, #40]	@ (8004f98 <initialise_semihosting_exts+0x2c>)
 8004f70:	4c0a      	ldr	r4, [pc, #40]	@ (8004f9c <initialise_semihosting_exts+0x30>)
 8004f72:	2100      	movs	r1, #0
 8004f74:	2201      	movs	r2, #1
 8004f76:	a801      	add	r0, sp, #4
 8004f78:	6029      	str	r1, [r5, #0]
 8004f7a:	6022      	str	r2, [r4, #0]
 8004f7c:	f7ff ff9c 	bl	8004eb8 <_get_semihosting_exts>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	dd07      	ble.n	8004f94 <initialise_semihosting_exts+0x28>
 8004f84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f88:	f003 0201 	and.w	r2, r3, #1
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	b003      	add	sp, #12
 8004f96:	bd30      	pop	{r4, r5, pc}
 8004f98:	20000024 	.word	0x20000024
 8004f9c:	20000020 	.word	0x20000020

08004fa0 <_has_ext_stdout_stderr>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	4c04      	ldr	r4, [pc, #16]	@ (8004fb4 <_has_ext_stdout_stderr+0x14>)
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	da01      	bge.n	8004fae <_has_ext_stdout_stderr+0xe>
 8004faa:	f7ff ffdf 	bl	8004f6c <initialise_semihosting_exts>
 8004fae:	6820      	ldr	r0, [r4, #0]
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000020 	.word	0x20000020

08004fb8 <initialise_monitor_handles>:
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8005070 <initialise_monitor_handles+0xb8>
 8004fc2:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	2400      	movs	r4, #0
 8004fca:	9303      	str	r3, [sp, #12]
 8004fcc:	af01      	add	r7, sp, #4
 8004fce:	9402      	str	r4, [sp, #8]
 8004fd0:	2501      	movs	r5, #1
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	beab      	bkpt	0x00ab
 8004fd8:	4605      	mov	r5, r0
 8004fda:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005074 <initialise_monitor_handles+0xbc>
 8004fde:	4623      	mov	r3, r4
 8004fe0:	4c20      	ldr	r4, [pc, #128]	@ (8005064 <initialise_monitor_handles+0xac>)
 8004fe2:	f8c8 5000 	str.w	r5, [r8]
 8004fe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fea:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	2b14      	cmp	r3, #20
 8004ff2:	d1fa      	bne.n	8004fea <initialise_monitor_handles+0x32>
 8004ff4:	f7ff ffd4 	bl	8004fa0 <_has_ext_stdout_stderr>
 8004ff8:	4d1b      	ldr	r5, [pc, #108]	@ (8005068 <initialise_monitor_handles+0xb0>)
 8004ffa:	b1d0      	cbz	r0, 8005032 <initialise_monitor_handles+0x7a>
 8004ffc:	f04f 0a03 	mov.w	sl, #3
 8005000:	2304      	movs	r3, #4
 8005002:	f8cd 9004 	str.w	r9, [sp, #4]
 8005006:	2601      	movs	r6, #1
 8005008:	f8cd a00c 	str.w	sl, [sp, #12]
 800500c:	9302      	str	r3, [sp, #8]
 800500e:	4630      	mov	r0, r6
 8005010:	4639      	mov	r1, r7
 8005012:	beab      	bkpt	0x00ab
 8005014:	4683      	mov	fp, r0
 8005016:	4b15      	ldr	r3, [pc, #84]	@ (800506c <initialise_monitor_handles+0xb4>)
 8005018:	f8cd 9004 	str.w	r9, [sp, #4]
 800501c:	f8c3 b000 	str.w	fp, [r3]
 8005020:	2308      	movs	r3, #8
 8005022:	f8cd a00c 	str.w	sl, [sp, #12]
 8005026:	9302      	str	r3, [sp, #8]
 8005028:	4630      	mov	r0, r6
 800502a:	4639      	mov	r1, r7
 800502c:	beab      	bkpt	0x00ab
 800502e:	4606      	mov	r6, r0
 8005030:	602e      	str	r6, [r5, #0]
 8005032:	682b      	ldr	r3, [r5, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	bf02      	ittt	eq
 8005038:	4b0c      	ldreq	r3, [pc, #48]	@ (800506c <initialise_monitor_handles+0xb4>)
 800503a:	681b      	ldreq	r3, [r3, #0]
 800503c:	602b      	streq	r3, [r5, #0]
 800503e:	2600      	movs	r6, #0
 8005040:	f8d8 3000 	ldr.w	r3, [r8]
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	6066      	str	r6, [r4, #4]
 8005048:	f7ff ffaa 	bl	8004fa0 <_has_ext_stdout_stderr>
 800504c:	b130      	cbz	r0, 800505c <initialise_monitor_handles+0xa4>
 800504e:	4b07      	ldr	r3, [pc, #28]	@ (800506c <initialise_monitor_handles+0xb4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005056:	682b      	ldr	r3, [r5, #0]
 8005058:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800505c:	b005      	add	sp, #20
 800505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	2000418c 	.word	0x2000418c
 8005068:	20004180 	.word	0x20004180
 800506c:	20004184 	.word	0x20004184
 8005070:	080064be 	.word	0x080064be
 8005074:	20004188 	.word	0x20004188

08005078 <_isatty>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	f7ff fd7f 	bl	8004b7c <findslot>
 800507e:	2409      	movs	r4, #9
 8005080:	4605      	mov	r5, r0
 8005082:	b920      	cbnz	r0, 800508e <_isatty+0x16>
 8005084:	f000 fa72 	bl	800556c <__errno>
 8005088:	6004      	str	r4, [r0, #0]
 800508a:	2000      	movs	r0, #0
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	4620      	mov	r0, r4
 8005090:	4629      	mov	r1, r5
 8005092:	beab      	bkpt	0x00ab
 8005094:	4604      	mov	r4, r0
 8005096:	2c01      	cmp	r4, #1
 8005098:	4620      	mov	r0, r4
 800509a:	d0f7      	beq.n	800508c <_isatty+0x14>
 800509c:	f000 fa66 	bl	800556c <__errno>
 80050a0:	2513      	movs	r5, #19
 80050a2:	4604      	mov	r4, r0
 80050a4:	2600      	movs	r6, #0
 80050a6:	4628      	mov	r0, r5
 80050a8:	4631      	mov	r1, r6
 80050aa:	beab      	bkpt	0x00ab
 80050ac:	4605      	mov	r5, r0
 80050ae:	6025      	str	r5, [r4, #0]
 80050b0:	e7eb      	b.n	800508a <_isatty+0x12>
	...

080050b4 <__sflush_r>:
 80050b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050bc:	0716      	lsls	r6, r2, #28
 80050be:	4605      	mov	r5, r0
 80050c0:	460c      	mov	r4, r1
 80050c2:	d454      	bmi.n	800516e <__sflush_r+0xba>
 80050c4:	684b      	ldr	r3, [r1, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	dc02      	bgt.n	80050d0 <__sflush_r+0x1c>
 80050ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dd48      	ble.n	8005162 <__sflush_r+0xae>
 80050d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050d2:	2e00      	cmp	r6, #0
 80050d4:	d045      	beq.n	8005162 <__sflush_r+0xae>
 80050d6:	2300      	movs	r3, #0
 80050d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050dc:	682f      	ldr	r7, [r5, #0]
 80050de:	6a21      	ldr	r1, [r4, #32]
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	d030      	beq.n	8005146 <__sflush_r+0x92>
 80050e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	0759      	lsls	r1, r3, #29
 80050ea:	d505      	bpl.n	80050f8 <__sflush_r+0x44>
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050f2:	b10b      	cbz	r3, 80050f8 <__sflush_r+0x44>
 80050f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050fc:	6a21      	ldr	r1, [r4, #32]
 80050fe:	4628      	mov	r0, r5
 8005100:	47b0      	blx	r6
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	d106      	bne.n	8005116 <__sflush_r+0x62>
 8005108:	6829      	ldr	r1, [r5, #0]
 800510a:	291d      	cmp	r1, #29
 800510c:	d82b      	bhi.n	8005166 <__sflush_r+0xb2>
 800510e:	4a2a      	ldr	r2, [pc, #168]	@ (80051b8 <__sflush_r+0x104>)
 8005110:	40ca      	lsrs	r2, r1
 8005112:	07d6      	lsls	r6, r2, #31
 8005114:	d527      	bpl.n	8005166 <__sflush_r+0xb2>
 8005116:	2200      	movs	r2, #0
 8005118:	6062      	str	r2, [r4, #4]
 800511a:	04d9      	lsls	r1, r3, #19
 800511c:	6922      	ldr	r2, [r4, #16]
 800511e:	6022      	str	r2, [r4, #0]
 8005120:	d504      	bpl.n	800512c <__sflush_r+0x78>
 8005122:	1c42      	adds	r2, r0, #1
 8005124:	d101      	bne.n	800512a <__sflush_r+0x76>
 8005126:	682b      	ldr	r3, [r5, #0]
 8005128:	b903      	cbnz	r3, 800512c <__sflush_r+0x78>
 800512a:	6560      	str	r0, [r4, #84]	@ 0x54
 800512c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800512e:	602f      	str	r7, [r5, #0]
 8005130:	b1b9      	cbz	r1, 8005162 <__sflush_r+0xae>
 8005132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005136:	4299      	cmp	r1, r3
 8005138:	d002      	beq.n	8005140 <__sflush_r+0x8c>
 800513a:	4628      	mov	r0, r5
 800513c:	f000 fa52 	bl	80055e4 <_free_r>
 8005140:	2300      	movs	r3, #0
 8005142:	6363      	str	r3, [r4, #52]	@ 0x34
 8005144:	e00d      	b.n	8005162 <__sflush_r+0xae>
 8005146:	2301      	movs	r3, #1
 8005148:	4628      	mov	r0, r5
 800514a:	47b0      	blx	r6
 800514c:	4602      	mov	r2, r0
 800514e:	1c50      	adds	r0, r2, #1
 8005150:	d1c9      	bne.n	80050e6 <__sflush_r+0x32>
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0c6      	beq.n	80050e6 <__sflush_r+0x32>
 8005158:	2b1d      	cmp	r3, #29
 800515a:	d001      	beq.n	8005160 <__sflush_r+0xac>
 800515c:	2b16      	cmp	r3, #22
 800515e:	d11e      	bne.n	800519e <__sflush_r+0xea>
 8005160:	602f      	str	r7, [r5, #0]
 8005162:	2000      	movs	r0, #0
 8005164:	e022      	b.n	80051ac <__sflush_r+0xf8>
 8005166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800516a:	b21b      	sxth	r3, r3
 800516c:	e01b      	b.n	80051a6 <__sflush_r+0xf2>
 800516e:	690f      	ldr	r7, [r1, #16]
 8005170:	2f00      	cmp	r7, #0
 8005172:	d0f6      	beq.n	8005162 <__sflush_r+0xae>
 8005174:	0793      	lsls	r3, r2, #30
 8005176:	680e      	ldr	r6, [r1, #0]
 8005178:	bf08      	it	eq
 800517a:	694b      	ldreq	r3, [r1, #20]
 800517c:	600f      	str	r7, [r1, #0]
 800517e:	bf18      	it	ne
 8005180:	2300      	movne	r3, #0
 8005182:	eba6 0807 	sub.w	r8, r6, r7
 8005186:	608b      	str	r3, [r1, #8]
 8005188:	f1b8 0f00 	cmp.w	r8, #0
 800518c:	dde9      	ble.n	8005162 <__sflush_r+0xae>
 800518e:	6a21      	ldr	r1, [r4, #32]
 8005190:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005192:	4643      	mov	r3, r8
 8005194:	463a      	mov	r2, r7
 8005196:	4628      	mov	r0, r5
 8005198:	47b0      	blx	r6
 800519a:	2800      	cmp	r0, #0
 800519c:	dc08      	bgt.n	80051b0 <__sflush_r+0xfc>
 800519e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b0:	4407      	add	r7, r0
 80051b2:	eba8 0800 	sub.w	r8, r8, r0
 80051b6:	e7e7      	b.n	8005188 <__sflush_r+0xd4>
 80051b8:	20400001 	.word	0x20400001

080051bc <_fflush_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	690b      	ldr	r3, [r1, #16]
 80051c0:	4605      	mov	r5, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	b913      	cbnz	r3, 80051cc <_fflush_r+0x10>
 80051c6:	2500      	movs	r5, #0
 80051c8:	4628      	mov	r0, r5
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	b118      	cbz	r0, 80051d6 <_fflush_r+0x1a>
 80051ce:	6a03      	ldr	r3, [r0, #32]
 80051d0:	b90b      	cbnz	r3, 80051d6 <_fflush_r+0x1a>
 80051d2:	f000 f8bb 	bl	800534c <__sinit>
 80051d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f3      	beq.n	80051c6 <_fflush_r+0xa>
 80051de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051e0:	07d0      	lsls	r0, r2, #31
 80051e2:	d404      	bmi.n	80051ee <_fflush_r+0x32>
 80051e4:	0599      	lsls	r1, r3, #22
 80051e6:	d402      	bmi.n	80051ee <_fflush_r+0x32>
 80051e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ea:	f000 f9ea 	bl	80055c2 <__retarget_lock_acquire_recursive>
 80051ee:	4628      	mov	r0, r5
 80051f0:	4621      	mov	r1, r4
 80051f2:	f7ff ff5f 	bl	80050b4 <__sflush_r>
 80051f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051f8:	07da      	lsls	r2, r3, #31
 80051fa:	4605      	mov	r5, r0
 80051fc:	d4e4      	bmi.n	80051c8 <_fflush_r+0xc>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	059b      	lsls	r3, r3, #22
 8005202:	d4e1      	bmi.n	80051c8 <_fflush_r+0xc>
 8005204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005206:	f000 f9dd 	bl	80055c4 <__retarget_lock_release_recursive>
 800520a:	e7dd      	b.n	80051c8 <_fflush_r+0xc>

0800520c <fflush>:
 800520c:	4601      	mov	r1, r0
 800520e:	b920      	cbnz	r0, 800521a <fflush+0xe>
 8005210:	4a04      	ldr	r2, [pc, #16]	@ (8005224 <fflush+0x18>)
 8005212:	4905      	ldr	r1, [pc, #20]	@ (8005228 <fflush+0x1c>)
 8005214:	4805      	ldr	r0, [pc, #20]	@ (800522c <fflush+0x20>)
 8005216:	f000 b8b1 	b.w	800537c <_fwalk_sglue>
 800521a:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <fflush+0x24>)
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	f7ff bfcd 	b.w	80051bc <_fflush_r>
 8005222:	bf00      	nop
 8005224:	20000028 	.word	0x20000028
 8005228:	080051bd 	.word	0x080051bd
 800522c:	20000038 	.word	0x20000038
 8005230:	20000034 	.word	0x20000034

08005234 <std>:
 8005234:	2300      	movs	r3, #0
 8005236:	b510      	push	{r4, lr}
 8005238:	4604      	mov	r4, r0
 800523a:	e9c0 3300 	strd	r3, r3, [r0]
 800523e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005242:	6083      	str	r3, [r0, #8]
 8005244:	8181      	strh	r1, [r0, #12]
 8005246:	6643      	str	r3, [r0, #100]	@ 0x64
 8005248:	81c2      	strh	r2, [r0, #14]
 800524a:	6183      	str	r3, [r0, #24]
 800524c:	4619      	mov	r1, r3
 800524e:	2208      	movs	r2, #8
 8005250:	305c      	adds	r0, #92	@ 0x5c
 8005252:	f000 f93c 	bl	80054ce <memset>
 8005256:	4b0d      	ldr	r3, [pc, #52]	@ (800528c <std+0x58>)
 8005258:	6263      	str	r3, [r4, #36]	@ 0x24
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <std+0x5c>)
 800525c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800525e:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <std+0x60>)
 8005260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <std+0x64>)
 8005264:	6323      	str	r3, [r4, #48]	@ 0x30
 8005266:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <std+0x68>)
 8005268:	6224      	str	r4, [r4, #32]
 800526a:	429c      	cmp	r4, r3
 800526c:	d006      	beq.n	800527c <std+0x48>
 800526e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005272:	4294      	cmp	r4, r2
 8005274:	d002      	beq.n	800527c <std+0x48>
 8005276:	33d0      	adds	r3, #208	@ 0xd0
 8005278:	429c      	cmp	r4, r3
 800527a:	d105      	bne.n	8005288 <std+0x54>
 800527c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005284:	f000 b99c 	b.w	80055c0 <__retarget_lock_init_recursive>
 8005288:	bd10      	pop	{r4, pc}
 800528a:	bf00      	nop
 800528c:	08005449 	.word	0x08005449
 8005290:	0800546b 	.word	0x0800546b
 8005294:	080054a3 	.word	0x080054a3
 8005298:	080054c7 	.word	0x080054c7
 800529c:	2000422c 	.word	0x2000422c

080052a0 <stdio_exit_handler>:
 80052a0:	4a02      	ldr	r2, [pc, #8]	@ (80052ac <stdio_exit_handler+0xc>)
 80052a2:	4903      	ldr	r1, [pc, #12]	@ (80052b0 <stdio_exit_handler+0x10>)
 80052a4:	4803      	ldr	r0, [pc, #12]	@ (80052b4 <stdio_exit_handler+0x14>)
 80052a6:	f000 b869 	b.w	800537c <_fwalk_sglue>
 80052aa:	bf00      	nop
 80052ac:	20000028 	.word	0x20000028
 80052b0:	080051bd 	.word	0x080051bd
 80052b4:	20000038 	.word	0x20000038

080052b8 <cleanup_stdio>:
 80052b8:	6841      	ldr	r1, [r0, #4]
 80052ba:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <cleanup_stdio+0x34>)
 80052bc:	4299      	cmp	r1, r3
 80052be:	b510      	push	{r4, lr}
 80052c0:	4604      	mov	r4, r0
 80052c2:	d001      	beq.n	80052c8 <cleanup_stdio+0x10>
 80052c4:	f7ff ff7a 	bl	80051bc <_fflush_r>
 80052c8:	68a1      	ldr	r1, [r4, #8]
 80052ca:	4b09      	ldr	r3, [pc, #36]	@ (80052f0 <cleanup_stdio+0x38>)
 80052cc:	4299      	cmp	r1, r3
 80052ce:	d002      	beq.n	80052d6 <cleanup_stdio+0x1e>
 80052d0:	4620      	mov	r0, r4
 80052d2:	f7ff ff73 	bl	80051bc <_fflush_r>
 80052d6:	68e1      	ldr	r1, [r4, #12]
 80052d8:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <cleanup_stdio+0x3c>)
 80052da:	4299      	cmp	r1, r3
 80052dc:	d004      	beq.n	80052e8 <cleanup_stdio+0x30>
 80052de:	4620      	mov	r0, r4
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f7ff bf6a 	b.w	80051bc <_fflush_r>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	2000422c 	.word	0x2000422c
 80052f0:	20004294 	.word	0x20004294
 80052f4:	200042fc 	.word	0x200042fc

080052f8 <global_stdio_init.part.0>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <global_stdio_init.part.0+0x30>)
 80052fc:	4c0b      	ldr	r4, [pc, #44]	@ (800532c <global_stdio_init.part.0+0x34>)
 80052fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005330 <global_stdio_init.part.0+0x38>)
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	4620      	mov	r0, r4
 8005304:	2200      	movs	r2, #0
 8005306:	2104      	movs	r1, #4
 8005308:	f7ff ff94 	bl	8005234 <std>
 800530c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005310:	2201      	movs	r2, #1
 8005312:	2109      	movs	r1, #9
 8005314:	f7ff ff8e 	bl	8005234 <std>
 8005318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800531c:	2202      	movs	r2, #2
 800531e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005322:	2112      	movs	r1, #18
 8005324:	f7ff bf86 	b.w	8005234 <std>
 8005328:	20004364 	.word	0x20004364
 800532c:	2000422c 	.word	0x2000422c
 8005330:	080052a1 	.word	0x080052a1

08005334 <__sfp_lock_acquire>:
 8005334:	4801      	ldr	r0, [pc, #4]	@ (800533c <__sfp_lock_acquire+0x8>)
 8005336:	f000 b944 	b.w	80055c2 <__retarget_lock_acquire_recursive>
 800533a:	bf00      	nop
 800533c:	2000436d 	.word	0x2000436d

08005340 <__sfp_lock_release>:
 8005340:	4801      	ldr	r0, [pc, #4]	@ (8005348 <__sfp_lock_release+0x8>)
 8005342:	f000 b93f 	b.w	80055c4 <__retarget_lock_release_recursive>
 8005346:	bf00      	nop
 8005348:	2000436d 	.word	0x2000436d

0800534c <__sinit>:
 800534c:	b510      	push	{r4, lr}
 800534e:	4604      	mov	r4, r0
 8005350:	f7ff fff0 	bl	8005334 <__sfp_lock_acquire>
 8005354:	6a23      	ldr	r3, [r4, #32]
 8005356:	b11b      	cbz	r3, 8005360 <__sinit+0x14>
 8005358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800535c:	f7ff bff0 	b.w	8005340 <__sfp_lock_release>
 8005360:	4b04      	ldr	r3, [pc, #16]	@ (8005374 <__sinit+0x28>)
 8005362:	6223      	str	r3, [r4, #32]
 8005364:	4b04      	ldr	r3, [pc, #16]	@ (8005378 <__sinit+0x2c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f5      	bne.n	8005358 <__sinit+0xc>
 800536c:	f7ff ffc4 	bl	80052f8 <global_stdio_init.part.0>
 8005370:	e7f2      	b.n	8005358 <__sinit+0xc>
 8005372:	bf00      	nop
 8005374:	080052b9 	.word	0x080052b9
 8005378:	20004364 	.word	0x20004364

0800537c <_fwalk_sglue>:
 800537c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005380:	4607      	mov	r7, r0
 8005382:	4688      	mov	r8, r1
 8005384:	4614      	mov	r4, r2
 8005386:	2600      	movs	r6, #0
 8005388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800538c:	f1b9 0901 	subs.w	r9, r9, #1
 8005390:	d505      	bpl.n	800539e <_fwalk_sglue+0x22>
 8005392:	6824      	ldr	r4, [r4, #0]
 8005394:	2c00      	cmp	r4, #0
 8005396:	d1f7      	bne.n	8005388 <_fwalk_sglue+0xc>
 8005398:	4630      	mov	r0, r6
 800539a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800539e:	89ab      	ldrh	r3, [r5, #12]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d907      	bls.n	80053b4 <_fwalk_sglue+0x38>
 80053a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053a8:	3301      	adds	r3, #1
 80053aa:	d003      	beq.n	80053b4 <_fwalk_sglue+0x38>
 80053ac:	4629      	mov	r1, r5
 80053ae:	4638      	mov	r0, r7
 80053b0:	47c0      	blx	r8
 80053b2:	4306      	orrs	r6, r0
 80053b4:	3568      	adds	r5, #104	@ 0x68
 80053b6:	e7e9      	b.n	800538c <_fwalk_sglue+0x10>

080053b8 <iprintf>:
 80053b8:	b40f      	push	{r0, r1, r2, r3}
 80053ba:	b507      	push	{r0, r1, r2, lr}
 80053bc:	4906      	ldr	r1, [pc, #24]	@ (80053d8 <iprintf+0x20>)
 80053be:	ab04      	add	r3, sp, #16
 80053c0:	6808      	ldr	r0, [r1, #0]
 80053c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c6:	6881      	ldr	r1, [r0, #8]
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	f000 fb85 	bl	8005ad8 <_vfiprintf_r>
 80053ce:	b003      	add	sp, #12
 80053d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d4:	b004      	add	sp, #16
 80053d6:	4770      	bx	lr
 80053d8:	20000034 	.word	0x20000034

080053dc <sniprintf>:
 80053dc:	b40c      	push	{r2, r3}
 80053de:	b530      	push	{r4, r5, lr}
 80053e0:	4b18      	ldr	r3, [pc, #96]	@ (8005444 <sniprintf+0x68>)
 80053e2:	1e0c      	subs	r4, r1, #0
 80053e4:	681d      	ldr	r5, [r3, #0]
 80053e6:	b09d      	sub	sp, #116	@ 0x74
 80053e8:	da08      	bge.n	80053fc <sniprintf+0x20>
 80053ea:	238b      	movs	r3, #139	@ 0x8b
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053f2:	b01d      	add	sp, #116	@ 0x74
 80053f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053f8:	b002      	add	sp, #8
 80053fa:	4770      	bx	lr
 80053fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005400:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	931b      	str	r3, [sp, #108]	@ 0x6c
 800540a:	bf14      	ite	ne
 800540c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005410:	4623      	moveq	r3, r4
 8005412:	9304      	str	r3, [sp, #16]
 8005414:	9307      	str	r3, [sp, #28]
 8005416:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800541a:	9002      	str	r0, [sp, #8]
 800541c:	9006      	str	r0, [sp, #24]
 800541e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005422:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005424:	ab21      	add	r3, sp, #132	@ 0x84
 8005426:	a902      	add	r1, sp, #8
 8005428:	4628      	mov	r0, r5
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	f000 fa2e 	bl	800588c <_svfiprintf_r>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	bfbc      	itt	lt
 8005434:	238b      	movlt	r3, #139	@ 0x8b
 8005436:	602b      	strlt	r3, [r5, #0]
 8005438:	2c00      	cmp	r4, #0
 800543a:	d0da      	beq.n	80053f2 <sniprintf+0x16>
 800543c:	9b02      	ldr	r3, [sp, #8]
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	e7d6      	b.n	80053f2 <sniprintf+0x16>
 8005444:	20000034 	.word	0x20000034

08005448 <__sread>:
 8005448:	b510      	push	{r4, lr}
 800544a:	460c      	mov	r4, r1
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f868 	bl	8005524 <_read_r>
 8005454:	2800      	cmp	r0, #0
 8005456:	bfab      	itete	ge
 8005458:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800545a:	89a3      	ldrhlt	r3, [r4, #12]
 800545c:	181b      	addge	r3, r3, r0
 800545e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005462:	bfac      	ite	ge
 8005464:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005466:	81a3      	strhlt	r3, [r4, #12]
 8005468:	bd10      	pop	{r4, pc}

0800546a <__swrite>:
 800546a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546e:	461f      	mov	r7, r3
 8005470:	898b      	ldrh	r3, [r1, #12]
 8005472:	05db      	lsls	r3, r3, #23
 8005474:	4605      	mov	r5, r0
 8005476:	460c      	mov	r4, r1
 8005478:	4616      	mov	r6, r2
 800547a:	d505      	bpl.n	8005488 <__swrite+0x1e>
 800547c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005480:	2302      	movs	r3, #2
 8005482:	2200      	movs	r2, #0
 8005484:	f000 f83c 	bl	8005500 <_lseek_r>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800548e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	4632      	mov	r2, r6
 8005496:	463b      	mov	r3, r7
 8005498:	4628      	mov	r0, r5
 800549a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800549e:	f000 b853 	b.w	8005548 <_write_r>

080054a2 <__sseek>:
 80054a2:	b510      	push	{r4, lr}
 80054a4:	460c      	mov	r4, r1
 80054a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054aa:	f000 f829 	bl	8005500 <_lseek_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	bf15      	itete	ne
 80054b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054be:	81a3      	strheq	r3, [r4, #12]
 80054c0:	bf18      	it	ne
 80054c2:	81a3      	strhne	r3, [r4, #12]
 80054c4:	bd10      	pop	{r4, pc}

080054c6 <__sclose>:
 80054c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ca:	f000 b809 	b.w	80054e0 <_close_r>

080054ce <memset>:
 80054ce:	4402      	add	r2, r0
 80054d0:	4603      	mov	r3, r0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d100      	bne.n	80054d8 <memset+0xa>
 80054d6:	4770      	bx	lr
 80054d8:	f803 1b01 	strb.w	r1, [r3], #1
 80054dc:	e7f9      	b.n	80054d2 <memset+0x4>
	...

080054e0 <_close_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d06      	ldr	r5, [pc, #24]	@ (80054fc <_close_r+0x1c>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	f7ff fc18 	bl	8004d20 <_close>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_close_r+0x1a>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_close_r+0x1a>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	20004368 	.word	0x20004368

08005500 <_lseek_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	@ (8005520 <_lseek_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7ff fbc7 	bl	8004ca2 <_lseek>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_lseek_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_lseek_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20004368 	.word	0x20004368

08005524 <_read_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d07      	ldr	r5, [pc, #28]	@ (8005544 <_read_r+0x20>)
 8005528:	4604      	mov	r4, r0
 800552a:	4608      	mov	r0, r1
 800552c:	4611      	mov	r1, r2
 800552e:	2200      	movs	r2, #0
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7ff fb5f 	bl	8004bf6 <_read>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_read_r+0x1e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_read_r+0x1e>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20004368 	.word	0x20004368

08005548 <_write_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4d07      	ldr	r5, [pc, #28]	@ (8005568 <_write_r+0x20>)
 800554c:	4604      	mov	r4, r0
 800554e:	4608      	mov	r0, r1
 8005550:	4611      	mov	r1, r2
 8005552:	2200      	movs	r2, #0
 8005554:	602a      	str	r2, [r5, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f7ff fbb5 	bl	8004cc6 <_write>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_write_r+0x1e>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_write_r+0x1e>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20004368 	.word	0x20004368

0800556c <__errno>:
 800556c:	4b01      	ldr	r3, [pc, #4]	@ (8005574 <__errno+0x8>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000034 	.word	0x20000034

08005578 <__libc_init_array>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4d0d      	ldr	r5, [pc, #52]	@ (80055b0 <__libc_init_array+0x38>)
 800557c:	4c0d      	ldr	r4, [pc, #52]	@ (80055b4 <__libc_init_array+0x3c>)
 800557e:	1b64      	subs	r4, r4, r5
 8005580:	10a4      	asrs	r4, r4, #2
 8005582:	2600      	movs	r6, #0
 8005584:	42a6      	cmp	r6, r4
 8005586:	d109      	bne.n	800559c <__libc_init_array+0x24>
 8005588:	4d0b      	ldr	r5, [pc, #44]	@ (80055b8 <__libc_init_array+0x40>)
 800558a:	4c0c      	ldr	r4, [pc, #48]	@ (80055bc <__libc_init_array+0x44>)
 800558c:	f000 fec0 	bl	8006310 <_init>
 8005590:	1b64      	subs	r4, r4, r5
 8005592:	10a4      	asrs	r4, r4, #2
 8005594:	2600      	movs	r6, #0
 8005596:	42a6      	cmp	r6, r4
 8005598:	d105      	bne.n	80055a6 <__libc_init_array+0x2e>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a0:	4798      	blx	r3
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7ee      	b.n	8005584 <__libc_init_array+0xc>
 80055a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055aa:	4798      	blx	r3
 80055ac:	3601      	adds	r6, #1
 80055ae:	e7f2      	b.n	8005596 <__libc_init_array+0x1e>
 80055b0:	08006500 	.word	0x08006500
 80055b4:	08006500 	.word	0x08006500
 80055b8:	08006500 	.word	0x08006500
 80055bc:	08006504 	.word	0x08006504

080055c0 <__retarget_lock_init_recursive>:
 80055c0:	4770      	bx	lr

080055c2 <__retarget_lock_acquire_recursive>:
 80055c2:	4770      	bx	lr

080055c4 <__retarget_lock_release_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <memcpy>:
 80055c6:	440a      	add	r2, r1
 80055c8:	4291      	cmp	r1, r2
 80055ca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055ce:	d100      	bne.n	80055d2 <memcpy+0xc>
 80055d0:	4770      	bx	lr
 80055d2:	b510      	push	{r4, lr}
 80055d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055dc:	4291      	cmp	r1, r2
 80055de:	d1f9      	bne.n	80055d4 <memcpy+0xe>
 80055e0:	bd10      	pop	{r4, pc}
	...

080055e4 <_free_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4605      	mov	r5, r0
 80055e8:	2900      	cmp	r1, #0
 80055ea:	d041      	beq.n	8005670 <_free_r+0x8c>
 80055ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f0:	1f0c      	subs	r4, r1, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bfb8      	it	lt
 80055f6:	18e4      	addlt	r4, r4, r3
 80055f8:	f000 f8e0 	bl	80057bc <__malloc_lock>
 80055fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005674 <_free_r+0x90>)
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	b933      	cbnz	r3, 8005610 <_free_r+0x2c>
 8005602:	6063      	str	r3, [r4, #4]
 8005604:	6014      	str	r4, [r2, #0]
 8005606:	4628      	mov	r0, r5
 8005608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800560c:	f000 b8dc 	b.w	80057c8 <__malloc_unlock>
 8005610:	42a3      	cmp	r3, r4
 8005612:	d908      	bls.n	8005626 <_free_r+0x42>
 8005614:	6820      	ldr	r0, [r4, #0]
 8005616:	1821      	adds	r1, r4, r0
 8005618:	428b      	cmp	r3, r1
 800561a:	bf01      	itttt	eq
 800561c:	6819      	ldreq	r1, [r3, #0]
 800561e:	685b      	ldreq	r3, [r3, #4]
 8005620:	1809      	addeq	r1, r1, r0
 8005622:	6021      	streq	r1, [r4, #0]
 8005624:	e7ed      	b.n	8005602 <_free_r+0x1e>
 8005626:	461a      	mov	r2, r3
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b10b      	cbz	r3, 8005630 <_free_r+0x4c>
 800562c:	42a3      	cmp	r3, r4
 800562e:	d9fa      	bls.n	8005626 <_free_r+0x42>
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	1850      	adds	r0, r2, r1
 8005634:	42a0      	cmp	r0, r4
 8005636:	d10b      	bne.n	8005650 <_free_r+0x6c>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	4401      	add	r1, r0
 800563c:	1850      	adds	r0, r2, r1
 800563e:	4283      	cmp	r3, r0
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	d1e0      	bne.n	8005606 <_free_r+0x22>
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	6053      	str	r3, [r2, #4]
 800564a:	4408      	add	r0, r1
 800564c:	6010      	str	r0, [r2, #0]
 800564e:	e7da      	b.n	8005606 <_free_r+0x22>
 8005650:	d902      	bls.n	8005658 <_free_r+0x74>
 8005652:	230c      	movs	r3, #12
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	e7d6      	b.n	8005606 <_free_r+0x22>
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	1821      	adds	r1, r4, r0
 800565c:	428b      	cmp	r3, r1
 800565e:	bf04      	itt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	6063      	str	r3, [r4, #4]
 8005666:	bf04      	itt	eq
 8005668:	1809      	addeq	r1, r1, r0
 800566a:	6021      	streq	r1, [r4, #0]
 800566c:	6054      	str	r4, [r2, #4]
 800566e:	e7ca      	b.n	8005606 <_free_r+0x22>
 8005670:	bd38      	pop	{r3, r4, r5, pc}
 8005672:	bf00      	nop
 8005674:	20004374 	.word	0x20004374

08005678 <sbrk_aligned>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4e0f      	ldr	r6, [pc, #60]	@ (80056b8 <sbrk_aligned+0x40>)
 800567c:	460c      	mov	r4, r1
 800567e:	6831      	ldr	r1, [r6, #0]
 8005680:	4605      	mov	r5, r0
 8005682:	b911      	cbnz	r1, 800568a <sbrk_aligned+0x12>
 8005684:	f000 fd7a 	bl	800617c <_sbrk_r>
 8005688:	6030      	str	r0, [r6, #0]
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	f000 fd75 	bl	800617c <_sbrk_r>
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	d103      	bne.n	800569e <sbrk_aligned+0x26>
 8005696:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800569a:	4620      	mov	r0, r4
 800569c:	bd70      	pop	{r4, r5, r6, pc}
 800569e:	1cc4      	adds	r4, r0, #3
 80056a0:	f024 0403 	bic.w	r4, r4, #3
 80056a4:	42a0      	cmp	r0, r4
 80056a6:	d0f8      	beq.n	800569a <sbrk_aligned+0x22>
 80056a8:	1a21      	subs	r1, r4, r0
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 fd66 	bl	800617c <_sbrk_r>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d1f2      	bne.n	800569a <sbrk_aligned+0x22>
 80056b4:	e7ef      	b.n	8005696 <sbrk_aligned+0x1e>
 80056b6:	bf00      	nop
 80056b8:	20004370 	.word	0x20004370

080056bc <_malloc_r>:
 80056bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c0:	1ccd      	adds	r5, r1, #3
 80056c2:	f025 0503 	bic.w	r5, r5, #3
 80056c6:	3508      	adds	r5, #8
 80056c8:	2d0c      	cmp	r5, #12
 80056ca:	bf38      	it	cc
 80056cc:	250c      	movcc	r5, #12
 80056ce:	2d00      	cmp	r5, #0
 80056d0:	4606      	mov	r6, r0
 80056d2:	db01      	blt.n	80056d8 <_malloc_r+0x1c>
 80056d4:	42a9      	cmp	r1, r5
 80056d6:	d904      	bls.n	80056e2 <_malloc_r+0x26>
 80056d8:	230c      	movs	r3, #12
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	2000      	movs	r0, #0
 80056de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057b8 <_malloc_r+0xfc>
 80056e6:	f000 f869 	bl	80057bc <__malloc_lock>
 80056ea:	f8d8 3000 	ldr.w	r3, [r8]
 80056ee:	461c      	mov	r4, r3
 80056f0:	bb44      	cbnz	r4, 8005744 <_malloc_r+0x88>
 80056f2:	4629      	mov	r1, r5
 80056f4:	4630      	mov	r0, r6
 80056f6:	f7ff ffbf 	bl	8005678 <sbrk_aligned>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	4604      	mov	r4, r0
 80056fe:	d158      	bne.n	80057b2 <_malloc_r+0xf6>
 8005700:	f8d8 4000 	ldr.w	r4, [r8]
 8005704:	4627      	mov	r7, r4
 8005706:	2f00      	cmp	r7, #0
 8005708:	d143      	bne.n	8005792 <_malloc_r+0xd6>
 800570a:	2c00      	cmp	r4, #0
 800570c:	d04b      	beq.n	80057a6 <_malloc_r+0xea>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	4639      	mov	r1, r7
 8005712:	4630      	mov	r0, r6
 8005714:	eb04 0903 	add.w	r9, r4, r3
 8005718:	f000 fd30 	bl	800617c <_sbrk_r>
 800571c:	4581      	cmp	r9, r0
 800571e:	d142      	bne.n	80057a6 <_malloc_r+0xea>
 8005720:	6821      	ldr	r1, [r4, #0]
 8005722:	1a6d      	subs	r5, r5, r1
 8005724:	4629      	mov	r1, r5
 8005726:	4630      	mov	r0, r6
 8005728:	f7ff ffa6 	bl	8005678 <sbrk_aligned>
 800572c:	3001      	adds	r0, #1
 800572e:	d03a      	beq.n	80057a6 <_malloc_r+0xea>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	442b      	add	r3, r5
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	f8d8 3000 	ldr.w	r3, [r8]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	bb62      	cbnz	r2, 8005798 <_malloc_r+0xdc>
 800573e:	f8c8 7000 	str.w	r7, [r8]
 8005742:	e00f      	b.n	8005764 <_malloc_r+0xa8>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	1b52      	subs	r2, r2, r5
 8005748:	d420      	bmi.n	800578c <_malloc_r+0xd0>
 800574a:	2a0b      	cmp	r2, #11
 800574c:	d917      	bls.n	800577e <_malloc_r+0xc2>
 800574e:	1961      	adds	r1, r4, r5
 8005750:	42a3      	cmp	r3, r4
 8005752:	6025      	str	r5, [r4, #0]
 8005754:	bf18      	it	ne
 8005756:	6059      	strne	r1, [r3, #4]
 8005758:	6863      	ldr	r3, [r4, #4]
 800575a:	bf08      	it	eq
 800575c:	f8c8 1000 	streq.w	r1, [r8]
 8005760:	5162      	str	r2, [r4, r5]
 8005762:	604b      	str	r3, [r1, #4]
 8005764:	4630      	mov	r0, r6
 8005766:	f000 f82f 	bl	80057c8 <__malloc_unlock>
 800576a:	f104 000b 	add.w	r0, r4, #11
 800576e:	1d23      	adds	r3, r4, #4
 8005770:	f020 0007 	bic.w	r0, r0, #7
 8005774:	1ac2      	subs	r2, r0, r3
 8005776:	bf1c      	itt	ne
 8005778:	1a1b      	subne	r3, r3, r0
 800577a:	50a3      	strne	r3, [r4, r2]
 800577c:	e7af      	b.n	80056de <_malloc_r+0x22>
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	42a3      	cmp	r3, r4
 8005782:	bf0c      	ite	eq
 8005784:	f8c8 2000 	streq.w	r2, [r8]
 8005788:	605a      	strne	r2, [r3, #4]
 800578a:	e7eb      	b.n	8005764 <_malloc_r+0xa8>
 800578c:	4623      	mov	r3, r4
 800578e:	6864      	ldr	r4, [r4, #4]
 8005790:	e7ae      	b.n	80056f0 <_malloc_r+0x34>
 8005792:	463c      	mov	r4, r7
 8005794:	687f      	ldr	r7, [r7, #4]
 8005796:	e7b6      	b.n	8005706 <_malloc_r+0x4a>
 8005798:	461a      	mov	r2, r3
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	42a3      	cmp	r3, r4
 800579e:	d1fb      	bne.n	8005798 <_malloc_r+0xdc>
 80057a0:	2300      	movs	r3, #0
 80057a2:	6053      	str	r3, [r2, #4]
 80057a4:	e7de      	b.n	8005764 <_malloc_r+0xa8>
 80057a6:	230c      	movs	r3, #12
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	4630      	mov	r0, r6
 80057ac:	f000 f80c 	bl	80057c8 <__malloc_unlock>
 80057b0:	e794      	b.n	80056dc <_malloc_r+0x20>
 80057b2:	6005      	str	r5, [r0, #0]
 80057b4:	e7d6      	b.n	8005764 <_malloc_r+0xa8>
 80057b6:	bf00      	nop
 80057b8:	20004374 	.word	0x20004374

080057bc <__malloc_lock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	@ (80057c4 <__malloc_lock+0x8>)
 80057be:	f7ff bf00 	b.w	80055c2 <__retarget_lock_acquire_recursive>
 80057c2:	bf00      	nop
 80057c4:	2000436c 	.word	0x2000436c

080057c8 <__malloc_unlock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	@ (80057d0 <__malloc_unlock+0x8>)
 80057ca:	f7ff befb 	b.w	80055c4 <__retarget_lock_release_recursive>
 80057ce:	bf00      	nop
 80057d0:	2000436c 	.word	0x2000436c

080057d4 <__ssputs_r>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	688e      	ldr	r6, [r1, #8]
 80057da:	461f      	mov	r7, r3
 80057dc:	42be      	cmp	r6, r7
 80057de:	680b      	ldr	r3, [r1, #0]
 80057e0:	4682      	mov	sl, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4690      	mov	r8, r2
 80057e6:	d82d      	bhi.n	8005844 <__ssputs_r+0x70>
 80057e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057f0:	d026      	beq.n	8005840 <__ssputs_r+0x6c>
 80057f2:	6965      	ldr	r5, [r4, #20]
 80057f4:	6909      	ldr	r1, [r1, #16]
 80057f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057fa:	eba3 0901 	sub.w	r9, r3, r1
 80057fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005802:	1c7b      	adds	r3, r7, #1
 8005804:	444b      	add	r3, r9
 8005806:	106d      	asrs	r5, r5, #1
 8005808:	429d      	cmp	r5, r3
 800580a:	bf38      	it	cc
 800580c:	461d      	movcc	r5, r3
 800580e:	0553      	lsls	r3, r2, #21
 8005810:	d527      	bpl.n	8005862 <__ssputs_r+0x8e>
 8005812:	4629      	mov	r1, r5
 8005814:	f7ff ff52 	bl	80056bc <_malloc_r>
 8005818:	4606      	mov	r6, r0
 800581a:	b360      	cbz	r0, 8005876 <__ssputs_r+0xa2>
 800581c:	6921      	ldr	r1, [r4, #16]
 800581e:	464a      	mov	r2, r9
 8005820:	f7ff fed1 	bl	80055c6 <memcpy>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800582a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	6126      	str	r6, [r4, #16]
 8005832:	6165      	str	r5, [r4, #20]
 8005834:	444e      	add	r6, r9
 8005836:	eba5 0509 	sub.w	r5, r5, r9
 800583a:	6026      	str	r6, [r4, #0]
 800583c:	60a5      	str	r5, [r4, #8]
 800583e:	463e      	mov	r6, r7
 8005840:	42be      	cmp	r6, r7
 8005842:	d900      	bls.n	8005846 <__ssputs_r+0x72>
 8005844:	463e      	mov	r6, r7
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	4632      	mov	r2, r6
 800584a:	4641      	mov	r1, r8
 800584c:	f000 fc7c 	bl	8006148 <memmove>
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	1b9b      	subs	r3, r3, r6
 8005854:	60a3      	str	r3, [r4, #8]
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4433      	add	r3, r6
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	2000      	movs	r0, #0
 800585e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005862:	462a      	mov	r2, r5
 8005864:	f000 fc9a 	bl	800619c <_realloc_r>
 8005868:	4606      	mov	r6, r0
 800586a:	2800      	cmp	r0, #0
 800586c:	d1e0      	bne.n	8005830 <__ssputs_r+0x5c>
 800586e:	6921      	ldr	r1, [r4, #16]
 8005870:	4650      	mov	r0, sl
 8005872:	f7ff feb7 	bl	80055e4 <_free_r>
 8005876:	230c      	movs	r3, #12
 8005878:	f8ca 3000 	str.w	r3, [sl]
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005888:	e7e9      	b.n	800585e <__ssputs_r+0x8a>
	...

0800588c <_svfiprintf_r>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	4698      	mov	r8, r3
 8005892:	898b      	ldrh	r3, [r1, #12]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	b09d      	sub	sp, #116	@ 0x74
 8005898:	4607      	mov	r7, r0
 800589a:	460d      	mov	r5, r1
 800589c:	4614      	mov	r4, r2
 800589e:	d510      	bpl.n	80058c2 <_svfiprintf_r+0x36>
 80058a0:	690b      	ldr	r3, [r1, #16]
 80058a2:	b973      	cbnz	r3, 80058c2 <_svfiprintf_r+0x36>
 80058a4:	2140      	movs	r1, #64	@ 0x40
 80058a6:	f7ff ff09 	bl	80056bc <_malloc_r>
 80058aa:	6028      	str	r0, [r5, #0]
 80058ac:	6128      	str	r0, [r5, #16]
 80058ae:	b930      	cbnz	r0, 80058be <_svfiprintf_r+0x32>
 80058b0:	230c      	movs	r3, #12
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058b8:	b01d      	add	sp, #116	@ 0x74
 80058ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058be:	2340      	movs	r3, #64	@ 0x40
 80058c0:	616b      	str	r3, [r5, #20]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c6:	2320      	movs	r3, #32
 80058c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d0:	2330      	movs	r3, #48	@ 0x30
 80058d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a70 <_svfiprintf_r+0x1e4>
 80058d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058da:	f04f 0901 	mov.w	r9, #1
 80058de:	4623      	mov	r3, r4
 80058e0:	469a      	mov	sl, r3
 80058e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e6:	b10a      	cbz	r2, 80058ec <_svfiprintf_r+0x60>
 80058e8:	2a25      	cmp	r2, #37	@ 0x25
 80058ea:	d1f9      	bne.n	80058e0 <_svfiprintf_r+0x54>
 80058ec:	ebba 0b04 	subs.w	fp, sl, r4
 80058f0:	d00b      	beq.n	800590a <_svfiprintf_r+0x7e>
 80058f2:	465b      	mov	r3, fp
 80058f4:	4622      	mov	r2, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	4638      	mov	r0, r7
 80058fa:	f7ff ff6b 	bl	80057d4 <__ssputs_r>
 80058fe:	3001      	adds	r0, #1
 8005900:	f000 80a7 	beq.w	8005a52 <_svfiprintf_r+0x1c6>
 8005904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005906:	445a      	add	r2, fp
 8005908:	9209      	str	r2, [sp, #36]	@ 0x24
 800590a:	f89a 3000 	ldrb.w	r3, [sl]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 809f 	beq.w	8005a52 <_svfiprintf_r+0x1c6>
 8005914:	2300      	movs	r3, #0
 8005916:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800591a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591e:	f10a 0a01 	add.w	sl, sl, #1
 8005922:	9304      	str	r3, [sp, #16]
 8005924:	9307      	str	r3, [sp, #28]
 8005926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800592a:	931a      	str	r3, [sp, #104]	@ 0x68
 800592c:	4654      	mov	r4, sl
 800592e:	2205      	movs	r2, #5
 8005930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005934:	484e      	ldr	r0, [pc, #312]	@ (8005a70 <_svfiprintf_r+0x1e4>)
 8005936:	f7fa fc73 	bl	8000220 <memchr>
 800593a:	9a04      	ldr	r2, [sp, #16]
 800593c:	b9d8      	cbnz	r0, 8005976 <_svfiprintf_r+0xea>
 800593e:	06d0      	lsls	r0, r2, #27
 8005940:	bf44      	itt	mi
 8005942:	2320      	movmi	r3, #32
 8005944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005948:	0711      	lsls	r1, r2, #28
 800594a:	bf44      	itt	mi
 800594c:	232b      	movmi	r3, #43	@ 0x2b
 800594e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005952:	f89a 3000 	ldrb.w	r3, [sl]
 8005956:	2b2a      	cmp	r3, #42	@ 0x2a
 8005958:	d015      	beq.n	8005986 <_svfiprintf_r+0xfa>
 800595a:	9a07      	ldr	r2, [sp, #28]
 800595c:	4654      	mov	r4, sl
 800595e:	2000      	movs	r0, #0
 8005960:	f04f 0c0a 	mov.w	ip, #10
 8005964:	4621      	mov	r1, r4
 8005966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800596a:	3b30      	subs	r3, #48	@ 0x30
 800596c:	2b09      	cmp	r3, #9
 800596e:	d94b      	bls.n	8005a08 <_svfiprintf_r+0x17c>
 8005970:	b1b0      	cbz	r0, 80059a0 <_svfiprintf_r+0x114>
 8005972:	9207      	str	r2, [sp, #28]
 8005974:	e014      	b.n	80059a0 <_svfiprintf_r+0x114>
 8005976:	eba0 0308 	sub.w	r3, r0, r8
 800597a:	fa09 f303 	lsl.w	r3, r9, r3
 800597e:	4313      	orrs	r3, r2
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	46a2      	mov	sl, r4
 8005984:	e7d2      	b.n	800592c <_svfiprintf_r+0xa0>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	1d19      	adds	r1, r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	9103      	str	r1, [sp, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfbb      	ittet	lt
 8005992:	425b      	neglt	r3, r3
 8005994:	f042 0202 	orrlt.w	r2, r2, #2
 8005998:	9307      	strge	r3, [sp, #28]
 800599a:	9307      	strlt	r3, [sp, #28]
 800599c:	bfb8      	it	lt
 800599e:	9204      	strlt	r2, [sp, #16]
 80059a0:	7823      	ldrb	r3, [r4, #0]
 80059a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80059a4:	d10a      	bne.n	80059bc <_svfiprintf_r+0x130>
 80059a6:	7863      	ldrb	r3, [r4, #1]
 80059a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059aa:	d132      	bne.n	8005a12 <_svfiprintf_r+0x186>
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	1d1a      	adds	r2, r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	9203      	str	r2, [sp, #12]
 80059b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059b8:	3402      	adds	r4, #2
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a80 <_svfiprintf_r+0x1f4>
 80059c0:	7821      	ldrb	r1, [r4, #0]
 80059c2:	2203      	movs	r2, #3
 80059c4:	4650      	mov	r0, sl
 80059c6:	f7fa fc2b 	bl	8000220 <memchr>
 80059ca:	b138      	cbz	r0, 80059dc <_svfiprintf_r+0x150>
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	eba0 000a 	sub.w	r0, r0, sl
 80059d2:	2240      	movs	r2, #64	@ 0x40
 80059d4:	4082      	lsls	r2, r0
 80059d6:	4313      	orrs	r3, r2
 80059d8:	3401      	adds	r4, #1
 80059da:	9304      	str	r3, [sp, #16]
 80059dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e0:	4824      	ldr	r0, [pc, #144]	@ (8005a74 <_svfiprintf_r+0x1e8>)
 80059e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059e6:	2206      	movs	r2, #6
 80059e8:	f7fa fc1a 	bl	8000220 <memchr>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d036      	beq.n	8005a5e <_svfiprintf_r+0x1d2>
 80059f0:	4b21      	ldr	r3, [pc, #132]	@ (8005a78 <_svfiprintf_r+0x1ec>)
 80059f2:	bb1b      	cbnz	r3, 8005a3c <_svfiprintf_r+0x1b0>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	3307      	adds	r3, #7
 80059f8:	f023 0307 	bic.w	r3, r3, #7
 80059fc:	3308      	adds	r3, #8
 80059fe:	9303      	str	r3, [sp, #12]
 8005a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a02:	4433      	add	r3, r6
 8005a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a06:	e76a      	b.n	80058de <_svfiprintf_r+0x52>
 8005a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e7a8      	b.n	8005964 <_svfiprintf_r+0xd8>
 8005a12:	2300      	movs	r3, #0
 8005a14:	3401      	adds	r4, #1
 8005a16:	9305      	str	r3, [sp, #20]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f04f 0c0a 	mov.w	ip, #10
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a24:	3a30      	subs	r2, #48	@ 0x30
 8005a26:	2a09      	cmp	r2, #9
 8005a28:	d903      	bls.n	8005a32 <_svfiprintf_r+0x1a6>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0c6      	beq.n	80059bc <_svfiprintf_r+0x130>
 8005a2e:	9105      	str	r1, [sp, #20]
 8005a30:	e7c4      	b.n	80059bc <_svfiprintf_r+0x130>
 8005a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a36:	4604      	mov	r4, r0
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e7f0      	b.n	8005a1e <_svfiprintf_r+0x192>
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4b0e      	ldr	r3, [pc, #56]	@ (8005a7c <_svfiprintf_r+0x1f0>)
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	4638      	mov	r0, r7
 8005a48:	f3af 8000 	nop.w
 8005a4c:	1c42      	adds	r2, r0, #1
 8005a4e:	4606      	mov	r6, r0
 8005a50:	d1d6      	bne.n	8005a00 <_svfiprintf_r+0x174>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	065b      	lsls	r3, r3, #25
 8005a56:	f53f af2d 	bmi.w	80058b4 <_svfiprintf_r+0x28>
 8005a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a5c:	e72c      	b.n	80058b8 <_svfiprintf_r+0x2c>
 8005a5e:	ab03      	add	r3, sp, #12
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	462a      	mov	r2, r5
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <_svfiprintf_r+0x1f0>)
 8005a66:	a904      	add	r1, sp, #16
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f000 f9bb 	bl	8005de4 <_printf_i>
 8005a6e:	e7ed      	b.n	8005a4c <_svfiprintf_r+0x1c0>
 8005a70:	080064c2 	.word	0x080064c2
 8005a74:	080064cc 	.word	0x080064cc
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	080057d5 	.word	0x080057d5
 8005a80:	080064c8 	.word	0x080064c8

08005a84 <__sfputc_r>:
 8005a84:	6893      	ldr	r3, [r2, #8]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	b410      	push	{r4}
 8005a8c:	6093      	str	r3, [r2, #8]
 8005a8e:	da08      	bge.n	8005aa2 <__sfputc_r+0x1e>
 8005a90:	6994      	ldr	r4, [r2, #24]
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	db01      	blt.n	8005a9a <__sfputc_r+0x16>
 8005a96:	290a      	cmp	r1, #10
 8005a98:	d103      	bne.n	8005aa2 <__sfputc_r+0x1e>
 8005a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a9e:	f000 babf 	b.w	8006020 <__swbuf_r>
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	1c58      	adds	r0, r3, #1
 8005aa6:	6010      	str	r0, [r2, #0]
 8005aa8:	7019      	strb	r1, [r3, #0]
 8005aaa:	4608      	mov	r0, r1
 8005aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <__sfputs_r>:
 8005ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	18d5      	adds	r5, r2, r3
 8005abc:	42ac      	cmp	r4, r5
 8005abe:	d101      	bne.n	8005ac4 <__sfputs_r+0x12>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e007      	b.n	8005ad4 <__sfputs_r+0x22>
 8005ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac8:	463a      	mov	r2, r7
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff ffda 	bl	8005a84 <__sfputc_r>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d1f3      	bne.n	8005abc <__sfputs_r+0xa>
 8005ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ad8 <_vfiprintf_r>:
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005adc:	460d      	mov	r5, r1
 8005ade:	b09d      	sub	sp, #116	@ 0x74
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	4698      	mov	r8, r3
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	b118      	cbz	r0, 8005af0 <_vfiprintf_r+0x18>
 8005ae8:	6a03      	ldr	r3, [r0, #32]
 8005aea:	b90b      	cbnz	r3, 8005af0 <_vfiprintf_r+0x18>
 8005aec:	f7ff fc2e 	bl	800534c <__sinit>
 8005af0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005af2:	07d9      	lsls	r1, r3, #31
 8005af4:	d405      	bmi.n	8005b02 <_vfiprintf_r+0x2a>
 8005af6:	89ab      	ldrh	r3, [r5, #12]
 8005af8:	059a      	lsls	r2, r3, #22
 8005afa:	d402      	bmi.n	8005b02 <_vfiprintf_r+0x2a>
 8005afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005afe:	f7ff fd60 	bl	80055c2 <__retarget_lock_acquire_recursive>
 8005b02:	89ab      	ldrh	r3, [r5, #12]
 8005b04:	071b      	lsls	r3, r3, #28
 8005b06:	d501      	bpl.n	8005b0c <_vfiprintf_r+0x34>
 8005b08:	692b      	ldr	r3, [r5, #16]
 8005b0a:	b99b      	cbnz	r3, 8005b34 <_vfiprintf_r+0x5c>
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f000 fac4 	bl	800609c <__swsetup_r>
 8005b14:	b170      	cbz	r0, 8005b34 <_vfiprintf_r+0x5c>
 8005b16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b18:	07dc      	lsls	r4, r3, #31
 8005b1a:	d504      	bpl.n	8005b26 <_vfiprintf_r+0x4e>
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b20:	b01d      	add	sp, #116	@ 0x74
 8005b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b26:	89ab      	ldrh	r3, [r5, #12]
 8005b28:	0598      	lsls	r0, r3, #22
 8005b2a:	d4f7      	bmi.n	8005b1c <_vfiprintf_r+0x44>
 8005b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b2e:	f7ff fd49 	bl	80055c4 <__retarget_lock_release_recursive>
 8005b32:	e7f3      	b.n	8005b1c <_vfiprintf_r+0x44>
 8005b34:	2300      	movs	r3, #0
 8005b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b42:	2330      	movs	r3, #48	@ 0x30
 8005b44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005cf4 <_vfiprintf_r+0x21c>
 8005b48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b4c:	f04f 0901 	mov.w	r9, #1
 8005b50:	4623      	mov	r3, r4
 8005b52:	469a      	mov	sl, r3
 8005b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b58:	b10a      	cbz	r2, 8005b5e <_vfiprintf_r+0x86>
 8005b5a:	2a25      	cmp	r2, #37	@ 0x25
 8005b5c:	d1f9      	bne.n	8005b52 <_vfiprintf_r+0x7a>
 8005b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005b62:	d00b      	beq.n	8005b7c <_vfiprintf_r+0xa4>
 8005b64:	465b      	mov	r3, fp
 8005b66:	4622      	mov	r2, r4
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff ffa1 	bl	8005ab2 <__sfputs_r>
 8005b70:	3001      	adds	r0, #1
 8005b72:	f000 80a7 	beq.w	8005cc4 <_vfiprintf_r+0x1ec>
 8005b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b78:	445a      	add	r2, fp
 8005b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 809f 	beq.w	8005cc4 <_vfiprintf_r+0x1ec>
 8005b86:	2300      	movs	r3, #0
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b90:	f10a 0a01 	add.w	sl, sl, #1
 8005b94:	9304      	str	r3, [sp, #16]
 8005b96:	9307      	str	r3, [sp, #28]
 8005b98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b9e:	4654      	mov	r4, sl
 8005ba0:	2205      	movs	r2, #5
 8005ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba6:	4853      	ldr	r0, [pc, #332]	@ (8005cf4 <_vfiprintf_r+0x21c>)
 8005ba8:	f7fa fb3a 	bl	8000220 <memchr>
 8005bac:	9a04      	ldr	r2, [sp, #16]
 8005bae:	b9d8      	cbnz	r0, 8005be8 <_vfiprintf_r+0x110>
 8005bb0:	06d1      	lsls	r1, r2, #27
 8005bb2:	bf44      	itt	mi
 8005bb4:	2320      	movmi	r3, #32
 8005bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bba:	0713      	lsls	r3, r2, #28
 8005bbc:	bf44      	itt	mi
 8005bbe:	232b      	movmi	r3, #43	@ 0x2b
 8005bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bca:	d015      	beq.n	8005bf8 <_vfiprintf_r+0x120>
 8005bcc:	9a07      	ldr	r2, [sp, #28]
 8005bce:	4654      	mov	r4, sl
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	f04f 0c0a 	mov.w	ip, #10
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bdc:	3b30      	subs	r3, #48	@ 0x30
 8005bde:	2b09      	cmp	r3, #9
 8005be0:	d94b      	bls.n	8005c7a <_vfiprintf_r+0x1a2>
 8005be2:	b1b0      	cbz	r0, 8005c12 <_vfiprintf_r+0x13a>
 8005be4:	9207      	str	r2, [sp, #28]
 8005be6:	e014      	b.n	8005c12 <_vfiprintf_r+0x13a>
 8005be8:	eba0 0308 	sub.w	r3, r0, r8
 8005bec:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	9304      	str	r3, [sp, #16]
 8005bf4:	46a2      	mov	sl, r4
 8005bf6:	e7d2      	b.n	8005b9e <_vfiprintf_r+0xc6>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	1d19      	adds	r1, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	9103      	str	r1, [sp, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bfbb      	ittet	lt
 8005c04:	425b      	neglt	r3, r3
 8005c06:	f042 0202 	orrlt.w	r2, r2, #2
 8005c0a:	9307      	strge	r3, [sp, #28]
 8005c0c:	9307      	strlt	r3, [sp, #28]
 8005c0e:	bfb8      	it	lt
 8005c10:	9204      	strlt	r2, [sp, #16]
 8005c12:	7823      	ldrb	r3, [r4, #0]
 8005c14:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c16:	d10a      	bne.n	8005c2e <_vfiprintf_r+0x156>
 8005c18:	7863      	ldrb	r3, [r4, #1]
 8005c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c1c:	d132      	bne.n	8005c84 <_vfiprintf_r+0x1ac>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	1d1a      	adds	r2, r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	9203      	str	r2, [sp, #12]
 8005c26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c2a:	3402      	adds	r4, #2
 8005c2c:	9305      	str	r3, [sp, #20]
 8005c2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d04 <_vfiprintf_r+0x22c>
 8005c32:	7821      	ldrb	r1, [r4, #0]
 8005c34:	2203      	movs	r2, #3
 8005c36:	4650      	mov	r0, sl
 8005c38:	f7fa faf2 	bl	8000220 <memchr>
 8005c3c:	b138      	cbz	r0, 8005c4e <_vfiprintf_r+0x176>
 8005c3e:	9b04      	ldr	r3, [sp, #16]
 8005c40:	eba0 000a 	sub.w	r0, r0, sl
 8005c44:	2240      	movs	r2, #64	@ 0x40
 8005c46:	4082      	lsls	r2, r0
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	3401      	adds	r4, #1
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c52:	4829      	ldr	r0, [pc, #164]	@ (8005cf8 <_vfiprintf_r+0x220>)
 8005c54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c58:	2206      	movs	r2, #6
 8005c5a:	f7fa fae1 	bl	8000220 <memchr>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d03f      	beq.n	8005ce2 <_vfiprintf_r+0x20a>
 8005c62:	4b26      	ldr	r3, [pc, #152]	@ (8005cfc <_vfiprintf_r+0x224>)
 8005c64:	bb1b      	cbnz	r3, 8005cae <_vfiprintf_r+0x1d6>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	3307      	adds	r3, #7
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	3308      	adds	r3, #8
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c74:	443b      	add	r3, r7
 8005c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c78:	e76a      	b.n	8005b50 <_vfiprintf_r+0x78>
 8005c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c7e:	460c      	mov	r4, r1
 8005c80:	2001      	movs	r0, #1
 8005c82:	e7a8      	b.n	8005bd6 <_vfiprintf_r+0xfe>
 8005c84:	2300      	movs	r3, #0
 8005c86:	3401      	adds	r4, #1
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f04f 0c0a 	mov.w	ip, #10
 8005c90:	4620      	mov	r0, r4
 8005c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c96:	3a30      	subs	r2, #48	@ 0x30
 8005c98:	2a09      	cmp	r2, #9
 8005c9a:	d903      	bls.n	8005ca4 <_vfiprintf_r+0x1cc>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0c6      	beq.n	8005c2e <_vfiprintf_r+0x156>
 8005ca0:	9105      	str	r1, [sp, #20]
 8005ca2:	e7c4      	b.n	8005c2e <_vfiprintf_r+0x156>
 8005ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ca8:	4604      	mov	r4, r0
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7f0      	b.n	8005c90 <_vfiprintf_r+0x1b8>
 8005cae:	ab03      	add	r3, sp, #12
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4b12      	ldr	r3, [pc, #72]	@ (8005d00 <_vfiprintf_r+0x228>)
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f3af 8000 	nop.w
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	1c78      	adds	r0, r7, #1
 8005cc2:	d1d6      	bne.n	8005c72 <_vfiprintf_r+0x19a>
 8005cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cc6:	07d9      	lsls	r1, r3, #31
 8005cc8:	d405      	bmi.n	8005cd6 <_vfiprintf_r+0x1fe>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_vfiprintf_r+0x1fe>
 8005cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cd2:	f7ff fc77 	bl	80055c4 <__retarget_lock_release_recursive>
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	065b      	lsls	r3, r3, #25
 8005cda:	f53f af1f 	bmi.w	8005b1c <_vfiprintf_r+0x44>
 8005cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ce0:	e71e      	b.n	8005b20 <_vfiprintf_r+0x48>
 8005ce2:	ab03      	add	r3, sp, #12
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4b05      	ldr	r3, [pc, #20]	@ (8005d00 <_vfiprintf_r+0x228>)
 8005cea:	a904      	add	r1, sp, #16
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f879 	bl	8005de4 <_printf_i>
 8005cf2:	e7e4      	b.n	8005cbe <_vfiprintf_r+0x1e6>
 8005cf4:	080064c2 	.word	0x080064c2
 8005cf8:	080064cc 	.word	0x080064cc
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005ab3 	.word	0x08005ab3
 8005d04:	080064c8 	.word	0x080064c8

08005d08 <_printf_common>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	4698      	mov	r8, r3
 8005d10:	688a      	ldr	r2, [r1, #8]
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bfb8      	it	lt
 8005d1c:	4613      	movlt	r3, r2
 8005d1e:	6033      	str	r3, [r6, #0]
 8005d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d24:	4607      	mov	r7, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	b10a      	cbz	r2, 8005d2e <_printf_common+0x26>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	0699      	lsls	r1, r3, #26
 8005d32:	bf42      	ittt	mi
 8005d34:	6833      	ldrmi	r3, [r6, #0]
 8005d36:	3302      	addmi	r3, #2
 8005d38:	6033      	strmi	r3, [r6, #0]
 8005d3a:	6825      	ldr	r5, [r4, #0]
 8005d3c:	f015 0506 	ands.w	r5, r5, #6
 8005d40:	d106      	bne.n	8005d50 <_printf_common+0x48>
 8005d42:	f104 0a19 	add.w	sl, r4, #25
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	6832      	ldr	r2, [r6, #0]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dc26      	bgt.n	8005d9e <_printf_common+0x96>
 8005d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	3b00      	subs	r3, #0
 8005d58:	bf18      	it	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	0692      	lsls	r2, r2, #26
 8005d5e:	d42b      	bmi.n	8005db8 <_printf_common+0xb0>
 8005d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d64:	4641      	mov	r1, r8
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c8      	blx	r9
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d01e      	beq.n	8005dac <_printf_common+0xa4>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	f003 0306 	and.w	r3, r3, #6
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	bf02      	ittt	eq
 8005d7a:	68e5      	ldreq	r5, [r4, #12]
 8005d7c:	6833      	ldreq	r3, [r6, #0]
 8005d7e:	1aed      	subeq	r5, r5, r3
 8005d80:	68a3      	ldr	r3, [r4, #8]
 8005d82:	bf0c      	ite	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	2500      	movne	r5, #0
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	bfc4      	itt	gt
 8005d8e:	1a9b      	subgt	r3, r3, r2
 8005d90:	18ed      	addgt	r5, r5, r3
 8005d92:	2600      	movs	r6, #0
 8005d94:	341a      	adds	r4, #26
 8005d96:	42b5      	cmp	r5, r6
 8005d98:	d11a      	bne.n	8005dd0 <_printf_common+0xc8>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e008      	b.n	8005db0 <_printf_common+0xa8>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4652      	mov	r2, sl
 8005da2:	4641      	mov	r1, r8
 8005da4:	4638      	mov	r0, r7
 8005da6:	47c8      	blx	r9
 8005da8:	3001      	adds	r0, #1
 8005daa:	d103      	bne.n	8005db4 <_printf_common+0xac>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7c6      	b.n	8005d46 <_printf_common+0x3e>
 8005db8:	18e1      	adds	r1, r4, r3
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	2030      	movs	r0, #48	@ 0x30
 8005dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dc2:	4422      	add	r2, r4
 8005dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dcc:	3302      	adds	r3, #2
 8005dce:	e7c7      	b.n	8005d60 <_printf_common+0x58>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c8      	blx	r9
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d0e6      	beq.n	8005dac <_printf_common+0xa4>
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7d9      	b.n	8005d96 <_printf_common+0x8e>
	...

08005de4 <_printf_i>:
 8005de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	7e0f      	ldrb	r7, [r1, #24]
 8005dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dec:	2f78      	cmp	r7, #120	@ 0x78
 8005dee:	4691      	mov	r9, r2
 8005df0:	4680      	mov	r8, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	469a      	mov	sl, r3
 8005df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dfa:	d807      	bhi.n	8005e0c <_printf_i+0x28>
 8005dfc:	2f62      	cmp	r7, #98	@ 0x62
 8005dfe:	d80a      	bhi.n	8005e16 <_printf_i+0x32>
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	f000 80d1 	beq.w	8005fa8 <_printf_i+0x1c4>
 8005e06:	2f58      	cmp	r7, #88	@ 0x58
 8005e08:	f000 80b8 	beq.w	8005f7c <_printf_i+0x198>
 8005e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e14:	e03a      	b.n	8005e8c <_printf_i+0xa8>
 8005e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e1a:	2b15      	cmp	r3, #21
 8005e1c:	d8f6      	bhi.n	8005e0c <_printf_i+0x28>
 8005e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e24 <_printf_i+0x40>)
 8005e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e0d 	.word	0x08005e0d
 8005e30:	08005e0d 	.word	0x08005e0d
 8005e34:	08005e0d 	.word	0x08005e0d
 8005e38:	08005e0d 	.word	0x08005e0d
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e0d 	.word	0x08005e0d
 8005e44:	08005e0d 	.word	0x08005e0d
 8005e48:	08005e0d 	.word	0x08005e0d
 8005e4c:	08005e0d 	.word	0x08005e0d
 8005e50:	08005f8f 	.word	0x08005f8f
 8005e54:	08005ebb 	.word	0x08005ebb
 8005e58:	08005f49 	.word	0x08005f49
 8005e5c:	08005e0d 	.word	0x08005e0d
 8005e60:	08005e0d 	.word	0x08005e0d
 8005e64:	08005fb1 	.word	0x08005fb1
 8005e68:	08005e0d 	.word	0x08005e0d
 8005e6c:	08005ebb 	.word	0x08005ebb
 8005e70:	08005e0d 	.word	0x08005e0d
 8005e74:	08005e0d 	.word	0x08005e0d
 8005e78:	08005f51 	.word	0x08005f51
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6032      	str	r2, [r6, #0]
 8005e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e09c      	b.n	8005fca <_printf_i+0x1e6>
 8005e90:	6833      	ldr	r3, [r6, #0]
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	1d19      	adds	r1, r3, #4
 8005e96:	6031      	str	r1, [r6, #0]
 8005e98:	0606      	lsls	r6, r0, #24
 8005e9a:	d501      	bpl.n	8005ea0 <_printf_i+0xbc>
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	e003      	b.n	8005ea8 <_printf_i+0xc4>
 8005ea0:	0645      	lsls	r5, r0, #25
 8005ea2:	d5fb      	bpl.n	8005e9c <_printf_i+0xb8>
 8005ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	da03      	bge.n	8005eb4 <_printf_i+0xd0>
 8005eac:	232d      	movs	r3, #45	@ 0x2d
 8005eae:	426d      	negs	r5, r5
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb4:	4858      	ldr	r0, [pc, #352]	@ (8006018 <_printf_i+0x234>)
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	e011      	b.n	8005ede <_printf_i+0xfa>
 8005eba:	6821      	ldr	r1, [r4, #0]
 8005ebc:	6833      	ldr	r3, [r6, #0]
 8005ebe:	0608      	lsls	r0, r1, #24
 8005ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ec4:	d402      	bmi.n	8005ecc <_printf_i+0xe8>
 8005ec6:	0649      	lsls	r1, r1, #25
 8005ec8:	bf48      	it	mi
 8005eca:	b2ad      	uxthmi	r5, r5
 8005ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ece:	4852      	ldr	r0, [pc, #328]	@ (8006018 <_printf_i+0x234>)
 8005ed0:	6033      	str	r3, [r6, #0]
 8005ed2:	bf14      	ite	ne
 8005ed4:	230a      	movne	r3, #10
 8005ed6:	2308      	moveq	r3, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ede:	6866      	ldr	r6, [r4, #4]
 8005ee0:	60a6      	str	r6, [r4, #8]
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	db05      	blt.n	8005ef2 <_printf_i+0x10e>
 8005ee6:	6821      	ldr	r1, [r4, #0]
 8005ee8:	432e      	orrs	r6, r5
 8005eea:	f021 0104 	bic.w	r1, r1, #4
 8005eee:	6021      	str	r1, [r4, #0]
 8005ef0:	d04b      	beq.n	8005f8a <_printf_i+0x1a6>
 8005ef2:	4616      	mov	r6, r2
 8005ef4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ef8:	fb03 5711 	mls	r7, r3, r1, r5
 8005efc:	5dc7      	ldrb	r7, [r0, r7]
 8005efe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f02:	462f      	mov	r7, r5
 8005f04:	42bb      	cmp	r3, r7
 8005f06:	460d      	mov	r5, r1
 8005f08:	d9f4      	bls.n	8005ef4 <_printf_i+0x110>
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d10b      	bne.n	8005f26 <_printf_i+0x142>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	07df      	lsls	r7, r3, #31
 8005f12:	d508      	bpl.n	8005f26 <_printf_i+0x142>
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	6861      	ldr	r1, [r4, #4]
 8005f18:	4299      	cmp	r1, r3
 8005f1a:	bfde      	ittt	le
 8005f1c:	2330      	movle	r3, #48	@ 0x30
 8005f1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f22:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f26:	1b92      	subs	r2, r2, r6
 8005f28:	6122      	str	r2, [r4, #16]
 8005f2a:	f8cd a000 	str.w	sl, [sp]
 8005f2e:	464b      	mov	r3, r9
 8005f30:	aa03      	add	r2, sp, #12
 8005f32:	4621      	mov	r1, r4
 8005f34:	4640      	mov	r0, r8
 8005f36:	f7ff fee7 	bl	8005d08 <_printf_common>
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d14a      	bne.n	8005fd4 <_printf_i+0x1f0>
 8005f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f42:	b004      	add	sp, #16
 8005f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	f043 0320 	orr.w	r3, r3, #32
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	4832      	ldr	r0, [pc, #200]	@ (800601c <_printf_i+0x238>)
 8005f52:	2778      	movs	r7, #120	@ 0x78
 8005f54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	6831      	ldr	r1, [r6, #0]
 8005f5c:	061f      	lsls	r7, r3, #24
 8005f5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f62:	d402      	bmi.n	8005f6a <_printf_i+0x186>
 8005f64:	065f      	lsls	r7, r3, #25
 8005f66:	bf48      	it	mi
 8005f68:	b2ad      	uxthmi	r5, r5
 8005f6a:	6031      	str	r1, [r6, #0]
 8005f6c:	07d9      	lsls	r1, r3, #31
 8005f6e:	bf44      	itt	mi
 8005f70:	f043 0320 	orrmi.w	r3, r3, #32
 8005f74:	6023      	strmi	r3, [r4, #0]
 8005f76:	b11d      	cbz	r5, 8005f80 <_printf_i+0x19c>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	e7ad      	b.n	8005ed8 <_printf_i+0xf4>
 8005f7c:	4826      	ldr	r0, [pc, #152]	@ (8006018 <_printf_i+0x234>)
 8005f7e:	e7e9      	b.n	8005f54 <_printf_i+0x170>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	f023 0320 	bic.w	r3, r3, #32
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	e7f6      	b.n	8005f78 <_printf_i+0x194>
 8005f8a:	4616      	mov	r6, r2
 8005f8c:	e7bd      	b.n	8005f0a <_printf_i+0x126>
 8005f8e:	6833      	ldr	r3, [r6, #0]
 8005f90:	6825      	ldr	r5, [r4, #0]
 8005f92:	6961      	ldr	r1, [r4, #20]
 8005f94:	1d18      	adds	r0, r3, #4
 8005f96:	6030      	str	r0, [r6, #0]
 8005f98:	062e      	lsls	r6, r5, #24
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	d501      	bpl.n	8005fa2 <_printf_i+0x1be>
 8005f9e:	6019      	str	r1, [r3, #0]
 8005fa0:	e002      	b.n	8005fa8 <_printf_i+0x1c4>
 8005fa2:	0668      	lsls	r0, r5, #25
 8005fa4:	d5fb      	bpl.n	8005f9e <_printf_i+0x1ba>
 8005fa6:	8019      	strh	r1, [r3, #0]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	4616      	mov	r6, r2
 8005fae:	e7bc      	b.n	8005f2a <_printf_i+0x146>
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	1d1a      	adds	r2, r3, #4
 8005fb4:	6032      	str	r2, [r6, #0]
 8005fb6:	681e      	ldr	r6, [r3, #0]
 8005fb8:	6862      	ldr	r2, [r4, #4]
 8005fba:	2100      	movs	r1, #0
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f7fa f92f 	bl	8000220 <memchr>
 8005fc2:	b108      	cbz	r0, 8005fc8 <_printf_i+0x1e4>
 8005fc4:	1b80      	subs	r0, r0, r6
 8005fc6:	6060      	str	r0, [r4, #4]
 8005fc8:	6863      	ldr	r3, [r4, #4]
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fd2:	e7aa      	b.n	8005f2a <_printf_i+0x146>
 8005fd4:	6923      	ldr	r3, [r4, #16]
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4640      	mov	r0, r8
 8005fdc:	47d0      	blx	sl
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d0ad      	beq.n	8005f3e <_printf_i+0x15a>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	079b      	lsls	r3, r3, #30
 8005fe6:	d413      	bmi.n	8006010 <_printf_i+0x22c>
 8005fe8:	68e0      	ldr	r0, [r4, #12]
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	4298      	cmp	r0, r3
 8005fee:	bfb8      	it	lt
 8005ff0:	4618      	movlt	r0, r3
 8005ff2:	e7a6      	b.n	8005f42 <_printf_i+0x15e>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4632      	mov	r2, r6
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	47d0      	blx	sl
 8005ffe:	3001      	adds	r0, #1
 8006000:	d09d      	beq.n	8005f3e <_printf_i+0x15a>
 8006002:	3501      	adds	r5, #1
 8006004:	68e3      	ldr	r3, [r4, #12]
 8006006:	9903      	ldr	r1, [sp, #12]
 8006008:	1a5b      	subs	r3, r3, r1
 800600a:	42ab      	cmp	r3, r5
 800600c:	dcf2      	bgt.n	8005ff4 <_printf_i+0x210>
 800600e:	e7eb      	b.n	8005fe8 <_printf_i+0x204>
 8006010:	2500      	movs	r5, #0
 8006012:	f104 0619 	add.w	r6, r4, #25
 8006016:	e7f5      	b.n	8006004 <_printf_i+0x220>
 8006018:	080064d3 	.word	0x080064d3
 800601c:	080064e4 	.word	0x080064e4

08006020 <__swbuf_r>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	460e      	mov	r6, r1
 8006024:	4614      	mov	r4, r2
 8006026:	4605      	mov	r5, r0
 8006028:	b118      	cbz	r0, 8006032 <__swbuf_r+0x12>
 800602a:	6a03      	ldr	r3, [r0, #32]
 800602c:	b90b      	cbnz	r3, 8006032 <__swbuf_r+0x12>
 800602e:	f7ff f98d 	bl	800534c <__sinit>
 8006032:	69a3      	ldr	r3, [r4, #24]
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	071a      	lsls	r2, r3, #28
 800603a:	d501      	bpl.n	8006040 <__swbuf_r+0x20>
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	b943      	cbnz	r3, 8006052 <__swbuf_r+0x32>
 8006040:	4621      	mov	r1, r4
 8006042:	4628      	mov	r0, r5
 8006044:	f000 f82a 	bl	800609c <__swsetup_r>
 8006048:	b118      	cbz	r0, 8006052 <__swbuf_r+0x32>
 800604a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800604e:	4638      	mov	r0, r7
 8006050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	6922      	ldr	r2, [r4, #16]
 8006056:	1a98      	subs	r0, r3, r2
 8006058:	6963      	ldr	r3, [r4, #20]
 800605a:	b2f6      	uxtb	r6, r6
 800605c:	4283      	cmp	r3, r0
 800605e:	4637      	mov	r7, r6
 8006060:	dc05      	bgt.n	800606e <__swbuf_r+0x4e>
 8006062:	4621      	mov	r1, r4
 8006064:	4628      	mov	r0, r5
 8006066:	f7ff f8a9 	bl	80051bc <_fflush_r>
 800606a:	2800      	cmp	r0, #0
 800606c:	d1ed      	bne.n	800604a <__swbuf_r+0x2a>
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	3b01      	subs	r3, #1
 8006072:	60a3      	str	r3, [r4, #8]
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	6022      	str	r2, [r4, #0]
 800607a:	701e      	strb	r6, [r3, #0]
 800607c:	6962      	ldr	r2, [r4, #20]
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	429a      	cmp	r2, r3
 8006082:	d004      	beq.n	800608e <__swbuf_r+0x6e>
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	07db      	lsls	r3, r3, #31
 8006088:	d5e1      	bpl.n	800604e <__swbuf_r+0x2e>
 800608a:	2e0a      	cmp	r6, #10
 800608c:	d1df      	bne.n	800604e <__swbuf_r+0x2e>
 800608e:	4621      	mov	r1, r4
 8006090:	4628      	mov	r0, r5
 8006092:	f7ff f893 	bl	80051bc <_fflush_r>
 8006096:	2800      	cmp	r0, #0
 8006098:	d0d9      	beq.n	800604e <__swbuf_r+0x2e>
 800609a:	e7d6      	b.n	800604a <__swbuf_r+0x2a>

0800609c <__swsetup_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4b29      	ldr	r3, [pc, #164]	@ (8006144 <__swsetup_r+0xa8>)
 80060a0:	4605      	mov	r5, r0
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	460c      	mov	r4, r1
 80060a6:	b118      	cbz	r0, 80060b0 <__swsetup_r+0x14>
 80060a8:	6a03      	ldr	r3, [r0, #32]
 80060aa:	b90b      	cbnz	r3, 80060b0 <__swsetup_r+0x14>
 80060ac:	f7ff f94e 	bl	800534c <__sinit>
 80060b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b4:	0719      	lsls	r1, r3, #28
 80060b6:	d422      	bmi.n	80060fe <__swsetup_r+0x62>
 80060b8:	06da      	lsls	r2, r3, #27
 80060ba:	d407      	bmi.n	80060cc <__swsetup_r+0x30>
 80060bc:	2209      	movs	r2, #9
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060c4:	81a3      	strh	r3, [r4, #12]
 80060c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060ca:	e033      	b.n	8006134 <__swsetup_r+0x98>
 80060cc:	0758      	lsls	r0, r3, #29
 80060ce:	d512      	bpl.n	80060f6 <__swsetup_r+0x5a>
 80060d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060d2:	b141      	cbz	r1, 80060e6 <__swsetup_r+0x4a>
 80060d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060d8:	4299      	cmp	r1, r3
 80060da:	d002      	beq.n	80060e2 <__swsetup_r+0x46>
 80060dc:	4628      	mov	r0, r5
 80060de:	f7ff fa81 	bl	80055e4 <_free_r>
 80060e2:	2300      	movs	r3, #0
 80060e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	2300      	movs	r3, #0
 80060f0:	6063      	str	r3, [r4, #4]
 80060f2:	6923      	ldr	r3, [r4, #16]
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	f043 0308 	orr.w	r3, r3, #8
 80060fc:	81a3      	strh	r3, [r4, #12]
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	b94b      	cbnz	r3, 8006116 <__swsetup_r+0x7a>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800610c:	d003      	beq.n	8006116 <__swsetup_r+0x7a>
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 f897 	bl	8006244 <__smakebuf_r>
 8006116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800611a:	f013 0201 	ands.w	r2, r3, #1
 800611e:	d00a      	beq.n	8006136 <__swsetup_r+0x9a>
 8006120:	2200      	movs	r2, #0
 8006122:	60a2      	str	r2, [r4, #8]
 8006124:	6962      	ldr	r2, [r4, #20]
 8006126:	4252      	negs	r2, r2
 8006128:	61a2      	str	r2, [r4, #24]
 800612a:	6922      	ldr	r2, [r4, #16]
 800612c:	b942      	cbnz	r2, 8006140 <__swsetup_r+0xa4>
 800612e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006132:	d1c5      	bne.n	80060c0 <__swsetup_r+0x24>
 8006134:	bd38      	pop	{r3, r4, r5, pc}
 8006136:	0799      	lsls	r1, r3, #30
 8006138:	bf58      	it	pl
 800613a:	6962      	ldrpl	r2, [r4, #20]
 800613c:	60a2      	str	r2, [r4, #8]
 800613e:	e7f4      	b.n	800612a <__swsetup_r+0x8e>
 8006140:	2000      	movs	r0, #0
 8006142:	e7f7      	b.n	8006134 <__swsetup_r+0x98>
 8006144:	20000034 	.word	0x20000034

08006148 <memmove>:
 8006148:	4288      	cmp	r0, r1
 800614a:	b510      	push	{r4, lr}
 800614c:	eb01 0402 	add.w	r4, r1, r2
 8006150:	d902      	bls.n	8006158 <memmove+0x10>
 8006152:	4284      	cmp	r4, r0
 8006154:	4623      	mov	r3, r4
 8006156:	d807      	bhi.n	8006168 <memmove+0x20>
 8006158:	1e43      	subs	r3, r0, #1
 800615a:	42a1      	cmp	r1, r4
 800615c:	d008      	beq.n	8006170 <memmove+0x28>
 800615e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006166:	e7f8      	b.n	800615a <memmove+0x12>
 8006168:	4402      	add	r2, r0
 800616a:	4601      	mov	r1, r0
 800616c:	428a      	cmp	r2, r1
 800616e:	d100      	bne.n	8006172 <memmove+0x2a>
 8006170:	bd10      	pop	{r4, pc}
 8006172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800617a:	e7f7      	b.n	800616c <memmove+0x24>

0800617c <_sbrk_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4d06      	ldr	r5, [pc, #24]	@ (8006198 <_sbrk_r+0x1c>)
 8006180:	2300      	movs	r3, #0
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	f7fa fcbe 	bl	8000b08 <_sbrk>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_sbrk_r+0x1a>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_sbrk_r+0x1a>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20004368 	.word	0x20004368

0800619c <_realloc_r>:
 800619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	4607      	mov	r7, r0
 80061a2:	4614      	mov	r4, r2
 80061a4:	460d      	mov	r5, r1
 80061a6:	b921      	cbnz	r1, 80061b2 <_realloc_r+0x16>
 80061a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ac:	4611      	mov	r1, r2
 80061ae:	f7ff ba85 	b.w	80056bc <_malloc_r>
 80061b2:	b92a      	cbnz	r2, 80061c0 <_realloc_r+0x24>
 80061b4:	f7ff fa16 	bl	80055e4 <_free_r>
 80061b8:	4625      	mov	r5, r4
 80061ba:	4628      	mov	r0, r5
 80061bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c0:	f000 f89e 	bl	8006300 <_malloc_usable_size_r>
 80061c4:	4284      	cmp	r4, r0
 80061c6:	4606      	mov	r6, r0
 80061c8:	d802      	bhi.n	80061d0 <_realloc_r+0x34>
 80061ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061ce:	d8f4      	bhi.n	80061ba <_realloc_r+0x1e>
 80061d0:	4621      	mov	r1, r4
 80061d2:	4638      	mov	r0, r7
 80061d4:	f7ff fa72 	bl	80056bc <_malloc_r>
 80061d8:	4680      	mov	r8, r0
 80061da:	b908      	cbnz	r0, 80061e0 <_realloc_r+0x44>
 80061dc:	4645      	mov	r5, r8
 80061de:	e7ec      	b.n	80061ba <_realloc_r+0x1e>
 80061e0:	42b4      	cmp	r4, r6
 80061e2:	4622      	mov	r2, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	bf28      	it	cs
 80061e8:	4632      	movcs	r2, r6
 80061ea:	f7ff f9ec 	bl	80055c6 <memcpy>
 80061ee:	4629      	mov	r1, r5
 80061f0:	4638      	mov	r0, r7
 80061f2:	f7ff f9f7 	bl	80055e4 <_free_r>
 80061f6:	e7f1      	b.n	80061dc <_realloc_r+0x40>

080061f8 <__swhatbuf_r>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	460c      	mov	r4, r1
 80061fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006200:	2900      	cmp	r1, #0
 8006202:	b096      	sub	sp, #88	@ 0x58
 8006204:	4615      	mov	r5, r2
 8006206:	461e      	mov	r6, r3
 8006208:	da0d      	bge.n	8006226 <__swhatbuf_r+0x2e>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006210:	f04f 0100 	mov.w	r1, #0
 8006214:	bf14      	ite	ne
 8006216:	2340      	movne	r3, #64	@ 0x40
 8006218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800621c:	2000      	movs	r0, #0
 800621e:	6031      	str	r1, [r6, #0]
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	b016      	add	sp, #88	@ 0x58
 8006224:	bd70      	pop	{r4, r5, r6, pc}
 8006226:	466a      	mov	r2, sp
 8006228:	f000 f848 	bl	80062bc <_fstat_r>
 800622c:	2800      	cmp	r0, #0
 800622e:	dbec      	blt.n	800620a <__swhatbuf_r+0x12>
 8006230:	9901      	ldr	r1, [sp, #4]
 8006232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800623a:	4259      	negs	r1, r3
 800623c:	4159      	adcs	r1, r3
 800623e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006242:	e7eb      	b.n	800621c <__swhatbuf_r+0x24>

08006244 <__smakebuf_r>:
 8006244:	898b      	ldrh	r3, [r1, #12]
 8006246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006248:	079d      	lsls	r5, r3, #30
 800624a:	4606      	mov	r6, r0
 800624c:	460c      	mov	r4, r1
 800624e:	d507      	bpl.n	8006260 <__smakebuf_r+0x1c>
 8006250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	6123      	str	r3, [r4, #16]
 8006258:	2301      	movs	r3, #1
 800625a:	6163      	str	r3, [r4, #20]
 800625c:	b003      	add	sp, #12
 800625e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006260:	ab01      	add	r3, sp, #4
 8006262:	466a      	mov	r2, sp
 8006264:	f7ff ffc8 	bl	80061f8 <__swhatbuf_r>
 8006268:	9f00      	ldr	r7, [sp, #0]
 800626a:	4605      	mov	r5, r0
 800626c:	4639      	mov	r1, r7
 800626e:	4630      	mov	r0, r6
 8006270:	f7ff fa24 	bl	80056bc <_malloc_r>
 8006274:	b948      	cbnz	r0, 800628a <__smakebuf_r+0x46>
 8006276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627a:	059a      	lsls	r2, r3, #22
 800627c:	d4ee      	bmi.n	800625c <__smakebuf_r+0x18>
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	f043 0302 	orr.w	r3, r3, #2
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	e7e2      	b.n	8006250 <__smakebuf_r+0xc>
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	6020      	str	r0, [r4, #0]
 800628e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	9b01      	ldr	r3, [sp, #4]
 8006296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800629a:	b15b      	cbz	r3, 80062b4 <__smakebuf_r+0x70>
 800629c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a0:	4630      	mov	r0, r6
 80062a2:	f000 f81d 	bl	80062e0 <_isatty_r>
 80062a6:	b128      	cbz	r0, 80062b4 <__smakebuf_r+0x70>
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	431d      	orrs	r5, r3
 80062b8:	81a5      	strh	r5, [r4, #12]
 80062ba:	e7cf      	b.n	800625c <__smakebuf_r+0x18>

080062bc <_fstat_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d07      	ldr	r5, [pc, #28]	@ (80062dc <_fstat_r+0x20>)
 80062c0:	2300      	movs	r3, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	f7fe fd70 	bl	8004dae <_fstat>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d102      	bne.n	80062d8 <_fstat_r+0x1c>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	b103      	cbz	r3, 80062d8 <_fstat_r+0x1c>
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	bd38      	pop	{r3, r4, r5, pc}
 80062da:	bf00      	nop
 80062dc:	20004368 	.word	0x20004368

080062e0 <_isatty_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d06      	ldr	r5, [pc, #24]	@ (80062fc <_isatty_r+0x1c>)
 80062e4:	2300      	movs	r3, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	f7fe fec4 	bl	8005078 <_isatty>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d102      	bne.n	80062fa <_isatty_r+0x1a>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	b103      	cbz	r3, 80062fa <_isatty_r+0x1a>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	20004368 	.word	0x20004368

08006300 <_malloc_usable_size_r>:
 8006300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006304:	1f18      	subs	r0, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	bfbc      	itt	lt
 800630a:	580b      	ldrlt	r3, [r1, r0]
 800630c:	18c0      	addlt	r0, r0, r3
 800630e:	4770      	bx	lr

08006310 <_init>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr

0800631c <_fini>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	bf00      	nop
 8006320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006322:	bc08      	pop	{r3}
 8006324:	469e      	mov	lr, r3
 8006326:	4770      	bx	lr
