
practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd0  08005fd0  00007074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fd8  08005fd8  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fdc  08005fdc  00006fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08005fe0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004260  20000074  08006054  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042d4  08006054  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b38  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3a  00000000  00000000  0001abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001db18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e09  00000000  00000000  0001ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ddc  00000000  00000000  0001fb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fc5  00000000  00000000  0004390d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9f1c  00000000  00000000  000578d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001317ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000551c  00000000  00000000  00131834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00136d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f24 	.word	0x08005f24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005f24 	.word	0x08005f24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <vApplicationGetIdleTaskMemory+0x2c>)
 800055c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4a06      	ldr	r2, [pc, #24]	@ (800057c <vApplicationGetIdleTaskMemory+0x30>)
 8000562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2280      	movs	r2, #128	@ 0x80
 8000568:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000090 	.word	0x20000090
 800057c:	200000e4 	.word	0x200000e4

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b090      	sub	sp, #64	@ 0x40
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000586:	f004 ff95 	bl	80054b4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb47 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f849 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8df 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8b3 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello, World!\n");
 800059a:	481c      	ldr	r0, [pc, #112]	@ (800060c <main+0x8c>)
 800059c:	f005 f920 	bl	80057e0 <puts>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Sem */
  osSemaphoreDef(Binary_Sem);
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  Binary_SemHandle = osSemaphoreCreate(osSemaphore(Binary_Sem), 1);
 80005a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fa29 	bl	8002a06 <osSemaphoreCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <main+0x90>)
 80005b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <main+0x94>)
 80005bc:	f107 041c 	add.w	r4, r7, #28
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 f9b6 	bl	8002946 <osThreadCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <main+0x98>)
 80005de:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityNormal, 0, 128);
 80005e0:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <main+0x9c>)
 80005e2:	463c      	mov	r4, r7
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005f2:	463b      	mov	r3, r7
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f9a5 	bl	8002946 <osThreadCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <main+0xa0>)
 8000600:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000602:	f002 f999 	bl	8002938 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <main+0x86>
 800060a:	bf00      	nop
 800060c:	08005f3c 	.word	0x08005f3c
 8000610:	20000334 	.word	0x20000334
 8000614:	08005f54 	.word	0x08005f54
 8000618:	2000032c 	.word	0x2000032c
 800061c:	08005f78 	.word	0x08005f78
 8000620:	20000330 	.word	0x20000330

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f005 f9b4 	bl	80059a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <SystemClock_Config+0xd4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a29      	ldr	r2, [pc, #164]	@ (80006f8 <SystemClock_Config+0xd4>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <SystemClock_Config+0xd4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a22      	ldr	r2, [pc, #136]	@ (80006fc <SystemClock_Config+0xd8>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SystemClock_Config+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f918 	bl	80018e8 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006be:	f000 f921 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fd86 	bl	80011f0 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ea:	f000 f90b 	bl	8000904 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	@ 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f001 fe10 	bl	800235c <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f8df 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200002e4 	.word	0x200002e4
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b3b      	ldr	r3, [pc, #236]	@ (800085c <MX_GPIO_Init+0x108>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a3a      	ldr	r2, [pc, #232]	@ (800085c <MX_GPIO_Init+0x108>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b38      	ldr	r3, [pc, #224]	@ (800085c <MX_GPIO_Init+0x108>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b34      	ldr	r3, [pc, #208]	@ (800085c <MX_GPIO_Init+0x108>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a33      	ldr	r2, [pc, #204]	@ (800085c <MX_GPIO_Init+0x108>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b31      	ldr	r3, [pc, #196]	@ (800085c <MX_GPIO_Init+0x108>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <MX_GPIO_Init+0x108>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a2c      	ldr	r2, [pc, #176]	@ (800085c <MX_GPIO_Init+0x108>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <MX_GPIO_Init+0x108>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b26      	ldr	r3, [pc, #152]	@ (800085c <MX_GPIO_Init+0x108>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <MX_GPIO_Init+0x108>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b23      	ldr	r3, [pc, #140]	@ (800085c <MX_GPIO_Init+0x108>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	4820      	ldr	r0, [pc, #128]	@ (8000860 <MX_GPIO_Init+0x10c>)
 80007e0:	f000 fcd4 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	481e      	ldr	r0, [pc, #120]	@ (8000864 <MX_GPIO_Init+0x110>)
 80007ea:	f000 fccf 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4818      	ldr	r0, [pc, #96]	@ (8000868 <MX_GPIO_Init+0x114>)
 8000806:	f000 fb2d 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080a:	2320      	movs	r3, #32
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	480f      	ldr	r0, [pc, #60]	@ (8000860 <MX_GPIO_Init+0x10c>)
 8000822:	f000 fb1f 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <MX_GPIO_Init+0x110>)
 800083e:	f000 fb11 	bl	8000e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2105      	movs	r1, #5
 8000846:	2028      	movs	r0, #40	@ 0x28
 8000848:	f000 fae2 	bl	8000e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800084c:	2028      	movs	r0, #40	@ 0x28
 800084e:	f000 fafb 	bl	8000e48 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020400 	.word	0x40020400
 8000868:	40020800 	.word	0x40020800

0800086c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	if(USER_Btn_Pin == GPIO_Pin)
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800087c:	d104      	bne.n	8000888 <HAL_GPIO_EXTI_Callback+0x1c>
		osSemaphoreRelease (Binary_SemHandle);
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <HAL_GPIO_EXTI_Callback+0x24>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f002 f940 	bl	8002b08 <osSemaphoreRelease>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000334 	.word	0x20000334

08000894 <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2101      	movs	r1, #1
 80008a0:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <Task1_App+0x24>)
 80008a2:	f000 fc73 	bl	800118c <HAL_GPIO_WritePin>
    osSemaphoreWait(Binary_SemHandle, osWaitForever);
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <Task1_App+0x28>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 f8dc 	bl	8002a6c <osSemaphoreWait>
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008b4:	bf00      	nop
 80008b6:	e7f1      	b.n	800089c <Task1_App+0x8>
 80008b8:	40020400 	.word	0x40020400
 80008bc:	20000334 	.word	0x20000334

080008c0 <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2101      	movs	r1, #1
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <Task2_App+0x1c>)
 80008ce:	f000 fc5d 	bl	800118c <HAL_GPIO_WritePin>
    osDelay(1);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f002 f883 	bl	80029de <osDelay>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008d8:	bf00      	nop
 80008da:	e7f5      	b.n	80008c8 <Task2_App+0x8>
 80008dc:	40020400 	.word	0x40020400

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008f2:	f000 f9b5 	bl	8000c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40010000 	.word	0x40010000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_MspInit+0x54>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <HAL_MspInit+0x54>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <HAL_MspInit+0x54>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_MspInit+0x54>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	@ 0x40
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	f06f 0001 	mvn.w	r0, #1
 8000956:	f000 fa5b 	bl	8000e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12b      	bne.n	80009e2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000998:	6413      	str	r3, [r2, #64]	@ 0x40
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c2:	230c      	movs	r3, #12
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d2:	2307      	movs	r3, #7
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <HAL_UART_MspInit+0x8c>)
 80009de:	f000 fa41 	bl	8000e64 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004400 	.word	0x40004400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <HAL_InitTick+0xd0>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a10:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac8 <HAL_InitTick+0xd0>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <HAL_InitTick+0xd0>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 020c 	add.w	r2, r7, #12
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fcf8 	bl	8001424 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a34:	f000 fce2 	bl	80013fc <HAL_RCC_GetPCLK2Freq>
 8000a38:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3c:	4a23      	ldr	r2, [pc, #140]	@ (8000acc <HAL_InitTick+0xd4>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	0c9b      	lsrs	r3, r3, #18
 8000a44:	3b01      	subs	r3, #1
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a48:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ad4 <HAL_InitTick+0xdc>)
 8000a4c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a56:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a6e:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a70:	f001 f9d8 	bl	8001e24 <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d11b      	bne.n	8000aba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a82:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a84:	f001 fa28 	bl	8001ed8 <HAL_TIM_Base_Start_IT>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d111      	bne.n	8000aba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a96:	2019      	movs	r0, #25
 8000a98:	f000 f9d6 	bl	8000e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	d808      	bhi.n	8000ab4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	2019      	movs	r0, #25
 8000aa8:	f000 f9b2 	bl	8000e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <HAL_InitTick+0xe0>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e002      	b.n	8000aba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3730      	adds	r7, #48	@ 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	431bde83 	.word	0x431bde83
 8000ad0:	20000338 	.word	0x20000338
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	20000004 	.word	0x20000004

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b1a:	f001 fa4d 	bl	8001fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000338 	.word	0x20000338

08000b28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000b2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b30:	f000 fb46 	bl	80011c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f004 ff68 	bl	8005a3c <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20020000 	.word	0x20020000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000380 	.word	0x20000380
 8000ba0:	200042d8 	.word	0x200042d8

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f004 ff27 	bl	8005a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fcc1 	bl	8000580 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c0c:	08005fe0 	.word	0x08005fe0
  ldr r2, =_sbss
 8000c10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c14:	200042d4 	.word	0x200042d4

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f8d8 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f7ff fed4 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fe5e 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000384 	.word	0x20000384

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000384 	.word	0x20000384

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	@ (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	@ (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	@ (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	@ 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff4c 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e22:	f7ff ff61 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	f7ff ffb1 	bl	8000d94 <NVIC_EncodePriority>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff80 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff54 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e165      	b.n	800114c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8154 	bne.w	8001146 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80ae 	beq.w	8001146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b5d      	ldr	r3, [pc, #372]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a5c      	ldr	r2, [pc, #368]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a58      	ldr	r2, [pc, #352]	@ (8001168 <HAL_GPIO_Init+0x304>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4f      	ldr	r2, [pc, #316]	@ (800116c <HAL_GPIO_Init+0x308>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d025      	beq.n	800107e <HAL_GPIO_Init+0x21a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4e      	ldr	r2, [pc, #312]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01f      	beq.n	800107a <HAL_GPIO_Init+0x216>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4d      	ldr	r2, [pc, #308]	@ (8001174 <HAL_GPIO_Init+0x310>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x212>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4c      	ldr	r2, [pc, #304]	@ (8001178 <HAL_GPIO_Init+0x314>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x20e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4b      	ldr	r2, [pc, #300]	@ (800117c <HAL_GPIO_Init+0x318>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x20a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4a      	ldr	r2, [pc, #296]	@ (8001180 <HAL_GPIO_Init+0x31c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x206>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a49      	ldr	r2, [pc, #292]	@ (8001184 <HAL_GPIO_Init+0x320>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x202>
 8001062:	2306      	movs	r3, #6
 8001064:	e00c      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001066:	2307      	movs	r3, #7
 8001068:	e00a      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800106a:	2305      	movs	r3, #5
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800106e:	2304      	movs	r3, #4
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	@ (8001168 <HAL_GPIO_Init+0x304>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a31      	ldr	r2, [pc, #196]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a26      	ldr	r2, [pc, #152]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_GPIO_Init+0x324>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001140:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f ae96 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	@ 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40013800 	.word	0x40013800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40021400 	.word	0x40021400
 8001184:	40021800 	.word	0x40021800
 8001188:	40013c00 	.word	0x40013c00

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb44 	bl	800086c <HAL_GPIO_EXTI_Callback>
  }
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013c00 	.word	0x40013c00

080011f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0cc      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001204:	4b68      	ldr	r3, [pc, #416]	@ (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d90c      	bls.n	800122c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	4b65      	ldr	r3, [pc, #404]	@ (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b63      	ldr	r3, [pc, #396]	@ (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0b8      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001244:	4b59      	ldr	r3, [pc, #356]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a58      	ldr	r2, [pc, #352]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800124e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a52      	ldr	r2, [pc, #328]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001268:	4b50      	ldr	r3, [pc, #320]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	494d      	ldr	r1, [pc, #308]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d044      	beq.n	8001310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d119      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e07f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d003      	beq.n	80012ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d107      	bne.n	80012be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ae:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e06f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012be:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e067      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ce:	4b37      	ldr	r3, [pc, #220]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f023 0203 	bic.w	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4934      	ldr	r1, [pc, #208]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e0:	f7ff fcd2 	bl	8000c88 <HAL_GetTick>
 80012e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e8:	f7ff fcce 	bl	8000c88 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e04f      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 020c 	and.w	r2, r3, #12
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	429a      	cmp	r2, r3
 800130e:	d1eb      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001310:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d20c      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e032      	b.n	800139e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4916      	ldr	r1, [pc, #88]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	490e      	ldr	r1, [pc, #56]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001376:	f000 f887 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 800137a:	4602      	mov	r2, r0
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	490a      	ldr	r1, [pc, #40]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	5ccb      	ldrb	r3, [r1, r3]
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fb2e 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00
 80013ac:	40023800 	.word	0x40023800
 80013b0:	08005f9c 	.word	0x08005f9c
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013d8:	f7ff fff0 	bl	80013bc <HAL_RCC_GetHCLKFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0a9b      	lsrs	r3, r3, #10
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4903      	ldr	r1, [pc, #12]	@ (80013f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	08005fac 	.word	0x08005fac

080013fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001400:	f7ff ffdc 	bl	80013bc <HAL_RCC_GetHCLKFreq>
 8001404:	4602      	mov	r2, r0
 8001406:	4b05      	ldr	r3, [pc, #20]	@ (800141c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	0b5b      	lsrs	r3, r3, #13
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	4903      	ldr	r1, [pc, #12]	@ (8001420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	08005fac 	.word	0x08005fac

08001424 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	220f      	movs	r2, #15
 8001432:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_RCC_GetClockConfig+0x5c>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_RCC_GetClockConfig+0x5c>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_RCC_GetClockConfig+0x5c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_RCC_GetClockConfig+0x5c>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <HAL_RCC_GetClockConfig+0x60>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 020f 	and.w	r2, r3, #15
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40023c00 	.word	0x40023c00

08001488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800148c:	b0ae      	sub	sp, #184	@ 0xb8
 800148e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ae:	4bcb      	ldr	r3, [pc, #812]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	f200 8206 	bhi.w	80018c8 <HAL_RCC_GetSysClockFreq+0x440>
 80014bc:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080018c9 	.word	0x080018c9
 80014cc:	080018c9 	.word	0x080018c9
 80014d0:	080018c9 	.word	0x080018c9
 80014d4:	08001501 	.word	0x08001501
 80014d8:	080018c9 	.word	0x080018c9
 80014dc:	080018c9 	.word	0x080018c9
 80014e0:	080018c9 	.word	0x080018c9
 80014e4:	08001509 	.word	0x08001509
 80014e8:	080018c9 	.word	0x080018c9
 80014ec:	080018c9 	.word	0x080018c9
 80014f0:	080018c9 	.word	0x080018c9
 80014f4:	080016f9 	.word	0x080016f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014f8:	4bb9      	ldr	r3, [pc, #740]	@ (80017e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014fe:	e1e7      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001500:	4bb8      	ldr	r3, [pc, #736]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001506:	e1e3      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001508:	4bb4      	ldr	r3, [pc, #720]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001514:	4bb1      	ldr	r3, [pc, #708]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d071      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001520:	4bae      	ldr	r3, [pc, #696]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	2200      	movs	r2, #0
 8001528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800152c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001546:	4622      	mov	r2, r4
 8001548:	462b      	mov	r3, r5
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	0159      	lsls	r1, r3, #5
 8001554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001558:	0150      	lsls	r0, r2, #5
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4621      	mov	r1, r4
 8001560:	1a51      	subs	r1, r2, r1
 8001562:	6439      	str	r1, [r7, #64]	@ 0x40
 8001564:	4629      	mov	r1, r5
 8001566:	eb63 0301 	sbc.w	r3, r3, r1
 800156a:	647b      	str	r3, [r7, #68]	@ 0x44
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001578:	4649      	mov	r1, r9
 800157a:	018b      	lsls	r3, r1, #6
 800157c:	4641      	mov	r1, r8
 800157e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001582:	4641      	mov	r1, r8
 8001584:	018a      	lsls	r2, r1, #6
 8001586:	4641      	mov	r1, r8
 8001588:	1a51      	subs	r1, r2, r1
 800158a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800158c:	4649      	mov	r1, r9
 800158e:	eb63 0301 	sbc.w	r3, r3, r1
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015a0:	4649      	mov	r1, r9
 80015a2:	00cb      	lsls	r3, r1, #3
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015aa:	4641      	mov	r1, r8
 80015ac:	00ca      	lsls	r2, r1, #3
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	4622      	mov	r2, r4
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80015ba:	462b      	mov	r3, r5
 80015bc:	460a      	mov	r2, r1
 80015be:	eb42 0303 	adc.w	r3, r2, r3
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015d0:	4629      	mov	r1, r5
 80015d2:	024b      	lsls	r3, r1, #9
 80015d4:	4621      	mov	r1, r4
 80015d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015da:	4621      	mov	r1, r4
 80015dc:	024a      	lsls	r2, r1, #9
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015e6:	2200      	movs	r2, #0
 80015e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80015f4:	f7fe fe14 	bl	8000220 <__aeabi_uldivmod>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4613      	mov	r3, r2
 80015fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001602:	e067      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4b75      	ldr	r3, [pc, #468]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	2200      	movs	r2, #0
 800160c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001610:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001614:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800161e:	2300      	movs	r3, #0
 8001620:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001622:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001626:	4622      	mov	r2, r4
 8001628:	462b      	mov	r3, r5
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	0159      	lsls	r1, r3, #5
 8001634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001638:	0150      	lsls	r0, r2, #5
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4621      	mov	r1, r4
 8001640:	1a51      	subs	r1, r2, r1
 8001642:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001644:	4629      	mov	r1, r5
 8001646:	eb63 0301 	sbc.w	r3, r3, r1
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001658:	4649      	mov	r1, r9
 800165a:	018b      	lsls	r3, r1, #6
 800165c:	4641      	mov	r1, r8
 800165e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001662:	4641      	mov	r1, r8
 8001664:	018a      	lsls	r2, r1, #6
 8001666:	4641      	mov	r1, r8
 8001668:	ebb2 0a01 	subs.w	sl, r2, r1
 800166c:	4649      	mov	r1, r9
 800166e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800167e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001686:	4692      	mov	sl, r2
 8001688:	469b      	mov	fp, r3
 800168a:	4623      	mov	r3, r4
 800168c:	eb1a 0303 	adds.w	r3, sl, r3
 8001690:	623b      	str	r3, [r7, #32]
 8001692:	462b      	mov	r3, r5
 8001694:	eb4b 0303 	adc.w	r3, fp, r3
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016a6:	4629      	mov	r1, r5
 80016a8:	028b      	lsls	r3, r1, #10
 80016aa:	4621      	mov	r1, r4
 80016ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b0:	4621      	mov	r1, r4
 80016b2:	028a      	lsls	r2, r1, #10
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016bc:	2200      	movs	r2, #0
 80016be:	673b      	str	r3, [r7, #112]	@ 0x70
 80016c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80016c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016c6:	f7fe fdab 	bl	8000220 <__aeabi_uldivmod>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4613      	mov	r3, r2
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016d4:	4b41      	ldr	r3, [pc, #260]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	3301      	adds	r3, #1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80016e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016f6:	e0eb      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f8:	4b38      	ldr	r3, [pc, #224]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001704:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d06b      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	2200      	movs	r2, #0
 8001718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800171a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800171c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800171e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001722:	663b      	str	r3, [r7, #96]	@ 0x60
 8001724:	2300      	movs	r3, #0
 8001726:	667b      	str	r3, [r7, #100]	@ 0x64
 8001728:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800172c:	4622      	mov	r2, r4
 800172e:	462b      	mov	r3, r5
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	0159      	lsls	r1, r3, #5
 800173a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800173e:	0150      	lsls	r0, r2, #5
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4621      	mov	r1, r4
 8001746:	1a51      	subs	r1, r2, r1
 8001748:	61b9      	str	r1, [r7, #24]
 800174a:	4629      	mov	r1, r5
 800174c:	eb63 0301 	sbc.w	r3, r3, r1
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800175e:	4659      	mov	r1, fp
 8001760:	018b      	lsls	r3, r1, #6
 8001762:	4651      	mov	r1, sl
 8001764:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001768:	4651      	mov	r1, sl
 800176a:	018a      	lsls	r2, r1, #6
 800176c:	4651      	mov	r1, sl
 800176e:	ebb2 0801 	subs.w	r8, r2, r1
 8001772:	4659      	mov	r1, fp
 8001774:	eb63 0901 	sbc.w	r9, r3, r1
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001784:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001788:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800178c:	4690      	mov	r8, r2
 800178e:	4699      	mov	r9, r3
 8001790:	4623      	mov	r3, r4
 8001792:	eb18 0303 	adds.w	r3, r8, r3
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	462b      	mov	r3, r5
 800179a:	eb49 0303 	adc.w	r3, r9, r3
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017ac:	4629      	mov	r1, r5
 80017ae:	024b      	lsls	r3, r1, #9
 80017b0:	4621      	mov	r1, r4
 80017b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017b6:	4621      	mov	r1, r4
 80017b8:	024a      	lsls	r2, r1, #9
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017c2:	2200      	movs	r2, #0
 80017c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017cc:	f7fe fd28 	bl	8000220 <__aeabi_uldivmod>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4613      	mov	r3, r2
 80017d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80017da:	e065      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x420>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	00f42400 	.word	0x00f42400
 80017e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e8:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	2200      	movs	r2, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	4611      	mov	r1, r2
 80017f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80017fa:	2300      	movs	r3, #0
 80017fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80017fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001802:	4642      	mov	r2, r8
 8001804:	464b      	mov	r3, r9
 8001806:	f04f 0000 	mov.w	r0, #0
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	0159      	lsls	r1, r3, #5
 8001810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001814:	0150      	lsls	r0, r2, #5
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4641      	mov	r1, r8
 800181c:	1a51      	subs	r1, r2, r1
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	4649      	mov	r1, r9
 8001822:	eb63 0301 	sbc.w	r3, r3, r1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001834:	4659      	mov	r1, fp
 8001836:	018b      	lsls	r3, r1, #6
 8001838:	4651      	mov	r1, sl
 800183a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800183e:	4651      	mov	r1, sl
 8001840:	018a      	lsls	r2, r1, #6
 8001842:	4651      	mov	r1, sl
 8001844:	1a54      	subs	r4, r2, r1
 8001846:	4659      	mov	r1, fp
 8001848:	eb63 0501 	sbc.w	r5, r3, r1
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	00eb      	lsls	r3, r5, #3
 8001856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185a:	00e2      	lsls	r2, r4, #3
 800185c:	4614      	mov	r4, r2
 800185e:	461d      	mov	r5, r3
 8001860:	4643      	mov	r3, r8
 8001862:	18e3      	adds	r3, r4, r3
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	464b      	mov	r3, r9
 8001868:	eb45 0303 	adc.w	r3, r5, r3
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800187a:	4629      	mov	r1, r5
 800187c:	028b      	lsls	r3, r1, #10
 800187e:	4621      	mov	r1, r4
 8001880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001884:	4621      	mov	r1, r4
 8001886:	028a      	lsls	r2, r1, #10
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001890:	2200      	movs	r2, #0
 8001892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001894:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001896:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800189a:	f7fe fcc1 	bl	8000220 <__aeabi_uldivmod>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4613      	mov	r3, r2
 80018a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	0f1b      	lsrs	r3, r3, #28
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80018b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018c6:	e003      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	37b8      	adds	r7, #184	@ 0xb8
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	00f42400 	.word	0x00f42400

080018e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e28d      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8083 	beq.w	8001a0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001908:	4b94      	ldr	r3, [pc, #592]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b04      	cmp	r3, #4
 8001912:	d019      	beq.n	8001948 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001914:	4b91      	ldr	r3, [pc, #580]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
        || \
 800191c:	2b08      	cmp	r3, #8
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001920:	4b8e      	ldr	r3, [pc, #568]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800192c:	d00c      	beq.n	8001948 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d112      	bne.n	8001960 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193a:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b84      	ldr	r3, [pc, #528]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d05b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x124>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d157      	bne.n	8001a0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e25a      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x90>
 800196a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xcc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0xb4>
 8001982:	4b76      	ldr	r3, [pc, #472]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a75      	ldr	r2, [pc, #468]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b73      	ldr	r3, [pc, #460]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a72      	ldr	r2, [pc, #456]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xcc>
 800199c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b6c      	ldr	r3, [pc, #432]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6b      	ldr	r2, [pc, #428]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f964 	bl	8000c88 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f960 	bl	8000c88 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	@ 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e21f      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b61      	ldr	r3, [pc, #388]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xdc>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f950 	bl	8000c88 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f94c 	bl	8000c88 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	@ 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e20b      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	4b57      	ldr	r3, [pc, #348]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x104>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d06f      	beq.n	8001afa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a1a:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d017      	beq.n	8001a56 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a26:	4b4d      	ldr	r3, [pc, #308]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a32:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3e:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d11c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4a:	4b44      	ldr	r3, [pc, #272]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x186>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1d3      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4937      	ldr	r1, [pc, #220]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <HAL_RCC_OscConfig+0x278>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f8f9 	bl	8000c88 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff f8f5 	bl	8000c88 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1b4      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4925      	ldr	r1, [pc, #148]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_RCC_OscConfig+0x278>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f8d8 	bl	8000c88 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff f8d4 	bl	8000c88 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e193      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d036      	beq.n	8001b74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f8b8 	bl	8000c88 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f8b4 	bl	8000c88 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e173      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_RCC_OscConfig+0x274>)
 8001b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x234>
 8001b3a:	e01b      	b.n	8001b74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f8a1 	bl	8000c88 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	e00e      	b.n	8001b68 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f89d 	bl	8000c88 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d907      	bls.n	8001b68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e15c      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	42470000 	.word	0x42470000
 8001b64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	4b8a      	ldr	r3, [pc, #552]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ea      	bne.n	8001b4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 8097 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	4b83      	ldr	r3, [pc, #524]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10f      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b7f      	ldr	r3, [pc, #508]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4b79      	ldr	r3, [pc, #484]	@ (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d118      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbe:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a75      	ldr	r2, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f85d 	bl	8000c88 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7ff f859 	bl	8000c88 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e118      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d98 <HAL_RCC_OscConfig+0x4b0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x31e>
 8001bf8:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfc:	4a65      	ldr	r2, [pc, #404]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c04:	e01c      	b.n	8001c40 <HAL_RCC_OscConfig+0x358>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x340>
 8001c0e:	4b61      	ldr	r3, [pc, #388]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	4a60      	ldr	r2, [pc, #384]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1a:	4b5e      	ldr	r3, [pc, #376]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x358>
 8001c28:	4b5a      	ldr	r3, [pc, #360]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2c:	4a59      	ldr	r2, [pc, #356]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c34:	4b57      	ldr	r3, [pc, #348]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c38:	4a56      	ldr	r2, [pc, #344]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	f023 0304 	bic.w	r3, r3, #4
 8001c3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d015      	beq.n	8001c74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff f81e 	bl	8000c88 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff f81a 	bl	8000c88 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0d7      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	4b4b      	ldr	r3, [pc, #300]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0ee      	beq.n	8001c50 <HAL_RCC_OscConfig+0x368>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff f808 	bl	8000c88 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f804 	bl	8000c88 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0c1      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ee      	bne.n	8001c7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80ad 	beq.w	8001e14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cba:	4b36      	ldr	r3, [pc, #216]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d060      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d145      	bne.n	8001d5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b33      	ldr	r3, [pc, #204]	@ (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ffd8 	bl	8000c88 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7fe ffd4 	bl	8000c88 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e093      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	019b      	lsls	r3, r3, #6
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	071b      	lsls	r3, r3, #28
 8001d26:	491b      	ldr	r1, [pc, #108]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7fe ffa9 	bl	8000c88 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe ffa5 	bl	8000c88 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e064      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x452>
 8001d58:	e05c      	b.n	8001e14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_RCC_OscConfig+0x4b4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe ff92 	bl	8000c88 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe ff8e 	bl	8000c88 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e04d      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x480>
 8001d86:	e045      	b.n	8001e14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e040      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <HAL_RCC_OscConfig+0x538>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d030      	beq.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d129      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d122      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d119      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	3b01      	subs	r3, #1
 8001dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d10f      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e041      	b.n	8001eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f839 	bl	8001ec2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f000 f9c0 	bl	80021e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e04e      	b.n	8001f8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d022      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1a:	d01d      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d018      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d013      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00e      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_TIM_Base_Start_IT+0xd4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d009      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d004      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x80>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a18      	ldr	r2, [pc, #96]	@ (8001fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d111      	bne.n	8001f7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d010      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7a:	e007      	b.n	8001f8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	40000c00 	.word	0x40000c00
 8001fac:	40010400 	.word	0x40010400
 8001fb0:	40014000 	.word	0x40014000
 8001fb4:	40001800 	.word	0x40001800

08001fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d020      	beq.n	800201c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0202 	mvn.w	r2, #2
 8001fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8d2 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8c4 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8d5 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d020      	beq.n	8002068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0204 	mvn.w	r2, #4
 8002038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8ac 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f89e 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8af 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d020      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0208 	mvn.w	r2, #8
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f886 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f878 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f889 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d020      	beq.n	8002100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0210 	mvn.w	r2, #16
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2208      	movs	r2, #8
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f860 	bl	80021ac <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f852 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f863 	bl	80021c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0201 	mvn.w	r2, #1
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fbde 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f900 	bl	8002348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f834 	bl	80021d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0220 	mvn.w	r2, #32
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8d2 	bl	8002334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a43      	ldr	r2, [pc, #268]	@ (8002308 <TIM_Base_SetConfig+0x120>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002206:	d00f      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a40      	ldr	r2, [pc, #256]	@ (800230c <TIM_Base_SetConfig+0x124>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00b      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3f      	ldr	r2, [pc, #252]	@ (8002310 <TIM_Base_SetConfig+0x128>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3e      	ldr	r2, [pc, #248]	@ (8002314 <TIM_Base_SetConfig+0x12c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d003      	beq.n	8002228 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3d      	ldr	r2, [pc, #244]	@ (8002318 <TIM_Base_SetConfig+0x130>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d108      	bne.n	800223a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800222e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a32      	ldr	r2, [pc, #200]	@ (8002308 <TIM_Base_SetConfig+0x120>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002248:	d027      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a2f      	ldr	r2, [pc, #188]	@ (800230c <TIM_Base_SetConfig+0x124>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d023      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <TIM_Base_SetConfig+0x128>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01f      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2d      	ldr	r2, [pc, #180]	@ (8002314 <TIM_Base_SetConfig+0x12c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01b      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2c      	ldr	r2, [pc, #176]	@ (8002318 <TIM_Base_SetConfig+0x130>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d017      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2b      	ldr	r2, [pc, #172]	@ (800231c <TIM_Base_SetConfig+0x134>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a2a      	ldr	r2, [pc, #168]	@ (8002320 <TIM_Base_SetConfig+0x138>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00f      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a29      	ldr	r2, [pc, #164]	@ (8002324 <TIM_Base_SetConfig+0x13c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00b      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a28      	ldr	r2, [pc, #160]	@ (8002328 <TIM_Base_SetConfig+0x140>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a27      	ldr	r2, [pc, #156]	@ (800232c <TIM_Base_SetConfig+0x144>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d003      	beq.n	800229a <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a26      	ldr	r2, [pc, #152]	@ (8002330 <TIM_Base_SetConfig+0x148>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d108      	bne.n	80022ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <TIM_Base_SetConfig+0x120>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_Base_SetConfig+0xf2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a10      	ldr	r2, [pc, #64]	@ (8002318 <TIM_Base_SetConfig+0x130>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d103      	bne.n	80022e2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40000400 	.word	0x40000400
 8002310:	40000800 	.word	0x40000800
 8002314:	40000c00 	.word	0x40000c00
 8002318:	40010400 	.word	0x40010400
 800231c:	40014000 	.word	0x40014000
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800
 8002328:	40001800 	.word	0x40001800
 800232c:	40001c00 	.word	0x40001c00
 8002330:	40002000 	.word	0x40002000

08002334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e042      	b.n	80023f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe faf0 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	@ 0x24
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800239e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f82b 	bl	80023fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002400:	b0c0      	sub	sp, #256	@ 0x100
 8002402:	af00      	add	r7, sp, #0
 8002404:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002418:	68d9      	ldr	r1, [r3, #12]
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	ea40 0301 	orr.w	r3, r0, r1
 8002424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	431a      	orrs	r2, r3
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002454:	f021 010c 	bic.w	r1, r1, #12
 8002458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002462:	430b      	orrs	r3, r1
 8002464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002476:	6999      	ldr	r1, [r3, #24]
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	ea40 0301 	orr.w	r3, r0, r1
 8002482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b8f      	ldr	r3, [pc, #572]	@ (80026c8 <UART_SetConfig+0x2cc>)
 800248c:	429a      	cmp	r2, r3
 800248e:	d005      	beq.n	800249c <UART_SetConfig+0xa0>
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b8d      	ldr	r3, [pc, #564]	@ (80026cc <UART_SetConfig+0x2d0>)
 8002498:	429a      	cmp	r2, r3
 800249a:	d104      	bne.n	80024a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800249c:	f7fe ffae 	bl	80013fc <HAL_RCC_GetPCLK2Freq>
 80024a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80024a4:	e003      	b.n	80024ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024a6:	f7fe ff95 	bl	80013d4 <HAL_RCC_GetPCLK1Freq>
 80024aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024b8:	f040 810c 	bne.w	80026d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80024c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80024ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80024ce:	4622      	mov	r2, r4
 80024d0:	462b      	mov	r3, r5
 80024d2:	1891      	adds	r1, r2, r2
 80024d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024d6:	415b      	adcs	r3, r3
 80024d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024de:	4621      	mov	r1, r4
 80024e0:	eb12 0801 	adds.w	r8, r2, r1
 80024e4:	4629      	mov	r1, r5
 80024e6:	eb43 0901 	adc.w	r9, r3, r1
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024fe:	4690      	mov	r8, r2
 8002500:	4699      	mov	r9, r3
 8002502:	4623      	mov	r3, r4
 8002504:	eb18 0303 	adds.w	r3, r8, r3
 8002508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800250c:	462b      	mov	r3, r5
 800250e:	eb49 0303 	adc.w	r3, r9, r3
 8002512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002522:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800252a:	460b      	mov	r3, r1
 800252c:	18db      	adds	r3, r3, r3
 800252e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002530:	4613      	mov	r3, r2
 8002532:	eb42 0303 	adc.w	r3, r2, r3
 8002536:	657b      	str	r3, [r7, #84]	@ 0x54
 8002538:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800253c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002540:	f7fd fe6e 	bl	8000220 <__aeabi_uldivmod>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4b61      	ldr	r3, [pc, #388]	@ (80026d0 <UART_SetConfig+0x2d4>)
 800254a:	fba3 2302 	umull	r2, r3, r3, r2
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	011c      	lsls	r4, r3, #4
 8002552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002556:	2200      	movs	r2, #0
 8002558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800255c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002560:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002564:	4642      	mov	r2, r8
 8002566:	464b      	mov	r3, r9
 8002568:	1891      	adds	r1, r2, r2
 800256a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800256c:	415b      	adcs	r3, r3
 800256e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002574:	4641      	mov	r1, r8
 8002576:	eb12 0a01 	adds.w	sl, r2, r1
 800257a:	4649      	mov	r1, r9
 800257c:	eb43 0b01 	adc.w	fp, r3, r1
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800258c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002594:	4692      	mov	sl, r2
 8002596:	469b      	mov	fp, r3
 8002598:	4643      	mov	r3, r8
 800259a:	eb1a 0303 	adds.w	r3, sl, r3
 800259e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025a2:	464b      	mov	r3, r9
 80025a4:	eb4b 0303 	adc.w	r3, fp, r3
 80025a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80025c0:	460b      	mov	r3, r1
 80025c2:	18db      	adds	r3, r3, r3
 80025c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80025c6:	4613      	mov	r3, r2
 80025c8:	eb42 0303 	adc.w	r3, r2, r3
 80025cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025d6:	f7fd fe23 	bl	8000220 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	4b3b      	ldr	r3, [pc, #236]	@ (80026d0 <UART_SetConfig+0x2d4>)
 80025e2:	fba3 2301 	umull	r2, r3, r3, r1
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2264      	movs	r2, #100	@ 0x64
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	1acb      	subs	r3, r1, r3
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025f6:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <UART_SetConfig+0x2d4>)
 80025f8:	fba3 2302 	umull	r2, r3, r3, r2
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002604:	441c      	add	r4, r3
 8002606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800260a:	2200      	movs	r2, #0
 800260c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002610:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002614:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002618:	4642      	mov	r2, r8
 800261a:	464b      	mov	r3, r9
 800261c:	1891      	adds	r1, r2, r2
 800261e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002620:	415b      	adcs	r3, r3
 8002622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002628:	4641      	mov	r1, r8
 800262a:	1851      	adds	r1, r2, r1
 800262c:	6339      	str	r1, [r7, #48]	@ 0x30
 800262e:	4649      	mov	r1, r9
 8002630:	414b      	adcs	r3, r1
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002640:	4659      	mov	r1, fp
 8002642:	00cb      	lsls	r3, r1, #3
 8002644:	4651      	mov	r1, sl
 8002646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800264a:	4651      	mov	r1, sl
 800264c:	00ca      	lsls	r2, r1, #3
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	4603      	mov	r3, r0
 8002654:	4642      	mov	r2, r8
 8002656:	189b      	adds	r3, r3, r2
 8002658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800265c:	464b      	mov	r3, r9
 800265e:	460a      	mov	r2, r1
 8002660:	eb42 0303 	adc.w	r3, r2, r3
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002674:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800267c:	460b      	mov	r3, r1
 800267e:	18db      	adds	r3, r3, r3
 8002680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002682:	4613      	mov	r3, r2
 8002684:	eb42 0303 	adc.w	r3, r2, r3
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800268e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002692:	f7fd fdc5 	bl	8000220 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <UART_SetConfig+0x2d4>)
 800269c:	fba3 1302 	umull	r1, r3, r3, r2
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	2164      	movs	r1, #100	@ 0x64
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3332      	adds	r3, #50	@ 0x32
 80026ae:	4a08      	ldr	r2, [pc, #32]	@ (80026d0 <UART_SetConfig+0x2d4>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	f003 0207 	and.w	r2, r3, #7
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4422      	add	r2, r4
 80026c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026c4:	e106      	b.n	80028d4 <UART_SetConfig+0x4d8>
 80026c6:	bf00      	nop
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40011400 	.word	0x40011400
 80026d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026e6:	4642      	mov	r2, r8
 80026e8:	464b      	mov	r3, r9
 80026ea:	1891      	adds	r1, r2, r2
 80026ec:	6239      	str	r1, [r7, #32]
 80026ee:	415b      	adcs	r3, r3
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026f6:	4641      	mov	r1, r8
 80026f8:	1854      	adds	r4, r2, r1
 80026fa:	4649      	mov	r1, r9
 80026fc:	eb43 0501 	adc.w	r5, r3, r1
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	00eb      	lsls	r3, r5, #3
 800270a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270e:	00e2      	lsls	r2, r4, #3
 8002710:	4614      	mov	r4, r2
 8002712:	461d      	mov	r5, r3
 8002714:	4643      	mov	r3, r8
 8002716:	18e3      	adds	r3, r4, r3
 8002718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800271c:	464b      	mov	r3, r9
 800271e:	eb45 0303 	adc.w	r3, r5, r3
 8002722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002732:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002742:	4629      	mov	r1, r5
 8002744:	008b      	lsls	r3, r1, #2
 8002746:	4621      	mov	r1, r4
 8002748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800274c:	4621      	mov	r1, r4
 800274e:	008a      	lsls	r2, r1, #2
 8002750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002754:	f7fd fd64 	bl	8000220 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4b60      	ldr	r3, [pc, #384]	@ (80028e0 <UART_SetConfig+0x4e4>)
 800275e:	fba3 2302 	umull	r2, r3, r3, r2
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	011c      	lsls	r4, r3, #4
 8002766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800276a:	2200      	movs	r2, #0
 800276c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002770:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	61b9      	str	r1, [r7, #24]
 8002780:	415b      	adcs	r3, r3
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002788:	4641      	mov	r1, r8
 800278a:	1851      	adds	r1, r2, r1
 800278c:	6139      	str	r1, [r7, #16]
 800278e:	4649      	mov	r1, r9
 8002790:	414b      	adcs	r3, r1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027a0:	4659      	mov	r1, fp
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4651      	mov	r1, sl
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027bc:	464b      	mov	r3, r9
 80027be:	460a      	mov	r2, r1
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027e0:	4649      	mov	r1, r9
 80027e2:	008b      	lsls	r3, r1, #2
 80027e4:	4641      	mov	r1, r8
 80027e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ea:	4641      	mov	r1, r8
 80027ec:	008a      	lsls	r2, r1, #2
 80027ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027f2:	f7fd fd15 	bl	8000220 <__aeabi_uldivmod>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <UART_SetConfig+0x4e4>)
 80027fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2264      	movs	r2, #100	@ 0x64
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	1acb      	subs	r3, r1, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	@ 0x32
 8002810:	4a33      	ldr	r2, [pc, #204]	@ (80028e0 <UART_SetConfig+0x4e4>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800281c:	441c      	add	r4, r3
 800281e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002822:	2200      	movs	r2, #0
 8002824:	673b      	str	r3, [r7, #112]	@ 0x70
 8002826:	677a      	str	r2, [r7, #116]	@ 0x74
 8002828:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	415b      	adcs	r3, r3
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800283c:	4641      	mov	r1, r8
 800283e:	1851      	adds	r1, r2, r1
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	4649      	mov	r1, r9
 8002844:	414b      	adcs	r3, r1
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002854:	4659      	mov	r1, fp
 8002856:	00cb      	lsls	r3, r1, #3
 8002858:	4651      	mov	r1, sl
 800285a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800285e:	4651      	mov	r1, sl
 8002860:	00ca      	lsls	r2, r1, #3
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4603      	mov	r3, r0
 8002868:	4642      	mov	r2, r8
 800286a:	189b      	adds	r3, r3, r2
 800286c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800286e:	464b      	mov	r3, r9
 8002870:	460a      	mov	r2, r1
 8002872:	eb42 0303 	adc.w	r3, r2, r3
 8002876:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	663b      	str	r3, [r7, #96]	@ 0x60
 8002882:	667a      	str	r2, [r7, #100]	@ 0x64
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002890:	4649      	mov	r1, r9
 8002892:	008b      	lsls	r3, r1, #2
 8002894:	4641      	mov	r1, r8
 8002896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800289a:	4641      	mov	r1, r8
 800289c:	008a      	lsls	r2, r1, #2
 800289e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80028a2:	f7fd fcbd 	bl	8000220 <__aeabi_uldivmod>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <UART_SetConfig+0x4e4>)
 80028ac:	fba3 1302 	umull	r1, r3, r3, r2
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	2164      	movs	r1, #100	@ 0x64
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	3332      	adds	r3, #50	@ 0x32
 80028be:	4a08      	ldr	r2, [pc, #32]	@ (80028e0 <UART_SetConfig+0x4e4>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	f003 020f 	and.w	r2, r3, #15
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4422      	add	r2, r4
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028da:	46bd      	mov	sp, r7
 80028dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e0:	51eb851f 	.word	0x51eb851f

080028e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80028f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f6:	2b84      	cmp	r3, #132	@ 0x84
 80028f8:	d005      	beq.n	8002906 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80028fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4413      	add	r3, r2
 8002902:	3303      	adds	r3, #3
 8002904:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800291a:	f3ef 8305 	mrs	r3, IPSR
 800291e:	607b      	str	r3, [r7, #4]
  return(result);
 8002920:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800293c:	f001 f92a 	bl	8003b94 <vTaskStartScheduler>
  
  return osOK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	bd80      	pop	{r7, pc}

08002946 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002948:	b089      	sub	sp, #36	@ 0x24
 800294a:	af04      	add	r7, sp, #16
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d020      	beq.n	800299a <osThreadCreate+0x54>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01c      	beq.n	800299a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685c      	ldr	r4, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691e      	ldr	r6, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ffb6 	bl	80028e4 <makeFreeRtosPriority>
 8002978:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002982:	9202      	str	r2, [sp, #8]
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	9100      	str	r1, [sp, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4632      	mov	r2, r6
 800298c:	4629      	mov	r1, r5
 800298e:	4620      	mov	r0, r4
 8002990:	f000 ff32 	bl	80037f8 <xTaskCreateStatic>
 8002994:	4603      	mov	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e01c      	b.n	80029d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685c      	ldr	r4, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029a6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff98 	bl	80028e4 <makeFreeRtosPriority>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	4632      	mov	r2, r6
 80029c2:	4629      	mov	r1, r5
 80029c4:	4620      	mov	r0, r4
 80029c6:	f000 ff77 	bl	80038b8 <xTaskCreate>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d001      	beq.n	80029d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80029d4:	68fb      	ldr	r3, [r7, #12]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <osDelay+0x16>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	e000      	b.n	80029f6 <osDelay+0x18>
 80029f4:	2301      	movs	r3, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f896 	bl	8003b28 <vTaskDelay>
  
  return osOK;
 80029fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af02      	add	r7, sp, #8
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00f      	beq.n	8002a38 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10a      	bne.n	8002a34 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2203      	movs	r2, #3
 8002a24:	9200      	str	r2, [sp, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f000 f9c0 	bl	8002db0 <xQueueGenericCreateStatic>
 8002a30:	4603      	mov	r3, r0
 8002a32:	e016      	b.n	8002a62 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e014      	b.n	8002a62 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d110      	bne.n	8002a60 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002a3e:	2203      	movs	r2, #3
 8002a40:	2100      	movs	r1, #0
 8002a42:	2001      	movs	r0, #1
 8002a44:	f000 fa31 	bl	8002eaa <xQueueGenericCreate>
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <osSemaphoreCreate+0x56>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fa82 	bl	8002f60 <xQueueGenericSend>
      return sema;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	e000      	b.n	8002a62 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002a60:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	e03a      	b.n	8002afa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a8e:	d103      	bne.n	8002a98 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e009      	b.n	8002aac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <osSemaphoreWait+0x40>
      ticks = 1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002aac:	f7ff ff32 	bl	8002914 <inHandlerMode>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d017      	beq.n	8002ae6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	461a      	mov	r2, r3
 8002abc:	2100      	movs	r1, #0
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fcf0 	bl	80034a4 <xQueueReceiveFromISR>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d001      	beq.n	8002ace <osSemaphoreWait+0x62>
      return osErrorOS;
 8002aca:	23ff      	movs	r3, #255	@ 0xff
 8002acc:	e015      	b.n	8002afa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d011      	beq.n	8002af8 <osSemaphoreWait+0x8c>
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <osSemaphoreWait+0x98>)
 8002ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	e008      	b.n	8002af8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fbcb 	bl	8003284 <xQueueSemaphoreTake>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d001      	beq.n	8002af8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002af4:	23ff      	movs	r3, #255	@ 0xff
 8002af6:	e000      	b.n	8002afa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000ed04 	.word	0xe000ed04

08002b08 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002b18:	f7ff fefc 	bl	8002914 <inHandlerMode>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d016      	beq.n	8002b50 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b22:	f107 0308 	add.w	r3, r7, #8
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fb1b 	bl	8003164 <xQueueGiveFromISR>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d001      	beq.n	8002b38 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002b34:	23ff      	movs	r3, #255	@ 0xff
 8002b36:	e017      	b.n	8002b68 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d013      	beq.n	8002b66 <osSemaphoreRelease+0x5e>
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <osSemaphoreRelease+0x68>)
 8002b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	e00a      	b.n	8002b66 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002b50:	2300      	movs	r3, #0
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa02 	bl	8002f60 <xQueueGenericSend>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002b62:	23ff      	movs	r3, #255	@ 0xff
 8002b64:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f103 0208 	add.w	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f103 0208 	add.w	r2, r3, #8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f103 0208 	add.w	r2, r3, #8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c16:	b480      	push	{r7}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c2c:	d103      	bne.n	8002c36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e00c      	b.n	8002c50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3308      	adds	r3, #8
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e002      	b.n	8002c44 <vListInsert+0x2e>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d2f6      	bcs.n	8002c3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6892      	ldr	r2, [r2, #8]
 8002c9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6852      	ldr	r2, [r2, #4]
 8002ca8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d103      	bne.n	8002cbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1e5a      	subs	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d08:	f001 fea6 	bl	8004a58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	441a      	add	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	441a      	add	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	22ff      	movs	r2, #255	@ 0xff
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	22ff      	movs	r2, #255	@ 0xff
 8002d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01a      	beq.n	8002d9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3310      	adds	r3, #16
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 f95c 	bl	8004028 <xTaskRemoveFromEventList>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d012      	beq.n	8002d9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <xQueueGenericReset+0xd0>)
 8002d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	e009      	b.n	8002d9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3310      	adds	r3, #16
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fef1 	bl	8002b74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3324      	adds	r3, #36	@ 0x24
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff feec 	bl	8002b74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d9c:	f001 fe8e 	bl	8004abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002da0:	2301      	movs	r3, #1
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	e000ed04 	.word	0xe000ed04

08002db0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	@ 0x38
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002dd6:	bf00      	nop
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	e7fd      	b.n	8002df6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <xQueueGenericCreateStatic+0x56>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <xQueueGenericCreateStatic+0x5a>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueGenericCreateStatic+0x5c>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	623b      	str	r3, [r7, #32]
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <xQueueGenericCreateStatic+0x84>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <xQueueGenericCreateStatic+0x88>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <xQueueGenericCreateStatic+0x8a>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	61fb      	str	r3, [r7, #28]
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	e7fd      	b.n	8002e52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e56:	2348      	movs	r3, #72	@ 0x48
 8002e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b48      	cmp	r3, #72	@ 0x48
 8002e5e:	d00b      	beq.n	8002e78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	61bb      	str	r3, [r7, #24]
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f840 	bl	8002f20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3730      	adds	r7, #48	@ 0x30
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b08a      	sub	sp, #40	@ 0x28
 8002eae:	af02      	add	r7, sp, #8
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	613b      	str	r3, [r7, #16]
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	e7fd      	b.n	8002ed2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3348      	adds	r3, #72	@ 0x48
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fed9 	bl	8004c9c <pvPortMalloc>
 8002eea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	3348      	adds	r3, #72	@ 0x48
 8002efa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f04:	79fa      	ldrb	r2, [r7, #7]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f805 	bl	8002f20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f16:	69bb      	ldr	r3, [r7, #24]
	}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e002      	b.n	8002f42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f4e:	2101      	movs	r1, #1
 8002f50:	69b8      	ldr	r0, [r7, #24]
 8002f52:	f7ff fec3 	bl	8002cdc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08e      	sub	sp, #56	@ 0x38
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <xQueueGenericSend+0x34>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d103      	bne.n	8002fa2 <xQueueGenericSend+0x42>
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <xQueueGenericSend+0x46>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xQueueGenericSend+0x48>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <xQueueGenericSend+0x64>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d103      	bne.n	8002fd2 <xQueueGenericSend+0x72>
 8002fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <xQueueGenericSend+0x76>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <xQueueGenericSend+0x78>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <xQueueGenericSend+0x94>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	623b      	str	r3, [r7, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ff4:	f001 f9d8 	bl	80043a8 <xTaskGetSchedulerState>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <xQueueGenericSend+0xa4>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <xQueueGenericSend+0xa8>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <xQueueGenericSend+0xaa>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <xQueueGenericSend+0xc6>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	61fb      	str	r3, [r7, #28]
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003026:	f001 fd17 	bl	8004a58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <xQueueGenericSend+0xdc>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d129      	bne.n	8003090 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003042:	f000 fac9 	bl	80035d8 <prvCopyDataToQueue>
 8003046:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003052:	3324      	adds	r3, #36	@ 0x24
 8003054:	4618      	mov	r0, r3
 8003056:	f000 ffe7 	bl	8004028 <xTaskRemoveFromEventList>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003060:	4b3f      	ldr	r3, [pc, #252]	@ (8003160 <xQueueGenericSend+0x200>)
 8003062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	e00a      	b.n	8003088 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003078:	4b39      	ldr	r3, [pc, #228]	@ (8003160 <xQueueGenericSend+0x200>)
 800307a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003088:	f001 fd18 	bl	8004abc <vPortExitCritical>
				return pdPASS;
 800308c:	2301      	movs	r3, #1
 800308e:	e063      	b.n	8003158 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003096:	f001 fd11 	bl	8004abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800309a:	2300      	movs	r3, #0
 800309c:	e05c      	b.n	8003158 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 f821 	bl	80040f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ae:	2301      	movs	r3, #1
 80030b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030b2:	f001 fd03 	bl	8004abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030b6:	f000 fdcf 	bl	8003c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030ba:	f001 fccd 	bl	8004a58 <vPortEnterCritical>
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030c4:	b25b      	sxtb	r3, r3
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ca:	d103      	bne.n	80030d4 <xQueueGenericSend+0x174>
 80030cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030da:	b25b      	sxtb	r3, r3
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030e0:	d103      	bne.n	80030ea <xQueueGenericSend+0x18a>
 80030e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030ea:	f001 fce7 	bl	8004abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ee:	1d3a      	adds	r2, r7, #4
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f001 f810 	bl	800411c <xTaskCheckForTimeOut>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d124      	bne.n	800314c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003102:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003104:	f000 fb60 	bl	80037c8 <prvIsQueueFull>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d018      	beq.n	8003140 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800310e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003110:	3310      	adds	r3, #16
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f000 ff60 	bl	8003fdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800311c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800311e:	f000 faeb 	bl	80036f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003122:	f000 fda7 	bl	8003c74 <xTaskResumeAll>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	f47f af7c 	bne.w	8003026 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800312e:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <xQueueGenericSend+0x200>)
 8003130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	e772      	b.n	8003026 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003142:	f000 fad9 	bl	80036f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003146:	f000 fd95 	bl	8003c74 <xTaskResumeAll>
 800314a:	e76c      	b.n	8003026 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800314c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800314e:	f000 fad3 	bl	80036f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003152:	f000 fd8f 	bl	8003c74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003156:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003158:	4618      	mov	r0, r3
 800315a:	3738      	adds	r7, #56	@ 0x38
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08e      	sub	sp, #56	@ 0x38
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	623b      	str	r3, [r7, #32]
}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	61fb      	str	r3, [r7, #28]
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80031b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <xQueueGiveFromISR+0x5c>
 80031b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <xQueueGiveFromISR+0x60>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <xQueueGiveFromISR+0x62>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	61bb      	str	r3, [r7, #24]
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031e2:	f001 fd19 	bl	8004c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031e6:	f3ef 8211 	mrs	r2, BASEPRI
 80031ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	617a      	str	r2, [r7, #20]
 80031fc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800320e:	429a      	cmp	r2, r3
 8003210:	d22b      	bcs.n	800326a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003224:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800322c:	d112      	bne.n	8003254 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003238:	3324      	adds	r3, #36	@ 0x24
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fef4 	bl	8004028 <xTaskRemoveFromEventList>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00e      	beq.n	8003264 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00b      	beq.n	8003264 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e007      	b.n	8003264 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003258:	3301      	adds	r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	b25a      	sxtb	r2, r3
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003264:	2301      	movs	r3, #1
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
 8003268:	e001      	b.n	800326e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800326a:	2300      	movs	r3, #0
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003278:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800327a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800327c:	4618      	mov	r0, r3
 800327e:	3738      	adds	r7, #56	@ 0x38
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08e      	sub	sp, #56	@ 0x38
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800328e:	2300      	movs	r3, #0
 8003290:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003296:	2300      	movs	r3, #0
 8003298:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800329a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	623b      	str	r3, [r7, #32]
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	e7fd      	b.n	80032b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80032b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61fb      	str	r3, [r7, #28]
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032d8:	f001 f866 	bl	80043a8 <xTaskGetSchedulerState>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <xQueueSemaphoreTake+0x64>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <xQueueSemaphoreTake+0x68>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <xQueueSemaphoreTake+0x6a>
 80032ec:	2300      	movs	r3, #0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <xQueueSemaphoreTake+0x86>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	61bb      	str	r3, [r7, #24]
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	e7fd      	b.n	8003306 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800330a:	f001 fba5 	bl	8004a58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800330e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d024      	beq.n	8003364 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800331a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331c:	1e5a      	subs	r2, r3, #1
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d104      	bne.n	8003334 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800332a:	f001 f9e9 	bl	8004700 <pvTaskIncrementMutexHeldCount>
 800332e:	4602      	mov	r2, r0
 8003330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003332:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00f      	beq.n	800335c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800333c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333e:	3310      	adds	r3, #16
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fe71 	bl	8004028 <xTaskRemoveFromEventList>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800334c:	4b54      	ldr	r3, [pc, #336]	@ (80034a0 <xQueueSemaphoreTake+0x21c>)
 800334e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800335c:	f001 fbae 	bl	8004abc <vPortExitCritical>
				return pdPASS;
 8003360:	2301      	movs	r3, #1
 8003362:	e098      	b.n	8003496 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d112      	bne.n	8003390 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	617b      	str	r3, [r7, #20]
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003388:	f001 fb98 	bl	8004abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800338c:	2300      	movs	r3, #0
 800338e:	e082      	b.n	8003496 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fea8 	bl	80040f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033a4:	f001 fb8a 	bl	8004abc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033a8:	f000 fc56 	bl	8003c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033ac:	f001 fb54 	bl	8004a58 <vPortEnterCritical>
 80033b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033bc:	d103      	bne.n	80033c6 <xQueueSemaphoreTake+0x142>
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033d2:	d103      	bne.n	80033dc <xQueueSemaphoreTake+0x158>
 80033d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033dc:	f001 fb6e 	bl	8004abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033e0:	463a      	mov	r2, r7
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fe97 	bl	800411c <xTaskCheckForTimeOut>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d132      	bne.n	800345a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033f6:	f000 f9d1 	bl	800379c <prvIsQueueEmpty>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d026      	beq.n	800344e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003408:	f001 fb26 	bl	8004a58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 ffe7 	bl	80043e4 <xTaskPriorityInherit>
 8003416:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003418:	f001 fb50 	bl	8004abc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341e:	3324      	adds	r3, #36	@ 0x24
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fdd9 	bl	8003fdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800342a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800342c:	f000 f964 	bl	80036f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003430:	f000 fc20 	bl	8003c74 <xTaskResumeAll>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f47f af67 	bne.w	800330a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800343c:	4b18      	ldr	r3, [pc, #96]	@ (80034a0 <xQueueSemaphoreTake+0x21c>)
 800343e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	e75d      	b.n	800330a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800344e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003450:	f000 f952 	bl	80036f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003454:	f000 fc0e 	bl	8003c74 <xTaskResumeAll>
 8003458:	e757      	b.n	800330a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800345a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800345c:	f000 f94c 	bl	80036f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003460:	f000 fc08 	bl	8003c74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003464:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003466:	f000 f999 	bl	800379c <prvIsQueueEmpty>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	f43f af4c 	beq.w	800330a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003478:	f001 faee 	bl	8004a58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800347c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800347e:	f000 f893 	bl	80035a8 <prvGetDisinheritPriorityAfterTimeout>
 8003482:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800348a:	4618      	mov	r0, r3
 800348c:	f001 f8a8 	bl	80045e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003490:	f001 fb14 	bl	8004abc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003494:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003496:	4618      	mov	r0, r3
 8003498:	3738      	adds	r7, #56	@ 0x38
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08e      	sub	sp, #56	@ 0x38
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	623b      	str	r3, [r7, #32]
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <xQueueReceiveFromISR+0x3c>
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <xQueueReceiveFromISR+0x40>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <xQueueReceiveFromISR+0x42>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	61fb      	str	r3, [r7, #28]
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	e7fd      	b.n	80034fe <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003502:	f001 fb89 	bl	8004c18 <vPortValidateInterruptPriority>
	__asm volatile
 8003506:	f3ef 8211 	mrs	r2, BASEPRI
 800350a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	61ba      	str	r2, [r7, #24]
 800351c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800351e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003520:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d02f      	beq.n	800358e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800353c:	f000 f8b6 	bl	80036ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003542:	1e5a      	subs	r2, r3, #1
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003548:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003550:	d112      	bne.n	8003578 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	3310      	adds	r3, #16
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd62 	bl	8004028 <xTaskRemoveFromEventList>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e007      	b.n	8003588 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800357c:	3301      	adds	r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	b25a      	sxtb	r2, r3
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003588:	2301      	movs	r3, #1
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
 800358c:	e001      	b.n	8003592 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800358e:	2300      	movs	r3, #0
 8003590:	637b      	str	r3, [r7, #52]	@ 0x34
 8003592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003594:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f383 8811 	msr	BASEPRI, r3
}
 800359c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800359e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3738      	adds	r7, #56	@ 0x38
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1c3 0307 	rsb	r3, r3, #7
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e001      	b.n	80035ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80035ca:	68fb      	ldr	r3, [r7, #12]
	}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d14d      	bne.n	800369a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 ff64 	bl	80044d0 <xTaskPriorityDisinherit>
 8003608:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	e043      	b.n	800369a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d119      	bne.n	800364c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6858      	ldr	r0, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	461a      	mov	r2, r3
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	f002 fa37 	bl	8005a96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	441a      	add	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d32b      	bcc.n	800369a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	e026      	b.n	800369a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68d8      	ldr	r0, [r3, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	461a      	mov	r2, r3
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	f002 fa1d 	bl	8005a96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	425b      	negs	r3, r3
 8003666:	441a      	add	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d207      	bcs.n	8003688 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	425b      	negs	r3, r3
 8003682:	441a      	add	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d105      	bne.n	800369a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	3b01      	subs	r3, #1
 8003698:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036a2:	697b      	ldr	r3, [r7, #20]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d018      	beq.n	80036f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	441a      	add	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d303      	bcc.n	80036e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68d9      	ldr	r1, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	461a      	mov	r2, r3
 80036ea:	6838      	ldr	r0, [r7, #0]
 80036ec:	f002 f9d3 	bl	8005a96 <memcpy>
	}
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003700:	f001 f9aa 	bl	8004a58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800370a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800370c:	e011      	b.n	8003732 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	d012      	beq.n	800373c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3324      	adds	r3, #36	@ 0x24
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fc84 	bl	8004028 <xTaskRemoveFromEventList>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003726:	f000 fd5d 	bl	80041e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	3b01      	subs	r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	dce9      	bgt.n	800370e <prvUnlockQueue+0x16>
 800373a:	e000      	b.n	800373e <prvUnlockQueue+0x46>
					break;
 800373c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	22ff      	movs	r2, #255	@ 0xff
 8003742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003746:	f001 f9b9 	bl	8004abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800374a:	f001 f985 	bl	8004a58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003754:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003756:	e011      	b.n	800377c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d012      	beq.n	8003786 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3310      	adds	r3, #16
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fc5f 	bl	8004028 <xTaskRemoveFromEventList>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003770:	f000 fd38 	bl	80041e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003774:	7bbb      	ldrb	r3, [r7, #14]
 8003776:	3b01      	subs	r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800377c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003780:	2b00      	cmp	r3, #0
 8003782:	dce9      	bgt.n	8003758 <prvUnlockQueue+0x60>
 8003784:	e000      	b.n	8003788 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003786:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	22ff      	movs	r2, #255	@ 0xff
 800378c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003790:	f001 f994 	bl	8004abc <vPortExitCritical>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037a4:	f001 f958 	bl	8004a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037b0:	2301      	movs	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e001      	b.n	80037ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ba:	f001 f97f 	bl	8004abc <vPortExitCritical>

	return xReturn;
 80037be:	68fb      	ldr	r3, [r7, #12]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037d0:	f001 f942 	bl	8004a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	429a      	cmp	r2, r3
 80037de:	d102      	bne.n	80037e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037e0:	2301      	movs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e001      	b.n	80037ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ea:	f001 f967 	bl	8004abc <vPortExitCritical>

	return xReturn;
 80037ee:	68fb      	ldr	r3, [r7, #12]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08e      	sub	sp, #56	@ 0x38
 80037fc:	af04      	add	r7, sp, #16
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <xTaskCreateStatic+0x2c>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	623b      	str	r3, [r7, #32]
}
 800381e:	bf00      	nop
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <xTaskCreateStatic+0x4a>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	61fb      	str	r3, [r7, #28]
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	e7fd      	b.n	800383e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003842:	2354      	movs	r3, #84	@ 0x54
 8003844:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b54      	cmp	r3, #84	@ 0x54
 800384a:	d00b      	beq.n	8003864 <xTaskCreateStatic+0x6c>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61bb      	str	r3, [r7, #24]
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003864:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01e      	beq.n	80038aa <xTaskCreateStatic+0xb2>
 800386c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01b      	beq.n	80038aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003884:	2300      	movs	r3, #0
 8003886:	9303      	str	r3, [sp, #12]
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	9302      	str	r3, [sp, #8]
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f850 	bl	8003942 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038a4:	f000 f8d6 	bl	8003a54 <prvAddNewTaskToReadyList>
 80038a8:	e001      	b.n	80038ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038ae:	697b      	ldr	r3, [r7, #20]
	}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3728      	adds	r7, #40	@ 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08c      	sub	sp, #48	@ 0x30
 80038bc:	af04      	add	r7, sp, #16
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 f9e5 	bl	8004c9c <pvPortMalloc>
 80038d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038da:	2054      	movs	r0, #84	@ 0x54
 80038dc:	f001 f9de 	bl	8004c9c <pvPortMalloc>
 80038e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80038ee:	e005      	b.n	80038fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038f0:	6978      	ldr	r0, [r7, #20]
 80038f2:	f001 faa1 	bl	8004e38 <vPortFree>
 80038f6:	e001      	b.n	80038fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d017      	beq.n	8003932 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	2300      	movs	r3, #0
 800390e:	9303      	str	r3, [sp, #12]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	9302      	str	r3, [sp, #8]
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f80e 	bl	8003942 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003926:	69f8      	ldr	r0, [r7, #28]
 8003928:	f000 f894 	bl	8003a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800392c:	2301      	movs	r3, #1
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	e002      	b.n	8003938 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003936:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003938:	69bb      	ldr	r3, [r7, #24]
	}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b088      	sub	sp, #32
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800395a:	3b01      	subs	r3, #1
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f023 0307 	bic.w	r3, r3, #7
 8003968:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	617b      	str	r3, [r7, #20]
}
 8003986:	bf00      	nop
 8003988:	bf00      	nop
 800398a:	e7fd      	b.n	8003988 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01f      	beq.n	80039d2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e012      	b.n	80039be <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	7819      	ldrb	r1, [r3, #0]
 80039a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	3334      	adds	r3, #52	@ 0x34
 80039a8:	460a      	mov	r2, r1
 80039aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	3301      	adds	r3, #1
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b0f      	cmp	r3, #15
 80039c2:	d9e9      	bls.n	8003998 <prvInitialiseNewTask+0x56>
 80039c4:	e000      	b.n	80039c8 <prvInitialiseNewTask+0x86>
			{
				break;
 80039c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039d0:	e003      	b.n	80039da <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d901      	bls.n	80039e4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039e0:	2306      	movs	r3, #6
 80039e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ee:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80039f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f2:	2200      	movs	r2, #0
 80039f4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	3304      	adds	r3, #4
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f8da 	bl	8002bb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	3318      	adds	r3, #24
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff f8d5 	bl	8002bb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	f1c3 0207 	rsb	r2, r3, #7
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	2200      	movs	r2, #0
 8003a24:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	69b8      	ldr	r0, [r7, #24]
 8003a34:	f000 fede 	bl	80047f4 <pxPortInitialiseStack>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a4a:	bf00      	nop
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a5c:	f000 fffc 	bl	8004a58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a60:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <prvAddNewTaskToReadyList+0xb8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	4a29      	ldr	r2, [pc, #164]	@ (8003b0c <prvAddNewTaskToReadyList+0xb8>)
 8003a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a6a:	4b29      	ldr	r3, [pc, #164]	@ (8003b10 <prvAddNewTaskToReadyList+0xbc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a72:	4a27      	ldr	r2, [pc, #156]	@ (8003b10 <prvAddNewTaskToReadyList+0xbc>)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a78:	4b24      	ldr	r3, [pc, #144]	@ (8003b0c <prvAddNewTaskToReadyList+0xb8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d110      	bne.n	8003aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a80:	f000 fbd4 	bl	800422c <prvInitialiseTaskLists>
 8003a84:	e00d      	b.n	8003aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a86:	4b23      	ldr	r3, [pc, #140]	@ (8003b14 <prvAddNewTaskToReadyList+0xc0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a8e:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <prvAddNewTaskToReadyList+0xbc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d802      	bhi.n	8003aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <prvAddNewTaskToReadyList+0xbc>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <prvAddNewTaskToReadyList+0xc4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b18 <prvAddNewTaskToReadyList+0xc4>)
 8003aaa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <prvAddNewTaskToReadyList+0xc8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	4a18      	ldr	r2, [pc, #96]	@ (8003b1c <prvAddNewTaskToReadyList+0xc8>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4a15      	ldr	r2, [pc, #84]	@ (8003b20 <prvAddNewTaskToReadyList+0xcc>)
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f7ff f87a 	bl	8002bce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ada:	f000 ffef 	bl	8004abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <prvAddNewTaskToReadyList+0xc0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00e      	beq.n	8003b04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <prvAddNewTaskToReadyList+0xbc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d207      	bcs.n	8003b04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <prvAddNewTaskToReadyList+0xd0>)
 8003af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000488 	.word	0x20000488
 8003b10:	20000388 	.word	0x20000388
 8003b14:	20000494 	.word	0x20000494
 8003b18:	200004a4 	.word	0x200004a4
 8003b1c:	20000490 	.word	0x20000490
 8003b20:	2000038c 	.word	0x2000038c
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d018      	beq.n	8003b6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b3a:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <vTaskDelay+0x64>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <vTaskDelay+0x32>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	60bb      	str	r3, [r7, #8]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b5a:	f000 f87d 	bl	8003c58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b5e:	2100      	movs	r1, #0
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fde1 	bl	8004728 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b66:	f000 f885 	bl	8003c74 <xTaskResumeAll>
 8003b6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b72:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <vTaskDelay+0x68>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200004b0 	.word	0x200004b0
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	@ 0x28
 8003b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ba2:	463a      	mov	r2, r7
 8003ba4:	1d39      	adds	r1, r7, #4
 8003ba6:	f107 0308 	add.w	r3, r7, #8
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fcce 	bl	800054c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bb0:	6839      	ldr	r1, [r7, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	9202      	str	r2, [sp, #8]
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	460a      	mov	r2, r1
 8003bc2:	491f      	ldr	r1, [pc, #124]	@ (8003c40 <vTaskStartScheduler+0xac>)
 8003bc4:	481f      	ldr	r0, [pc, #124]	@ (8003c44 <vTaskStartScheduler+0xb0>)
 8003bc6:	f7ff fe17 	bl	80037f8 <xTaskCreateStatic>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8003c48 <vTaskStartScheduler+0xb4>)
 8003bce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c48 <vTaskStartScheduler+0xb4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e001      	b.n	8003be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d116      	bne.n	8003c16 <vTaskStartScheduler+0x82>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	613b      	str	r3, [r7, #16]
}
 8003bfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bfc:	4b13      	ldr	r3, [pc, #76]	@ (8003c4c <vTaskStartScheduler+0xb8>)
 8003bfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c04:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <vTaskStartScheduler+0xbc>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c0a:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <vTaskStartScheduler+0xc0>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c10:	f000 fe7e 	bl	8004910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c14:	e00f      	b.n	8003c36 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c1c:	d10b      	bne.n	8003c36 <vTaskStartScheduler+0xa2>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60fb      	str	r3, [r7, #12]
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	e7fd      	b.n	8003c32 <vTaskStartScheduler+0x9e>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	08005f94 	.word	0x08005f94
 8003c44:	080041fd 	.word	0x080041fd
 8003c48:	200004ac 	.word	0x200004ac
 8003c4c:	200004a8 	.word	0x200004a8
 8003c50:	20000494 	.word	0x20000494
 8003c54:	2000048c 	.word	0x2000048c

08003c58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c5c:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <vTaskSuspendAll+0x18>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	4a03      	ldr	r2, [pc, #12]	@ (8003c70 <vTaskSuspendAll+0x18>)
 8003c64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	200004b0 	.word	0x200004b0

08003c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c82:	4b42      	ldr	r3, [pc, #264]	@ (8003d8c <xTaskResumeAll+0x118>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	603b      	str	r3, [r7, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	e7fd      	b.n	8003c9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ca2:	f000 fed9 	bl	8004a58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ca6:	4b39      	ldr	r3, [pc, #228]	@ (8003d8c <xTaskResumeAll+0x118>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	4a37      	ldr	r2, [pc, #220]	@ (8003d8c <xTaskResumeAll+0x118>)
 8003cae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <xTaskResumeAll+0x118>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d161      	bne.n	8003d7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cb8:	4b35      	ldr	r3, [pc, #212]	@ (8003d90 <xTaskResumeAll+0x11c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05d      	beq.n	8003d7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc0:	e02e      	b.n	8003d20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc2:	4b34      	ldr	r3, [pc, #208]	@ (8003d94 <xTaskResumeAll+0x120>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe ffda 	bl	8002c88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe ffd5 	bl	8002c88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d98 <xTaskResumeAll+0x124>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	4a2a      	ldr	r2, [pc, #168]	@ (8003d98 <xTaskResumeAll+0x124>)
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4a27      	ldr	r2, [pc, #156]	@ (8003d9c <xTaskResumeAll+0x128>)
 8003cfe:	441a      	add	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7fe ff61 	bl	8002bce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d10:	4b23      	ldr	r3, [pc, #140]	@ (8003da0 <xTaskResumeAll+0x12c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d1a:	4b22      	ldr	r3, [pc, #136]	@ (8003da4 <xTaskResumeAll+0x130>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d20:	4b1c      	ldr	r3, [pc, #112]	@ (8003d94 <xTaskResumeAll+0x120>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1cc      	bne.n	8003cc2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d2e:	f000 fb1b 	bl	8004368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d32:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <xTaskResumeAll+0x134>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d3e:	f000 f837 	bl	8003db0 <xTaskIncrementTick>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d48:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <xTaskResumeAll+0x130>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f1      	bne.n	8003d3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d5a:	4b13      	ldr	r3, [pc, #76]	@ (8003da8 <xTaskResumeAll+0x134>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d60:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <xTaskResumeAll+0x130>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dac <xTaskResumeAll+0x138>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d7c:	f000 fe9e 	bl	8004abc <vPortExitCritical>

	return xAlreadyYielded;
 8003d80:	68bb      	ldr	r3, [r7, #8]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200004b0 	.word	0x200004b0
 8003d90:	20000488 	.word	0x20000488
 8003d94:	20000448 	.word	0x20000448
 8003d98:	20000490 	.word	0x20000490
 8003d9c:	2000038c 	.word	0x2000038c
 8003da0:	20000388 	.word	0x20000388
 8003da4:	2000049c 	.word	0x2000049c
 8003da8:	20000498 	.word	0x20000498
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dba:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef8 <xTaskIncrementTick+0x148>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 808f 	bne.w	8003ee2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8003efc <xTaskIncrementTick+0x14c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8003efc <xTaskIncrementTick+0x14c>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d121      	bne.n	8003e1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dd8:	4b49      	ldr	r3, [pc, #292]	@ (8003f00 <xTaskIncrementTick+0x150>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	603b      	str	r3, [r7, #0]
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <xTaskIncrementTick+0x46>
 8003dfa:	4b41      	ldr	r3, [pc, #260]	@ (8003f00 <xTaskIncrementTick+0x150>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	4b40      	ldr	r3, [pc, #256]	@ (8003f04 <xTaskIncrementTick+0x154>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3e      	ldr	r2, [pc, #248]	@ (8003f00 <xTaskIncrementTick+0x150>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4a3e      	ldr	r2, [pc, #248]	@ (8003f04 <xTaskIncrementTick+0x154>)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f08 <xTaskIncrementTick+0x158>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3301      	adds	r3, #1
 8003e14:	4a3c      	ldr	r2, [pc, #240]	@ (8003f08 <xTaskIncrementTick+0x158>)
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	f000 faa6 	bl	8004368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f0c <xTaskIncrementTick+0x15c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d348      	bcc.n	8003eb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e26:	4b36      	ldr	r3, [pc, #216]	@ (8003f00 <xTaskIncrementTick+0x150>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e30:	4b36      	ldr	r3, [pc, #216]	@ (8003f0c <xTaskIncrementTick+0x15c>)
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e36:	601a      	str	r2, [r3, #0]
					break;
 8003e38:	e03e      	b.n	8003eb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e3a:	4b31      	ldr	r3, [pc, #196]	@ (8003f00 <xTaskIncrementTick+0x150>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d203      	bcs.n	8003e5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e52:	4a2e      	ldr	r2, [pc, #184]	@ (8003f0c <xTaskIncrementTick+0x15c>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e58:	e02e      	b.n	8003eb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe ff12 	bl	8002c88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	3318      	adds	r3, #24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe ff09 	bl	8002c88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <xTaskIncrementTick+0x160>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	4a22      	ldr	r2, [pc, #136]	@ (8003f10 <xTaskIncrementTick+0x160>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4a1f      	ldr	r2, [pc, #124]	@ (8003f14 <xTaskIncrementTick+0x164>)
 8003e96:	441a      	add	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7fe fe95 	bl	8002bce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <xTaskIncrementTick+0x168>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d3b9      	bcc.n	8003e26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb6:	e7b6      	b.n	8003e26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eb8:	4b17      	ldr	r3, [pc, #92]	@ (8003f18 <xTaskIncrementTick+0x168>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebe:	4915      	ldr	r1, [pc, #84]	@ (8003f14 <xTaskIncrementTick+0x164>)
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d901      	bls.n	8003ed4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ed4:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <xTaskIncrementTick+0x16c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	e004      	b.n	8003eec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <xTaskIncrementTick+0x170>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f20 <xTaskIncrementTick+0x170>)
 8003eea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003eec:	697b      	ldr	r3, [r7, #20]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200004b0 	.word	0x200004b0
 8003efc:	2000048c 	.word	0x2000048c
 8003f00:	20000440 	.word	0x20000440
 8003f04:	20000444 	.word	0x20000444
 8003f08:	200004a0 	.word	0x200004a0
 8003f0c:	200004a8 	.word	0x200004a8
 8003f10:	20000490 	.word	0x20000490
 8003f14:	2000038c 	.word	0x2000038c
 8003f18:	20000388 	.word	0x20000388
 8003f1c:	2000049c 	.word	0x2000049c
 8003f20:	20000498 	.word	0x20000498

08003f24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f2a:	4b27      	ldr	r3, [pc, #156]	@ (8003fc8 <vTaskSwitchContext+0xa4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f32:	4b26      	ldr	r3, [pc, #152]	@ (8003fcc <vTaskSwitchContext+0xa8>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f38:	e040      	b.n	8003fbc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003f3a:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <vTaskSwitchContext+0xa8>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f40:	4b23      	ldr	r3, [pc, #140]	@ (8003fd0 <vTaskSwitchContext+0xac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	f1c3 031f 	rsb	r3, r3, #31
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	491f      	ldr	r1, [pc, #124]	@ (8003fd4 <vTaskSwitchContext+0xb0>)
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	607b      	str	r3, [r7, #4]
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	e7fd      	b.n	8003f7e <vTaskSwitchContext+0x5a>
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4a11      	ldr	r2, [pc, #68]	@ (8003fd4 <vTaskSwitchContext+0xb0>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d104      	bne.n	8003fb2 <vTaskSwitchContext+0x8e>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a07      	ldr	r2, [pc, #28]	@ (8003fd8 <vTaskSwitchContext+0xb4>)
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	200004b0 	.word	0x200004b0
 8003fcc:	2000049c 	.word	0x2000049c
 8003fd0:	20000490 	.word	0x20000490
 8003fd4:	2000038c 	.word	0x2000038c
 8003fd8:	20000388 	.word	0x20000388

08003fdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	60fb      	str	r3, [r7, #12]
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004004:	4b07      	ldr	r3, [pc, #28]	@ (8004024 <vTaskPlaceOnEventList+0x48>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3318      	adds	r3, #24
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7fe fe02 	bl	8002c16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004012:	2101      	movs	r1, #1
 8004014:	6838      	ldr	r0, [r7, #0]
 8004016:	f000 fb87 	bl	8004728 <prvAddCurrentTaskToDelayedList>
}
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000388 	.word	0x20000388

08004028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10b      	bne.n	8004056 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	60fb      	str	r3, [r7, #12]
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	e7fd      	b.n	8004052 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3318      	adds	r3, #24
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fe14 	bl	8002c88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004060:	4b1d      	ldr	r3, [pc, #116]	@ (80040d8 <xTaskRemoveFromEventList+0xb0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d11c      	bne.n	80040a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	3304      	adds	r3, #4
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fe0b 	bl	8002c88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	2201      	movs	r2, #1
 8004078:	409a      	lsls	r2, r3
 800407a:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <xTaskRemoveFromEventList+0xb4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	4a16      	ldr	r2, [pc, #88]	@ (80040dc <xTaskRemoveFromEventList+0xb4>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4a13      	ldr	r2, [pc, #76]	@ (80040e0 <xTaskRemoveFromEventList+0xb8>)
 8004092:	441a      	add	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7fe fd97 	bl	8002bce <vListInsertEnd>
 80040a0:	e005      	b.n	80040ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3318      	adds	r3, #24
 80040a6:	4619      	mov	r1, r3
 80040a8:	480e      	ldr	r0, [pc, #56]	@ (80040e4 <xTaskRemoveFromEventList+0xbc>)
 80040aa:	f7fe fd90 	bl	8002bce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b2:	4b0d      	ldr	r3, [pc, #52]	@ (80040e8 <xTaskRemoveFromEventList+0xc0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d905      	bls.n	80040c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040c0:	4b0a      	ldr	r3, [pc, #40]	@ (80040ec <xTaskRemoveFromEventList+0xc4>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e001      	b.n	80040cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040cc:	697b      	ldr	r3, [r7, #20]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200004b0 	.word	0x200004b0
 80040dc:	20000490 	.word	0x20000490
 80040e0:	2000038c 	.word	0x2000038c
 80040e4:	20000448 	.word	0x20000448
 80040e8:	20000388 	.word	0x20000388
 80040ec:	2000049c 	.word	0x2000049c

080040f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <vTaskInternalSetTimeOutState+0x24>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004100:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <vTaskInternalSetTimeOutState+0x28>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	605a      	str	r2, [r3, #4]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	200004a0 	.word	0x200004a0
 8004118:	2000048c 	.word	0x2000048c

0800411c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	613b      	str	r3, [r7, #16]
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	60fb      	str	r3, [r7, #12]
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	e7fd      	b.n	800415e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004162:	f000 fc79 	bl	8004a58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004166:	4b1d      	ldr	r3, [pc, #116]	@ (80041dc <xTaskCheckForTimeOut+0xc0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800417e:	d102      	bne.n	8004186 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	e023      	b.n	80041ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b15      	ldr	r3, [pc, #84]	@ (80041e0 <xTaskCheckForTimeOut+0xc4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d007      	beq.n	80041a2 <xTaskCheckForTimeOut+0x86>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	e015      	b.n	80041ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d20b      	bcs.n	80041c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad2      	subs	r2, r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ff99 	bl	80040f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e004      	b.n	80041ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041ca:	2301      	movs	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041ce:	f000 fc75 	bl	8004abc <vPortExitCritical>

	return xReturn;
 80041d2:	69fb      	ldr	r3, [r7, #28]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	2000048c 	.word	0x2000048c
 80041e0:	200004a0 	.word	0x200004a0

080041e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <vTaskMissedYield+0x14>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	2000049c 	.word	0x2000049c

080041fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004204:	f000 f852 	bl	80042ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004208:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <prvIdleTask+0x28>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d9f9      	bls.n	8004204 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <prvIdleTask+0x2c>)
 8004212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004220:	e7f0      	b.n	8004204 <prvIdleTask+0x8>
 8004222:	bf00      	nop
 8004224:	2000038c 	.word	0x2000038c
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004232:	2300      	movs	r3, #0
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e00c      	b.n	8004252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4a12      	ldr	r2, [pc, #72]	@ (800428c <prvInitialiseTaskLists+0x60>)
 8004244:	4413      	add	r3, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe fc94 	bl	8002b74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3301      	adds	r3, #1
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b06      	cmp	r3, #6
 8004256:	d9ef      	bls.n	8004238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004258:	480d      	ldr	r0, [pc, #52]	@ (8004290 <prvInitialiseTaskLists+0x64>)
 800425a:	f7fe fc8b 	bl	8002b74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800425e:	480d      	ldr	r0, [pc, #52]	@ (8004294 <prvInitialiseTaskLists+0x68>)
 8004260:	f7fe fc88 	bl	8002b74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004264:	480c      	ldr	r0, [pc, #48]	@ (8004298 <prvInitialiseTaskLists+0x6c>)
 8004266:	f7fe fc85 	bl	8002b74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800426a:	480c      	ldr	r0, [pc, #48]	@ (800429c <prvInitialiseTaskLists+0x70>)
 800426c:	f7fe fc82 	bl	8002b74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004270:	480b      	ldr	r0, [pc, #44]	@ (80042a0 <prvInitialiseTaskLists+0x74>)
 8004272:	f7fe fc7f 	bl	8002b74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004276:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <prvInitialiseTaskLists+0x78>)
 8004278:	4a05      	ldr	r2, [pc, #20]	@ (8004290 <prvInitialiseTaskLists+0x64>)
 800427a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <prvInitialiseTaskLists+0x7c>)
 800427e:	4a05      	ldr	r2, [pc, #20]	@ (8004294 <prvInitialiseTaskLists+0x68>)
 8004280:	601a      	str	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2000038c 	.word	0x2000038c
 8004290:	20000418 	.word	0x20000418
 8004294:	2000042c 	.word	0x2000042c
 8004298:	20000448 	.word	0x20000448
 800429c:	2000045c 	.word	0x2000045c
 80042a0:	20000474 	.word	0x20000474
 80042a4:	20000440 	.word	0x20000440
 80042a8:	20000444 	.word	0x20000444

080042ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042b2:	e019      	b.n	80042e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042b4:	f000 fbd0 	bl	8004a58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b8:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <prvCheckTasksWaitingTermination+0x50>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe fcdf 	bl	8002c88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <prvCheckTasksWaitingTermination+0x54>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004300 <prvCheckTasksWaitingTermination+0x54>)
 80042d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <prvCheckTasksWaitingTermination+0x58>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3b01      	subs	r3, #1
 80042da:	4a0a      	ldr	r2, [pc, #40]	@ (8004304 <prvCheckTasksWaitingTermination+0x58>)
 80042dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042de:	f000 fbed 	bl	8004abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f810 	bl	8004308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042e8:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <prvCheckTasksWaitingTermination+0x58>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e1      	bne.n	80042b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2000045c 	.word	0x2000045c
 8004300:	20000488 	.word	0x20000488
 8004304:	20000470 	.word	0x20000470

08004308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fd8a 	bl	8004e38 <vPortFree>
				vPortFree( pxTCB );
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fd87 	bl	8004e38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800432a:	e019      	b.n	8004360 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004332:	2b01      	cmp	r3, #1
 8004334:	d103      	bne.n	800433e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fd7e 	bl	8004e38 <vPortFree>
	}
 800433c:	e010      	b.n	8004360 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004344:	2b02      	cmp	r3, #2
 8004346:	d00b      	beq.n	8004360 <prvDeleteTCB+0x58>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <prvDeleteTCB+0x54>
	}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800436e:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <prvResetNextTaskUnblockTime+0x38>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004378:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <prvResetNextTaskUnblockTime+0x3c>)
 800437a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800437e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004380:	e008      	b.n	8004394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004382:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <prvResetNextTaskUnblockTime+0x38>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a04      	ldr	r2, [pc, #16]	@ (80043a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004392:	6013      	str	r3, [r2, #0]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20000440 	.word	0x20000440
 80043a4:	200004a8 	.word	0x200004a8

080043a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043ae:	4b0b      	ldr	r3, [pc, #44]	@ (80043dc <xTaskGetSchedulerState+0x34>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043b6:	2301      	movs	r3, #1
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	e008      	b.n	80043ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043bc:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <xTaskGetSchedulerState+0x38>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043c4:	2302      	movs	r3, #2
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	e001      	b.n	80043ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043ca:	2300      	movs	r3, #0
 80043cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043ce:	687b      	ldr	r3, [r7, #4]
	}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20000494 	.word	0x20000494
 80043e0:	200004b0 	.word	0x200004b0

080043e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d05e      	beq.n	80044b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fe:	4b31      	ldr	r3, [pc, #196]	@ (80044c4 <xTaskPriorityInherit+0xe0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	429a      	cmp	r2, r3
 8004406:	d24e      	bcs.n	80044a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	db06      	blt.n	800441e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004410:	4b2c      	ldr	r3, [pc, #176]	@ (80044c4 <xTaskPriorityInherit+0xe0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	f1c3 0207 	rsb	r2, r3, #7
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6959      	ldr	r1, [r3, #20]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4a26      	ldr	r2, [pc, #152]	@ (80044c8 <xTaskPriorityInherit+0xe4>)
 8004430:	4413      	add	r3, r2
 8004432:	4299      	cmp	r1, r3
 8004434:	d12f      	bne.n	8004496 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3304      	adds	r3, #4
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fc24 	bl	8002c88 <uxListRemove>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444a:	2201      	movs	r2, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43da      	mvns	r2, r3
 8004452:	4b1e      	ldr	r3, [pc, #120]	@ (80044cc <xTaskPriorityInherit+0xe8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4013      	ands	r3, r2
 8004458:	4a1c      	ldr	r2, [pc, #112]	@ (80044cc <xTaskPriorityInherit+0xe8>)
 800445a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800445c:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <xTaskPriorityInherit+0xe0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	2201      	movs	r2, #1
 800446c:	409a      	lsls	r2, r3
 800446e:	4b17      	ldr	r3, [pc, #92]	@ (80044cc <xTaskPriorityInherit+0xe8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <xTaskPriorityInherit+0xe8>)
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4a10      	ldr	r2, [pc, #64]	@ (80044c8 <xTaskPriorityInherit+0xe4>)
 8004486:	441a      	add	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f7fe fb9d 	bl	8002bce <vListInsertEnd>
 8004494:	e004      	b.n	80044a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004496:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <xTaskPriorityInherit+0xe0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e008      	b.n	80044b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <xTaskPriorityInherit+0xe0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d201      	bcs.n	80044b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044b8:	68fb      	ldr	r3, [r7, #12]
	}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000388 	.word	0x20000388
 80044c8:	2000038c 	.word	0x2000038c
 80044cc:	20000490 	.word	0x20000490

080044d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d070      	beq.n	80045c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044e6:	4b3b      	ldr	r3, [pc, #236]	@ (80045d4 <xTaskPriorityDisinherit+0x104>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d00b      	beq.n	8004508 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	60fb      	str	r3, [r7, #12]
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60bb      	str	r3, [r7, #8]
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800452c:	1e5a      	subs	r2, r3, #1
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	429a      	cmp	r2, r3
 800453c:	d044      	beq.n	80045c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004542:	2b00      	cmp	r3, #0
 8004544:	d140      	bne.n	80045c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3304      	adds	r3, #4
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fb9c 	bl	8002c88 <uxListRemove>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d115      	bne.n	8004582 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455a:	491f      	ldr	r1, [pc, #124]	@ (80045d8 <xTaskPriorityDisinherit+0x108>)
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xTaskPriorityDisinherit+0xb2>
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	2201      	movs	r2, #1
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43da      	mvns	r2, r3
 8004578:	4b18      	ldr	r3, [pc, #96]	@ (80045dc <xTaskPriorityDisinherit+0x10c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4013      	ands	r3, r2
 800457e:	4a17      	ldr	r2, [pc, #92]	@ (80045dc <xTaskPriorityDisinherit+0x10c>)
 8004580:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	f1c3 0207 	rsb	r2, r3, #7
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	2201      	movs	r2, #1
 800459c:	409a      	lsls	r2, r3
 800459e:	4b0f      	ldr	r3, [pc, #60]	@ (80045dc <xTaskPriorityDisinherit+0x10c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <xTaskPriorityDisinherit+0x10c>)
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4a08      	ldr	r2, [pc, #32]	@ (80045d8 <xTaskPriorityDisinherit+0x108>)
 80045b6:	441a      	add	r2, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fe fb05 	bl	8002bce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045c8:	697b      	ldr	r3, [r7, #20]
	}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000388 	.word	0x20000388
 80045d8:	2000038c 	.word	0x2000038c
 80045dc:	20000490 	.word	0x20000490

080045e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d079      	beq.n	80046ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60fb      	str	r3, [r7, #12]
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d902      	bls.n	8004628 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e002      	b.n	800462e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	429a      	cmp	r2, r3
 8004636:	d059      	beq.n	80046ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	429a      	cmp	r2, r3
 8004640:	d154      	bne.n	80046ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004642:	4b2c      	ldr	r3, [pc, #176]	@ (80046f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	429a      	cmp	r2, r3
 800464a:	d10b      	bne.n	8004664 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60bb      	str	r3, [r7, #8]
}
 800465e:	bf00      	nop
 8004660:	bf00      	nop
 8004662:	e7fd      	b.n	8004660 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004668:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	db04      	blt.n	8004682 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f1c3 0207 	rsb	r2, r3, #7
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	6959      	ldr	r1, [r3, #20]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4a19      	ldr	r2, [pc, #100]	@ (80046f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004692:	4413      	add	r3, r2
 8004694:	4299      	cmp	r1, r3
 8004696:	d129      	bne.n	80046ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	3304      	adds	r3, #4
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe faf3 	bl	8002c88 <uxListRemove>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	2201      	movs	r2, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43da      	mvns	r2, r3
 80046b4:	4b11      	ldr	r3, [pc, #68]	@ (80046fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4013      	ands	r3, r2
 80046ba:	4a10      	ldr	r2, [pc, #64]	@ (80046fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80046bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	2201      	movs	r2, #1
 80046c4:	409a      	lsls	r2, r3
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	4a0b      	ldr	r2, [pc, #44]	@ (80046fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4a06      	ldr	r2, [pc, #24]	@ (80046f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80046de:	441a      	add	r2, r3
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f7fe fa71 	bl	8002bce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046ec:	bf00      	nop
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000388 	.word	0x20000388
 80046f8:	2000038c 	.word	0x2000038c
 80046fc:	20000490 	.word	0x20000490

08004700 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004704:	4b07      	ldr	r3, [pc, #28]	@ (8004724 <pvTaskIncrementMutexHeldCount+0x24>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800470c:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <pvTaskIncrementMutexHeldCount+0x24>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004712:	3201      	adds	r2, #1
 8004714:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004716:	4b03      	ldr	r3, [pc, #12]	@ (8004724 <pvTaskIncrementMutexHeldCount+0x24>)
 8004718:	681b      	ldr	r3, [r3, #0]
	}
 800471a:	4618      	mov	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	20000388 	.word	0x20000388

08004728 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004732:	4b29      	ldr	r3, [pc, #164]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004738:	4b28      	ldr	r3, [pc, #160]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3304      	adds	r3, #4
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe faa2 	bl	8002c88 <uxListRemove>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10b      	bne.n	8004762 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800474a:	4b24      	ldr	r3, [pc, #144]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	2201      	movs	r2, #1
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43da      	mvns	r2, r3
 8004758:	4b21      	ldr	r3, [pc, #132]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4013      	ands	r3, r2
 800475e:	4a20      	ldr	r2, [pc, #128]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004760:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004768:	d10a      	bne.n	8004780 <prvAddCurrentTaskToDelayedList+0x58>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004770:	4b1a      	ldr	r3, [pc, #104]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3304      	adds	r3, #4
 8004776:	4619      	mov	r1, r3
 8004778:	481a      	ldr	r0, [pc, #104]	@ (80047e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800477a:	f7fe fa28 	bl	8002bce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800477e:	e026      	b.n	80047ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004788:	4b14      	ldr	r3, [pc, #80]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	429a      	cmp	r2, r3
 8004796:	d209      	bcs.n	80047ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004798:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe fa36 	bl	8002c16 <vListInsert>
}
 80047aa:	e010      	b.n	80047ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ac:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe fa2c 	bl	8002c16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047be:	4b0c      	ldr	r3, [pc, #48]	@ (80047f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d202      	bcs.n	80047ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047c8:	4a09      	ldr	r2, [pc, #36]	@ (80047f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6013      	str	r3, [r2, #0]
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	2000048c 	.word	0x2000048c
 80047dc:	20000388 	.word	0x20000388
 80047e0:	20000490 	.word	0x20000490
 80047e4:	20000474 	.word	0x20000474
 80047e8:	20000444 	.word	0x20000444
 80047ec:	20000440 	.word	0x20000440
 80047f0:	200004a8 	.word	0x200004a8

080047f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3b04      	subs	r3, #4
 8004804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800480c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3b04      	subs	r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3b04      	subs	r3, #4
 8004822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004824:	4a0c      	ldr	r2, [pc, #48]	@ (8004858 <pxPortInitialiseStack+0x64>)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3b14      	subs	r3, #20
 800482e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3b04      	subs	r3, #4
 800483a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f06f 0202 	mvn.w	r2, #2
 8004842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3b20      	subs	r3, #32
 8004848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800484a:	68fb      	ldr	r3, [r7, #12]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	0800485d 	.word	0x0800485d

0800485c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004866:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <prvTaskExitError+0x58>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800486e:	d00b      	beq.n	8004888 <prvTaskExitError+0x2c>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60fb      	str	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <prvTaskExitError+0x28>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60bb      	str	r3, [r7, #8]
}
 800489a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800489c:	bf00      	nop
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0fc      	beq.n	800489e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c
	...

080048c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048c0:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <pxCurrentTCBConst2>)
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	f380 8809 	msr	PSP, r0
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f380 8811 	msr	BASEPRI, r0
 80048da:	4770      	bx	lr
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst2>:
 80048e0:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048e8:	4808      	ldr	r0, [pc, #32]	@ (800490c <prvPortStartFirstTask+0x24>)
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	6800      	ldr	r0, [r0, #0]
 80048ee:	f380 8808 	msr	MSP, r0
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8814 	msr	CONTROL, r0
 80048fa:	b662      	cpsie	i
 80048fc:	b661      	cpsie	f
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	df00      	svc	0
 8004908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800490a:	bf00      	nop
 800490c:	e000ed08 	.word	0xe000ed08

08004910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004916:	4b47      	ldr	r3, [pc, #284]	@ (8004a34 <xPortStartScheduler+0x124>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a47      	ldr	r2, [pc, #284]	@ (8004a38 <xPortStartScheduler+0x128>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10b      	bne.n	8004938 <xPortStartScheduler+0x28>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60fb      	str	r3, [r7, #12]
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004938:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <xPortStartScheduler+0x124>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a3c <xPortStartScheduler+0x12c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10b      	bne.n	800495a <xPortStartScheduler+0x4a>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	613b      	str	r3, [r7, #16]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800495a:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <xPortStartScheduler+0x130>)
 800495c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	22ff      	movs	r2, #255	@ 0xff
 800496a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800497c:	b2da      	uxtb	r2, r3
 800497e:	4b31      	ldr	r3, [pc, #196]	@ (8004a44 <xPortStartScheduler+0x134>)
 8004980:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004982:	4b31      	ldr	r3, [pc, #196]	@ (8004a48 <xPortStartScheduler+0x138>)
 8004984:	2207      	movs	r2, #7
 8004986:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004988:	e009      	b.n	800499e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800498a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a48 <xPortStartScheduler+0x138>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	4a2d      	ldr	r2, [pc, #180]	@ (8004a48 <xPortStartScheduler+0x138>)
 8004992:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d0ef      	beq.n	800498a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049aa:	4b27      	ldr	r3, [pc, #156]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1c3 0307 	rsb	r3, r3, #7
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d00b      	beq.n	80049ce <xPortStartScheduler+0xbe>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60bb      	str	r3, [r7, #8]
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	e7fd      	b.n	80049ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049e0:	4a19      	ldr	r2, [pc, #100]	@ (8004a48 <xPortStartScheduler+0x138>)
 80049e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049ec:	4b17      	ldr	r3, [pc, #92]	@ (8004a4c <xPortStartScheduler+0x13c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a16      	ldr	r2, [pc, #88]	@ (8004a4c <xPortStartScheduler+0x13c>)
 80049f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049f8:	4b14      	ldr	r3, [pc, #80]	@ (8004a4c <xPortStartScheduler+0x13c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a13      	ldr	r2, [pc, #76]	@ (8004a4c <xPortStartScheduler+0x13c>)
 80049fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a04:	f000 f8da 	bl	8004bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a08:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <xPortStartScheduler+0x140>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a0e:	f000 f8f9 	bl	8004c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <xPortStartScheduler+0x144>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a0f      	ldr	r2, [pc, #60]	@ (8004a54 <xPortStartScheduler+0x144>)
 8004a18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a1e:	f7ff ff63 	bl	80048e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a22:	f7ff fa7f 	bl	8003f24 <vTaskSwitchContext>
	prvTaskExitError();
 8004a26:	f7ff ff19 	bl	800485c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	e000ed00 	.word	0xe000ed00
 8004a38:	410fc271 	.word	0x410fc271
 8004a3c:	410fc270 	.word	0x410fc270
 8004a40:	e000e400 	.word	0xe000e400
 8004a44:	200004b4 	.word	0x200004b4
 8004a48:	200004b8 	.word	0x200004b8
 8004a4c:	e000ed20 	.word	0xe000ed20
 8004a50:	2000000c 	.word	0x2000000c
 8004a54:	e000ef34 	.word	0xe000ef34

08004a58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	607b      	str	r3, [r7, #4]
}
 8004a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a72:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <vPortEnterCritical+0x5c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3301      	adds	r3, #1
 8004a78:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab4 <vPortEnterCritical+0x5c>)
 8004a7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <vPortEnterCritical+0x5c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d110      	bne.n	8004aa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <vPortEnterCritical+0x60>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	603b      	str	r3, [r7, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <vPortEnterCritical+0x4a>
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	2000000c 	.word	0x2000000c
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <vPortExitCritical+0x50>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <vPortExitCritical+0x26>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	607b      	str	r3, [r7, #4]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <vPortExitCritical+0x50>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	4a08      	ldr	r2, [pc, #32]	@ (8004b0c <vPortExitCritical+0x50>)
 8004aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aec:	4b07      	ldr	r3, [pc, #28]	@ (8004b0c <vPortExitCritical+0x50>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <vPortExitCritical+0x44>
 8004af4:	2300      	movs	r3, #0
 8004af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f383 8811 	msr	BASEPRI, r3
}
 8004afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	2000000c 	.word	0x2000000c

08004b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b10:	f3ef 8009 	mrs	r0, PSP
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	4b15      	ldr	r3, [pc, #84]	@ (8004b70 <pxCurrentTCBConst>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	f01e 0f10 	tst.w	lr, #16
 8004b20:	bf08      	it	eq
 8004b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2a:	6010      	str	r0, [r2, #0]
 8004b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b34:	f380 8811 	msr	BASEPRI, r0
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f7ff f9f0 	bl	8003f24 <vTaskSwitchContext>
 8004b44:	f04f 0000 	mov.w	r0, #0
 8004b48:	f380 8811 	msr	BASEPRI, r0
 8004b4c:	bc09      	pop	{r0, r3}
 8004b4e:	6819      	ldr	r1, [r3, #0]
 8004b50:	6808      	ldr	r0, [r1, #0]
 8004b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b56:	f01e 0f10 	tst.w	lr, #16
 8004b5a:	bf08      	it	eq
 8004b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b60:	f380 8809 	msr	PSP, r0
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	f3af 8000 	nop.w

08004b70 <pxCurrentTCBConst>:
 8004b70:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop

08004b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	607b      	str	r3, [r7, #4]
}
 8004b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b92:	f7ff f90d 	bl	8003db0 <xTaskIncrementTick>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <SysTick_Handler+0x40>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f383 8811 	msr	BASEPRI, r3
}
 8004bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <vPortSetupTimerInterrupt+0x34>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <vPortSetupTimerInterrupt+0x38>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <vPortSetupTimerInterrupt+0x3c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <vPortSetupTimerInterrupt+0x40>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	099b      	lsrs	r3, r3, #6
 8004bd8:	4a09      	ldr	r2, [pc, #36]	@ (8004c00 <vPortSetupTimerInterrupt+0x44>)
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bde:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <vPortSetupTimerInterrupt+0x34>)
 8004be0:	2207      	movs	r2, #7
 8004be2:	601a      	str	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e010 	.word	0xe000e010
 8004bf4:	e000e018 	.word	0xe000e018
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	10624dd3 	.word	0x10624dd3
 8004c00:	e000e014 	.word	0xe000e014

08004c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c14 <vPortEnableVFP+0x10>
 8004c08:	6801      	ldr	r1, [r0, #0]
 8004c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c0e:	6001      	str	r1, [r0, #0]
 8004c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c12:	bf00      	nop
 8004c14:	e000ed88 	.word	0xe000ed88

08004c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c1e:	f3ef 8305 	mrs	r3, IPSR
 8004c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	d915      	bls.n	8004c56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c2a:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <vPortValidateInterruptPriority+0x74>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c34:	4b16      	ldr	r3, [pc, #88]	@ (8004c90 <vPortValidateInterruptPriority+0x78>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	7afa      	ldrb	r2, [r7, #11]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d20b      	bcs.n	8004c56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c56:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <vPortValidateInterruptPriority+0x7c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c98 <vPortValidateInterruptPriority+0x80>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d90b      	bls.n	8004c7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	603b      	str	r3, [r7, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	e7fd      	b.n	8004c7a <vPortValidateInterruptPriority+0x62>
	}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	e000e3f0 	.word	0xe000e3f0
 8004c90:	200004b4 	.word	0x200004b4
 8004c94:	e000ed0c 	.word	0xe000ed0c
 8004c98:	200004b8 	.word	0x200004b8

08004c9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	@ 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ca8:	f7fe ffd6 	bl	8003c58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cac:	4b5c      	ldr	r3, [pc, #368]	@ (8004e20 <pvPortMalloc+0x184>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cb4:	f000 f924 	bl	8004f00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e24 <pvPortMalloc+0x188>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f040 8095 	bne.w	8004df0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01e      	beq.n	8004d0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004ccc:	2208      	movs	r2, #8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d015      	beq.n	8004d0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f023 0307 	bic.w	r3, r3, #7
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <pvPortMalloc+0x6e>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	617b      	str	r3, [r7, #20]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d06f      	beq.n	8004df0 <pvPortMalloc+0x154>
 8004d10:	4b45      	ldr	r3, [pc, #276]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d86a      	bhi.n	8004df0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d1a:	4b44      	ldr	r3, [pc, #272]	@ (8004e2c <pvPortMalloc+0x190>)
 8004d1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d1e:	4b43      	ldr	r3, [pc, #268]	@ (8004e2c <pvPortMalloc+0x190>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d24:	e004      	b.n	8004d30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d903      	bls.n	8004d42 <pvPortMalloc+0xa6>
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f1      	bne.n	8004d26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d42:	4b37      	ldr	r3, [pc, #220]	@ (8004e20 <pvPortMalloc+0x184>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d051      	beq.n	8004df0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2208      	movs	r2, #8
 8004d52:	4413      	add	r3, r2
 8004d54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	2308      	movs	r3, #8
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d920      	bls.n	8004db0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <pvPortMalloc+0xfc>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	613b      	str	r3, [r7, #16]
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004daa:	69b8      	ldr	r0, [r7, #24]
 8004dac:	f000 f90a 	bl	8004fc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004db0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	4a1b      	ldr	r2, [pc, #108]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004dbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <pvPortMalloc+0x194>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d203      	bcs.n	8004dd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dca:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <pvPortMalloc+0x18c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a18      	ldr	r2, [pc, #96]	@ (8004e30 <pvPortMalloc+0x194>)
 8004dd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	4b13      	ldr	r3, [pc, #76]	@ (8004e24 <pvPortMalloc+0x188>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004de6:	4b13      	ldr	r3, [pc, #76]	@ (8004e34 <pvPortMalloc+0x198>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	4a11      	ldr	r2, [pc, #68]	@ (8004e34 <pvPortMalloc+0x198>)
 8004dee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004df0:	f7fe ff40 	bl	8003c74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <pvPortMalloc+0x17a>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60fb      	str	r3, [r7, #12]
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <pvPortMalloc+0x176>
	return pvReturn;
 8004e16:	69fb      	ldr	r3, [r7, #28]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	@ 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	200040c4 	.word	0x200040c4
 8004e24:	200040d8 	.word	0x200040d8
 8004e28:	200040c8 	.word	0x200040c8
 8004e2c:	200040bc 	.word	0x200040bc
 8004e30:	200040cc 	.word	0x200040cc
 8004e34:	200040d0 	.word	0x200040d0

08004e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d04f      	beq.n	8004eea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	425b      	negs	r3, r3
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4413      	add	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <vPortFree+0xbc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <vPortFree+0x46>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60fb      	str	r3, [r7, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	e7fd      	b.n	8004e7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <vPortFree+0x66>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60bb      	str	r3, [r7, #8]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	4b14      	ldr	r3, [pc, #80]	@ (8004ef4 <vPortFree+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01e      	beq.n	8004eea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d11a      	bne.n	8004eea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <vPortFree+0xbc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ec4:	f7fe fec8 	bl	8003c58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <vPortFree+0xc0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	4a09      	ldr	r2, [pc, #36]	@ (8004ef8 <vPortFree+0xc0>)
 8004ed4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ed6:	6938      	ldr	r0, [r7, #16]
 8004ed8:	f000 f874 	bl	8004fc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004edc:	4b07      	ldr	r3, [pc, #28]	@ (8004efc <vPortFree+0xc4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	4a06      	ldr	r2, [pc, #24]	@ (8004efc <vPortFree+0xc4>)
 8004ee4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ee6:	f7fe fec5 	bl	8003c74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004eea:	bf00      	nop
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200040d8 	.word	0x200040d8
 8004ef8:	200040c8 	.word	0x200040c8
 8004efc:	200040d4 	.word	0x200040d4

08004f00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f0c:	4b27      	ldr	r3, [pc, #156]	@ (8004fac <prvHeapInit+0xac>)
 8004f0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00c      	beq.n	8004f34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3307      	adds	r3, #7
 8004f1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0307 	bic.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <prvHeapInit+0xac>)
 8004f30:	4413      	add	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f38:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb0 <prvHeapInit+0xb0>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb0 <prvHeapInit+0xb0>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	4413      	add	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0307 	bic.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <prvHeapInit+0xb4>)
 8004f60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f62:	4b14      	ldr	r3, [pc, #80]	@ (8004fb4 <prvHeapInit+0xb4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f6a:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <prvHeapInit+0xb4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f80:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <prvHeapInit+0xb4>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb8 <prvHeapInit+0xb8>)
 8004f8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4a09      	ldr	r2, [pc, #36]	@ (8004fbc <prvHeapInit+0xbc>)
 8004f96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <prvHeapInit+0xc0>)
 8004f9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	200004bc 	.word	0x200004bc
 8004fb0:	200040bc 	.word	0x200040bc
 8004fb4:	200040c4 	.word	0x200040c4
 8004fb8:	200040cc 	.word	0x200040cc
 8004fbc:	200040c8 	.word	0x200040c8
 8004fc0:	200040d8 	.word	0x200040d8

08004fc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fcc:	4b28      	ldr	r3, [pc, #160]	@ (8005070 <prvInsertBlockIntoFreeList+0xac>)
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e002      	b.n	8004fd8 <prvInsertBlockIntoFreeList+0x14>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d8f7      	bhi.n	8004fd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	4413      	add	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d108      	bne.n	8005006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	441a      	add	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d118      	bne.n	800504c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <prvInsertBlockIntoFreeList+0xb0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d00d      	beq.n	8005042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	441a      	add	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e008      	b.n	8005054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005042:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <prvInsertBlockIntoFreeList+0xb0>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e003      	b.n	8005054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d002      	beq.n	8005062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	200040bc 	.word	0x200040bc
 8005074:	200040c4 	.word	0x200040c4

08005078 <findslot>:
 8005078:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <findslot+0x2c>)
 800507a:	b510      	push	{r4, lr}
 800507c:	4604      	mov	r4, r0
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	b118      	cbz	r0, 800508a <findslot+0x12>
 8005082:	6a03      	ldr	r3, [r0, #32]
 8005084:	b90b      	cbnz	r3, 800508a <findslot+0x12>
 8005086:	f000 fb1f 	bl	80056c8 <__sinit>
 800508a:	2c13      	cmp	r4, #19
 800508c:	d807      	bhi.n	800509e <findslot+0x26>
 800508e:	4806      	ldr	r0, [pc, #24]	@ (80050a8 <findslot+0x30>)
 8005090:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005094:	3201      	adds	r2, #1
 8005096:	d002      	beq.n	800509e <findslot+0x26>
 8005098:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800509c:	bd10      	pop	{r4, pc}
 800509e:	2000      	movs	r0, #0
 80050a0:	e7fc      	b.n	800509c <findslot+0x24>
 80050a2:	bf00      	nop
 80050a4:	20000024 	.word	0x20000024
 80050a8:	200040e8 	.word	0x200040e8

080050ac <error>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	4604      	mov	r4, r0
 80050b0:	f000 fcc4 	bl	8005a3c <__errno>
 80050b4:	2613      	movs	r6, #19
 80050b6:	4605      	mov	r5, r0
 80050b8:	2700      	movs	r7, #0
 80050ba:	4630      	mov	r0, r6
 80050bc:	4639      	mov	r1, r7
 80050be:	beab      	bkpt	0x00ab
 80050c0:	4606      	mov	r6, r0
 80050c2:	602e      	str	r6, [r5, #0]
 80050c4:	4620      	mov	r0, r4
 80050c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050c8 <checkerror>:
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d101      	bne.n	80050d0 <checkerror+0x8>
 80050cc:	f7ff bfee 	b.w	80050ac <error>
 80050d0:	4770      	bx	lr

080050d2 <_swiread>:
 80050d2:	b530      	push	{r4, r5, lr}
 80050d4:	b085      	sub	sp, #20
 80050d6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80050da:	9203      	str	r2, [sp, #12]
 80050dc:	2406      	movs	r4, #6
 80050de:	ad01      	add	r5, sp, #4
 80050e0:	4620      	mov	r0, r4
 80050e2:	4629      	mov	r1, r5
 80050e4:	beab      	bkpt	0x00ab
 80050e6:	4604      	mov	r4, r0
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7ff ffed 	bl	80050c8 <checkerror>
 80050ee:	b005      	add	sp, #20
 80050f0:	bd30      	pop	{r4, r5, pc}

080050f2 <_read>:
 80050f2:	b570      	push	{r4, r5, r6, lr}
 80050f4:	460e      	mov	r6, r1
 80050f6:	4614      	mov	r4, r2
 80050f8:	f7ff ffbe 	bl	8005078 <findslot>
 80050fc:	4605      	mov	r5, r0
 80050fe:	b930      	cbnz	r0, 800510e <_read+0x1c>
 8005100:	f000 fc9c 	bl	8005a3c <__errno>
 8005104:	2309      	movs	r3, #9
 8005106:	6003      	str	r3, [r0, #0]
 8005108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800510c:	bd70      	pop	{r4, r5, r6, pc}
 800510e:	6800      	ldr	r0, [r0, #0]
 8005110:	4622      	mov	r2, r4
 8005112:	4631      	mov	r1, r6
 8005114:	f7ff ffdd 	bl	80050d2 <_swiread>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d0f5      	beq.n	8005108 <_read+0x16>
 800511c:	686b      	ldr	r3, [r5, #4]
 800511e:	1a20      	subs	r0, r4, r0
 8005120:	4403      	add	r3, r0
 8005122:	606b      	str	r3, [r5, #4]
 8005124:	e7f2      	b.n	800510c <_read+0x1a>

08005126 <_swilseek>:
 8005126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005128:	460c      	mov	r4, r1
 800512a:	4616      	mov	r6, r2
 800512c:	f7ff ffa4 	bl	8005078 <findslot>
 8005130:	4605      	mov	r5, r0
 8005132:	b940      	cbnz	r0, 8005146 <_swilseek+0x20>
 8005134:	f000 fc82 	bl	8005a3c <__errno>
 8005138:	2309      	movs	r3, #9
 800513a:	6003      	str	r3, [r0, #0]
 800513c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005140:	4620      	mov	r0, r4
 8005142:	b003      	add	sp, #12
 8005144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005146:	2e02      	cmp	r6, #2
 8005148:	d903      	bls.n	8005152 <_swilseek+0x2c>
 800514a:	f000 fc77 	bl	8005a3c <__errno>
 800514e:	2316      	movs	r3, #22
 8005150:	e7f3      	b.n	800513a <_swilseek+0x14>
 8005152:	2e01      	cmp	r6, #1
 8005154:	d112      	bne.n	800517c <_swilseek+0x56>
 8005156:	6843      	ldr	r3, [r0, #4]
 8005158:	18e4      	adds	r4, r4, r3
 800515a:	d4f6      	bmi.n	800514a <_swilseek+0x24>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	260a      	movs	r6, #10
 8005160:	e9cd 3400 	strd	r3, r4, [sp]
 8005164:	466f      	mov	r7, sp
 8005166:	4630      	mov	r0, r6
 8005168:	4639      	mov	r1, r7
 800516a:	beab      	bkpt	0x00ab
 800516c:	4606      	mov	r6, r0
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff ffaa 	bl	80050c8 <checkerror>
 8005174:	2800      	cmp	r0, #0
 8005176:	dbe1      	blt.n	800513c <_swilseek+0x16>
 8005178:	606c      	str	r4, [r5, #4]
 800517a:	e7e1      	b.n	8005140 <_swilseek+0x1a>
 800517c:	2e02      	cmp	r6, #2
 800517e:	6803      	ldr	r3, [r0, #0]
 8005180:	d1ec      	bne.n	800515c <_swilseek+0x36>
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	260c      	movs	r6, #12
 8005186:	466f      	mov	r7, sp
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	beab      	bkpt	0x00ab
 800518e:	4606      	mov	r6, r0
 8005190:	4630      	mov	r0, r6
 8005192:	f7ff ff99 	bl	80050c8 <checkerror>
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	d0d0      	beq.n	800513c <_swilseek+0x16>
 800519a:	4404      	add	r4, r0
 800519c:	e7de      	b.n	800515c <_swilseek+0x36>

0800519e <_lseek>:
 800519e:	f7ff bfc2 	b.w	8005126 <_swilseek>

080051a2 <_swiwrite>:
 80051a2:	b530      	push	{r4, r5, lr}
 80051a4:	b085      	sub	sp, #20
 80051a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80051aa:	9203      	str	r2, [sp, #12]
 80051ac:	2405      	movs	r4, #5
 80051ae:	ad01      	add	r5, sp, #4
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	beab      	bkpt	0x00ab
 80051b6:	4604      	mov	r4, r0
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7ff ff85 	bl	80050c8 <checkerror>
 80051be:	b005      	add	sp, #20
 80051c0:	bd30      	pop	{r4, r5, pc}

080051c2 <_write>:
 80051c2:	b570      	push	{r4, r5, r6, lr}
 80051c4:	460e      	mov	r6, r1
 80051c6:	4615      	mov	r5, r2
 80051c8:	f7ff ff56 	bl	8005078 <findslot>
 80051cc:	4604      	mov	r4, r0
 80051ce:	b930      	cbnz	r0, 80051de <_write+0x1c>
 80051d0:	f000 fc34 	bl	8005a3c <__errno>
 80051d4:	2309      	movs	r3, #9
 80051d6:	6003      	str	r3, [r0, #0]
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
 80051de:	6800      	ldr	r0, [r0, #0]
 80051e0:	462a      	mov	r2, r5
 80051e2:	4631      	mov	r1, r6
 80051e4:	f7ff ffdd 	bl	80051a2 <_swiwrite>
 80051e8:	1e03      	subs	r3, r0, #0
 80051ea:	dbf5      	blt.n	80051d8 <_write+0x16>
 80051ec:	6862      	ldr	r2, [r4, #4]
 80051ee:	1ae8      	subs	r0, r5, r3
 80051f0:	4402      	add	r2, r0
 80051f2:	42ab      	cmp	r3, r5
 80051f4:	6062      	str	r2, [r4, #4]
 80051f6:	d1f1      	bne.n	80051dc <_write+0x1a>
 80051f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051fc:	2000      	movs	r0, #0
 80051fe:	f7ff bf55 	b.w	80050ac <error>

08005202 <_swiclose>:
 8005202:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005204:	2402      	movs	r4, #2
 8005206:	9001      	str	r0, [sp, #4]
 8005208:	ad01      	add	r5, sp, #4
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	beab      	bkpt	0x00ab
 8005210:	4604      	mov	r4, r0
 8005212:	4620      	mov	r0, r4
 8005214:	f7ff ff58 	bl	80050c8 <checkerror>
 8005218:	b003      	add	sp, #12
 800521a:	bd30      	pop	{r4, r5, pc}

0800521c <_close>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4605      	mov	r5, r0
 8005220:	f7ff ff2a 	bl	8005078 <findslot>
 8005224:	4604      	mov	r4, r0
 8005226:	b930      	cbnz	r0, 8005236 <_close+0x1a>
 8005228:	f000 fc08 	bl	8005a3c <__errno>
 800522c:	2309      	movs	r3, #9
 800522e:	6003      	str	r3, [r0, #0]
 8005230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005234:	bd38      	pop	{r3, r4, r5, pc}
 8005236:	3d01      	subs	r5, #1
 8005238:	2d01      	cmp	r5, #1
 800523a:	d809      	bhi.n	8005250 <_close+0x34>
 800523c:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <_close+0x48>)
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	d104      	bne.n	8005250 <_close+0x34>
 8005246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800524a:	6003      	str	r3, [r0, #0]
 800524c:	2000      	movs	r0, #0
 800524e:	e7f1      	b.n	8005234 <_close+0x18>
 8005250:	6820      	ldr	r0, [r4, #0]
 8005252:	f7ff ffd6 	bl	8005202 <_swiclose>
 8005256:	2800      	cmp	r0, #0
 8005258:	d1ec      	bne.n	8005234 <_close+0x18>
 800525a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800525e:	6023      	str	r3, [r4, #0]
 8005260:	e7e8      	b.n	8005234 <_close+0x18>
 8005262:	bf00      	nop
 8005264:	200040e8 	.word	0x200040e8

08005268 <_swistat>:
 8005268:	b570      	push	{r4, r5, r6, lr}
 800526a:	460c      	mov	r4, r1
 800526c:	f7ff ff04 	bl	8005078 <findslot>
 8005270:	4605      	mov	r5, r0
 8005272:	b930      	cbnz	r0, 8005282 <_swistat+0x1a>
 8005274:	f000 fbe2 	bl	8005a3c <__errno>
 8005278:	2309      	movs	r3, #9
 800527a:	6003      	str	r3, [r0, #0]
 800527c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005280:	bd70      	pop	{r4, r5, r6, pc}
 8005282:	6863      	ldr	r3, [r4, #4]
 8005284:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005288:	6063      	str	r3, [r4, #4]
 800528a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800528e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005290:	260c      	movs	r6, #12
 8005292:	4630      	mov	r0, r6
 8005294:	4629      	mov	r1, r5
 8005296:	beab      	bkpt	0x00ab
 8005298:	4605      	mov	r5, r0
 800529a:	4628      	mov	r0, r5
 800529c:	f7ff ff14 	bl	80050c8 <checkerror>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d0eb      	beq.n	800527c <_swistat+0x14>
 80052a4:	6120      	str	r0, [r4, #16]
 80052a6:	2000      	movs	r0, #0
 80052a8:	e7ea      	b.n	8005280 <_swistat+0x18>

080052aa <_fstat>:
 80052aa:	460b      	mov	r3, r1
 80052ac:	b510      	push	{r4, lr}
 80052ae:	2100      	movs	r1, #0
 80052b0:	4604      	mov	r4, r0
 80052b2:	2258      	movs	r2, #88	@ 0x58
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fb73 	bl	80059a0 <memset>
 80052ba:	4601      	mov	r1, r0
 80052bc:	4620      	mov	r0, r4
 80052be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c2:	f7ff bfd1 	b.w	8005268 <_swistat>

080052c6 <_stat>:
 80052c6:	b538      	push	{r3, r4, r5, lr}
 80052c8:	460d      	mov	r5, r1
 80052ca:	4604      	mov	r4, r0
 80052cc:	2258      	movs	r2, #88	@ 0x58
 80052ce:	2100      	movs	r1, #0
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 fb65 	bl	80059a0 <memset>
 80052d6:	4620      	mov	r0, r4
 80052d8:	2100      	movs	r1, #0
 80052da:	f000 f811 	bl	8005300 <_swiopen>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	4604      	mov	r4, r0
 80052e2:	d00b      	beq.n	80052fc <_stat+0x36>
 80052e4:	686b      	ldr	r3, [r5, #4]
 80052e6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80052ea:	606b      	str	r3, [r5, #4]
 80052ec:	4629      	mov	r1, r5
 80052ee:	f7ff ffbb 	bl	8005268 <_swistat>
 80052f2:	4605      	mov	r5, r0
 80052f4:	4620      	mov	r0, r4
 80052f6:	f7ff ff91 	bl	800521c <_close>
 80052fa:	462c      	mov	r4, r5
 80052fc:	4620      	mov	r0, r4
 80052fe:	bd38      	pop	{r3, r4, r5, pc}

08005300 <_swiopen>:
 8005300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80053b0 <_swiopen+0xb0>
 8005308:	b096      	sub	sp, #88	@ 0x58
 800530a:	4607      	mov	r7, r0
 800530c:	460e      	mov	r6, r1
 800530e:	2400      	movs	r4, #0
 8005310:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8005314:	3301      	adds	r3, #1
 8005316:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800531a:	d032      	beq.n	8005382 <_swiopen+0x82>
 800531c:	3401      	adds	r4, #1
 800531e:	2c14      	cmp	r4, #20
 8005320:	d1f6      	bne.n	8005310 <_swiopen+0x10>
 8005322:	f000 fb8b 	bl	8005a3c <__errno>
 8005326:	2318      	movs	r3, #24
 8005328:	e03a      	b.n	80053a0 <_swiopen+0xa0>
 800532a:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800532e:	f240 6301 	movw	r3, #1537	@ 0x601
 8005332:	07b2      	lsls	r2, r6, #30
 8005334:	bf48      	it	mi
 8005336:	f045 0502 	orrmi.w	r5, r5, #2
 800533a:	421e      	tst	r6, r3
 800533c:	bf18      	it	ne
 800533e:	f045 0504 	orrne.w	r5, r5, #4
 8005342:	0733      	lsls	r3, r6, #28
 8005344:	bf48      	it	mi
 8005346:	f025 0504 	bicmi.w	r5, r5, #4
 800534a:	4638      	mov	r0, r7
 800534c:	bf48      	it	mi
 800534e:	f045 0508 	orrmi.w	r5, r5, #8
 8005352:	9700      	str	r7, [sp, #0]
 8005354:	f7fa ff5c 	bl	8000210 <strlen>
 8005358:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800535c:	2501      	movs	r5, #1
 800535e:	4628      	mov	r0, r5
 8005360:	4651      	mov	r1, sl
 8005362:	beab      	bkpt	0x00ab
 8005364:	4605      	mov	r5, r0
 8005366:	2d00      	cmp	r5, #0
 8005368:	db06      	blt.n	8005378 <_swiopen+0x78>
 800536a:	44c8      	add	r8, r9
 800536c:	2300      	movs	r3, #0
 800536e:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8005372:	f8c8 3004 	str.w	r3, [r8, #4]
 8005376:	e016      	b.n	80053a6 <_swiopen+0xa6>
 8005378:	4628      	mov	r0, r5
 800537a:	f7ff fe97 	bl	80050ac <error>
 800537e:	4604      	mov	r4, r0
 8005380:	e011      	b.n	80053a6 <_swiopen+0xa6>
 8005382:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8005386:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800538a:	46ea      	mov	sl, sp
 800538c:	d1cd      	bne.n	800532a <_swiopen+0x2a>
 800538e:	4651      	mov	r1, sl
 8005390:	4638      	mov	r0, r7
 8005392:	f7ff ff98 	bl	80052c6 <_stat>
 8005396:	3001      	adds	r0, #1
 8005398:	d0c7      	beq.n	800532a <_swiopen+0x2a>
 800539a:	f000 fb4f 	bl	8005a3c <__errno>
 800539e:	2311      	movs	r3, #17
 80053a0:	6003      	str	r3, [r0, #0]
 80053a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80053a6:	4620      	mov	r0, r4
 80053a8:	b016      	add	sp, #88	@ 0x58
 80053aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ae:	bf00      	nop
 80053b0:	200040e8 	.word	0x200040e8

080053b4 <_get_semihosting_exts>:
 80053b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	4606      	mov	r6, r0
 80053ba:	460f      	mov	r7, r1
 80053bc:	4829      	ldr	r0, [pc, #164]	@ (8005464 <_get_semihosting_exts+0xb0>)
 80053be:	2100      	movs	r1, #0
 80053c0:	4615      	mov	r5, r2
 80053c2:	f7ff ff9d 	bl	8005300 <_swiopen>
 80053c6:	462a      	mov	r2, r5
 80053c8:	4604      	mov	r4, r0
 80053ca:	2100      	movs	r1, #0
 80053cc:	4630      	mov	r0, r6
 80053ce:	f000 fae7 	bl	80059a0 <memset>
 80053d2:	1c63      	adds	r3, r4, #1
 80053d4:	d014      	beq.n	8005400 <_get_semihosting_exts+0x4c>
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff fe4e 	bl	8005078 <findslot>
 80053dc:	f04f 080c 	mov.w	r8, #12
 80053e0:	4681      	mov	r9, r0
 80053e2:	4640      	mov	r0, r8
 80053e4:	4649      	mov	r1, r9
 80053e6:	beab      	bkpt	0x00ab
 80053e8:	4680      	mov	r8, r0
 80053ea:	4640      	mov	r0, r8
 80053ec:	f7ff fe6c 	bl	80050c8 <checkerror>
 80053f0:	2803      	cmp	r0, #3
 80053f2:	dd02      	ble.n	80053fa <_get_semihosting_exts+0x46>
 80053f4:	1ec3      	subs	r3, r0, #3
 80053f6:	42ab      	cmp	r3, r5
 80053f8:	dc07      	bgt.n	800540a <_get_semihosting_exts+0x56>
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7ff ff0e 	bl	800521c <_close>
 8005400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005404:	b003      	add	sp, #12
 8005406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800540a:	2204      	movs	r2, #4
 800540c:	eb0d 0102 	add.w	r1, sp, r2
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff fe6e 	bl	80050f2 <_read>
 8005416:	2803      	cmp	r0, #3
 8005418:	ddef      	ble.n	80053fa <_get_semihosting_exts+0x46>
 800541a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800541e:	2b53      	cmp	r3, #83	@ 0x53
 8005420:	d1eb      	bne.n	80053fa <_get_semihosting_exts+0x46>
 8005422:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005426:	2b48      	cmp	r3, #72	@ 0x48
 8005428:	d1e7      	bne.n	80053fa <_get_semihosting_exts+0x46>
 800542a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800542e:	2b46      	cmp	r3, #70	@ 0x46
 8005430:	d1e3      	bne.n	80053fa <_get_semihosting_exts+0x46>
 8005432:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005436:	2b42      	cmp	r3, #66	@ 0x42
 8005438:	d1df      	bne.n	80053fa <_get_semihosting_exts+0x46>
 800543a:	2201      	movs	r2, #1
 800543c:	4639      	mov	r1, r7
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff fe71 	bl	8005126 <_swilseek>
 8005444:	2800      	cmp	r0, #0
 8005446:	dbd8      	blt.n	80053fa <_get_semihosting_exts+0x46>
 8005448:	462a      	mov	r2, r5
 800544a:	4631      	mov	r1, r6
 800544c:	4620      	mov	r0, r4
 800544e:	f7ff fe50 	bl	80050f2 <_read>
 8005452:	4605      	mov	r5, r0
 8005454:	4620      	mov	r0, r4
 8005456:	f7ff fee1 	bl	800521c <_close>
 800545a:	4628      	mov	r0, r5
 800545c:	f7ff fe34 	bl	80050c8 <checkerror>
 8005460:	e7d0      	b.n	8005404 <_get_semihosting_exts+0x50>
 8005462:	bf00      	nop
 8005464:	08005fb4 	.word	0x08005fb4

08005468 <initialise_semihosting_exts>:
 8005468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800546a:	4d0a      	ldr	r5, [pc, #40]	@ (8005494 <initialise_semihosting_exts+0x2c>)
 800546c:	4c0a      	ldr	r4, [pc, #40]	@ (8005498 <initialise_semihosting_exts+0x30>)
 800546e:	2100      	movs	r1, #0
 8005470:	2201      	movs	r2, #1
 8005472:	a801      	add	r0, sp, #4
 8005474:	6029      	str	r1, [r5, #0]
 8005476:	6022      	str	r2, [r4, #0]
 8005478:	f7ff ff9c 	bl	80053b4 <_get_semihosting_exts>
 800547c:	2800      	cmp	r0, #0
 800547e:	dd07      	ble.n	8005490 <initialise_semihosting_exts+0x28>
 8005480:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005484:	f003 0201 	and.w	r2, r3, #1
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	602a      	str	r2, [r5, #0]
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	b003      	add	sp, #12
 8005492:	bd30      	pop	{r4, r5, pc}
 8005494:	20000014 	.word	0x20000014
 8005498:	20000010 	.word	0x20000010

0800549c <_has_ext_stdout_stderr>:
 800549c:	b510      	push	{r4, lr}
 800549e:	4c04      	ldr	r4, [pc, #16]	@ (80054b0 <_has_ext_stdout_stderr+0x14>)
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	da01      	bge.n	80054aa <_has_ext_stdout_stderr+0xe>
 80054a6:	f7ff ffdf 	bl	8005468 <initialise_semihosting_exts>
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	bf00      	nop
 80054b0:	20000010 	.word	0x20000010

080054b4 <initialise_monitor_handles>:
 80054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b8:	b085      	sub	sp, #20
 80054ba:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800556c <initialise_monitor_handles+0xb8>
 80054be:	f8cd 9004 	str.w	r9, [sp, #4]
 80054c2:	2303      	movs	r3, #3
 80054c4:	2400      	movs	r4, #0
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	af01      	add	r7, sp, #4
 80054ca:	9402      	str	r4, [sp, #8]
 80054cc:	2501      	movs	r5, #1
 80054ce:	4628      	mov	r0, r5
 80054d0:	4639      	mov	r1, r7
 80054d2:	beab      	bkpt	0x00ab
 80054d4:	4605      	mov	r5, r0
 80054d6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005570 <initialise_monitor_handles+0xbc>
 80054da:	4623      	mov	r3, r4
 80054dc:	4c20      	ldr	r4, [pc, #128]	@ (8005560 <initialise_monitor_handles+0xac>)
 80054de:	f8c8 5000 	str.w	r5, [r8]
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054e6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80054ea:	3301      	adds	r3, #1
 80054ec:	2b14      	cmp	r3, #20
 80054ee:	d1fa      	bne.n	80054e6 <initialise_monitor_handles+0x32>
 80054f0:	f7ff ffd4 	bl	800549c <_has_ext_stdout_stderr>
 80054f4:	4d1b      	ldr	r5, [pc, #108]	@ (8005564 <initialise_monitor_handles+0xb0>)
 80054f6:	b1d0      	cbz	r0, 800552e <initialise_monitor_handles+0x7a>
 80054f8:	f04f 0a03 	mov.w	sl, #3
 80054fc:	2304      	movs	r3, #4
 80054fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8005502:	2601      	movs	r6, #1
 8005504:	f8cd a00c 	str.w	sl, [sp, #12]
 8005508:	9302      	str	r3, [sp, #8]
 800550a:	4630      	mov	r0, r6
 800550c:	4639      	mov	r1, r7
 800550e:	beab      	bkpt	0x00ab
 8005510:	4683      	mov	fp, r0
 8005512:	4b15      	ldr	r3, [pc, #84]	@ (8005568 <initialise_monitor_handles+0xb4>)
 8005514:	f8cd 9004 	str.w	r9, [sp, #4]
 8005518:	f8c3 b000 	str.w	fp, [r3]
 800551c:	2308      	movs	r3, #8
 800551e:	f8cd a00c 	str.w	sl, [sp, #12]
 8005522:	9302      	str	r3, [sp, #8]
 8005524:	4630      	mov	r0, r6
 8005526:	4639      	mov	r1, r7
 8005528:	beab      	bkpt	0x00ab
 800552a:	4606      	mov	r6, r0
 800552c:	602e      	str	r6, [r5, #0]
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	bf02      	ittt	eq
 8005534:	4b0c      	ldreq	r3, [pc, #48]	@ (8005568 <initialise_monitor_handles+0xb4>)
 8005536:	681b      	ldreq	r3, [r3, #0]
 8005538:	602b      	streq	r3, [r5, #0]
 800553a:	2600      	movs	r6, #0
 800553c:	f8d8 3000 	ldr.w	r3, [r8]
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	6066      	str	r6, [r4, #4]
 8005544:	f7ff ffaa 	bl	800549c <_has_ext_stdout_stderr>
 8005548:	b130      	cbz	r0, 8005558 <initialise_monitor_handles+0xa4>
 800554a:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <initialise_monitor_handles+0xb4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005558:	b005      	add	sp, #20
 800555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	bf00      	nop
 8005560:	200040e8 	.word	0x200040e8
 8005564:	200040dc 	.word	0x200040dc
 8005568:	200040e0 	.word	0x200040e0
 800556c:	08005fca 	.word	0x08005fca
 8005570:	200040e4 	.word	0x200040e4

08005574 <_isatty>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	f7ff fd7f 	bl	8005078 <findslot>
 800557a:	2409      	movs	r4, #9
 800557c:	4605      	mov	r5, r0
 800557e:	b920      	cbnz	r0, 800558a <_isatty+0x16>
 8005580:	f000 fa5c 	bl	8005a3c <__errno>
 8005584:	6004      	str	r4, [r0, #0]
 8005586:	2000      	movs	r0, #0
 8005588:	bd70      	pop	{r4, r5, r6, pc}
 800558a:	4620      	mov	r0, r4
 800558c:	4629      	mov	r1, r5
 800558e:	beab      	bkpt	0x00ab
 8005590:	4604      	mov	r4, r0
 8005592:	2c01      	cmp	r4, #1
 8005594:	4620      	mov	r0, r4
 8005596:	d0f7      	beq.n	8005588 <_isatty+0x14>
 8005598:	f000 fa50 	bl	8005a3c <__errno>
 800559c:	2513      	movs	r5, #19
 800559e:	4604      	mov	r4, r0
 80055a0:	2600      	movs	r6, #0
 80055a2:	4628      	mov	r0, r5
 80055a4:	4631      	mov	r1, r6
 80055a6:	beab      	bkpt	0x00ab
 80055a8:	4605      	mov	r5, r0
 80055aa:	6025      	str	r5, [r4, #0]
 80055ac:	e7eb      	b.n	8005586 <_isatty+0x12>
	...

080055b0 <std>:
 80055b0:	2300      	movs	r3, #0
 80055b2:	b510      	push	{r4, lr}
 80055b4:	4604      	mov	r4, r0
 80055b6:	e9c0 3300 	strd	r3, r3, [r0]
 80055ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055be:	6083      	str	r3, [r0, #8]
 80055c0:	8181      	strh	r1, [r0, #12]
 80055c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80055c4:	81c2      	strh	r2, [r0, #14]
 80055c6:	6183      	str	r3, [r0, #24]
 80055c8:	4619      	mov	r1, r3
 80055ca:	2208      	movs	r2, #8
 80055cc:	305c      	adds	r0, #92	@ 0x5c
 80055ce:	f000 f9e7 	bl	80059a0 <memset>
 80055d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005608 <std+0x58>)
 80055d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <std+0x5c>)
 80055d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055da:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <std+0x60>)
 80055dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <std+0x64>)
 80055e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80055e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <std+0x68>)
 80055e4:	6224      	str	r4, [r4, #32]
 80055e6:	429c      	cmp	r4, r3
 80055e8:	d006      	beq.n	80055f8 <std+0x48>
 80055ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055ee:	4294      	cmp	r4, r2
 80055f0:	d002      	beq.n	80055f8 <std+0x48>
 80055f2:	33d0      	adds	r3, #208	@ 0xd0
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d105      	bne.n	8005604 <std+0x54>
 80055f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005600:	f000 ba46 	b.w	8005a90 <__retarget_lock_init_recursive>
 8005604:	bd10      	pop	{r4, pc}
 8005606:	bf00      	nop
 8005608:	080057f1 	.word	0x080057f1
 800560c:	08005813 	.word	0x08005813
 8005610:	0800584b 	.word	0x0800584b
 8005614:	0800586f 	.word	0x0800586f
 8005618:	20004188 	.word	0x20004188

0800561c <stdio_exit_handler>:
 800561c:	4a02      	ldr	r2, [pc, #8]	@ (8005628 <stdio_exit_handler+0xc>)
 800561e:	4903      	ldr	r1, [pc, #12]	@ (800562c <stdio_exit_handler+0x10>)
 8005620:	4803      	ldr	r0, [pc, #12]	@ (8005630 <stdio_exit_handler+0x14>)
 8005622:	f000 b869 	b.w	80056f8 <_fwalk_sglue>
 8005626:	bf00      	nop
 8005628:	20000018 	.word	0x20000018
 800562c:	08005dad 	.word	0x08005dad
 8005630:	20000028 	.word	0x20000028

08005634 <cleanup_stdio>:
 8005634:	6841      	ldr	r1, [r0, #4]
 8005636:	4b0c      	ldr	r3, [pc, #48]	@ (8005668 <cleanup_stdio+0x34>)
 8005638:	4299      	cmp	r1, r3
 800563a:	b510      	push	{r4, lr}
 800563c:	4604      	mov	r4, r0
 800563e:	d001      	beq.n	8005644 <cleanup_stdio+0x10>
 8005640:	f000 fbb4 	bl	8005dac <_fflush_r>
 8005644:	68a1      	ldr	r1, [r4, #8]
 8005646:	4b09      	ldr	r3, [pc, #36]	@ (800566c <cleanup_stdio+0x38>)
 8005648:	4299      	cmp	r1, r3
 800564a:	d002      	beq.n	8005652 <cleanup_stdio+0x1e>
 800564c:	4620      	mov	r0, r4
 800564e:	f000 fbad 	bl	8005dac <_fflush_r>
 8005652:	68e1      	ldr	r1, [r4, #12]
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <cleanup_stdio+0x3c>)
 8005656:	4299      	cmp	r1, r3
 8005658:	d004      	beq.n	8005664 <cleanup_stdio+0x30>
 800565a:	4620      	mov	r0, r4
 800565c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005660:	f000 bba4 	b.w	8005dac <_fflush_r>
 8005664:	bd10      	pop	{r4, pc}
 8005666:	bf00      	nop
 8005668:	20004188 	.word	0x20004188
 800566c:	200041f0 	.word	0x200041f0
 8005670:	20004258 	.word	0x20004258

08005674 <global_stdio_init.part.0>:
 8005674:	b510      	push	{r4, lr}
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <global_stdio_init.part.0+0x30>)
 8005678:	4c0b      	ldr	r4, [pc, #44]	@ (80056a8 <global_stdio_init.part.0+0x34>)
 800567a:	4a0c      	ldr	r2, [pc, #48]	@ (80056ac <global_stdio_init.part.0+0x38>)
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	4620      	mov	r0, r4
 8005680:	2200      	movs	r2, #0
 8005682:	2104      	movs	r1, #4
 8005684:	f7ff ff94 	bl	80055b0 <std>
 8005688:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800568c:	2201      	movs	r2, #1
 800568e:	2109      	movs	r1, #9
 8005690:	f7ff ff8e 	bl	80055b0 <std>
 8005694:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005698:	2202      	movs	r2, #2
 800569a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569e:	2112      	movs	r1, #18
 80056a0:	f7ff bf86 	b.w	80055b0 <std>
 80056a4:	200042c0 	.word	0x200042c0
 80056a8:	20004188 	.word	0x20004188
 80056ac:	0800561d 	.word	0x0800561d

080056b0 <__sfp_lock_acquire>:
 80056b0:	4801      	ldr	r0, [pc, #4]	@ (80056b8 <__sfp_lock_acquire+0x8>)
 80056b2:	f000 b9ee 	b.w	8005a92 <__retarget_lock_acquire_recursive>
 80056b6:	bf00      	nop
 80056b8:	200042c9 	.word	0x200042c9

080056bc <__sfp_lock_release>:
 80056bc:	4801      	ldr	r0, [pc, #4]	@ (80056c4 <__sfp_lock_release+0x8>)
 80056be:	f000 b9e9 	b.w	8005a94 <__retarget_lock_release_recursive>
 80056c2:	bf00      	nop
 80056c4:	200042c9 	.word	0x200042c9

080056c8 <__sinit>:
 80056c8:	b510      	push	{r4, lr}
 80056ca:	4604      	mov	r4, r0
 80056cc:	f7ff fff0 	bl	80056b0 <__sfp_lock_acquire>
 80056d0:	6a23      	ldr	r3, [r4, #32]
 80056d2:	b11b      	cbz	r3, 80056dc <__sinit+0x14>
 80056d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d8:	f7ff bff0 	b.w	80056bc <__sfp_lock_release>
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <__sinit+0x28>)
 80056de:	6223      	str	r3, [r4, #32]
 80056e0:	4b04      	ldr	r3, [pc, #16]	@ (80056f4 <__sinit+0x2c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f5      	bne.n	80056d4 <__sinit+0xc>
 80056e8:	f7ff ffc4 	bl	8005674 <global_stdio_init.part.0>
 80056ec:	e7f2      	b.n	80056d4 <__sinit+0xc>
 80056ee:	bf00      	nop
 80056f0:	08005635 	.word	0x08005635
 80056f4:	200042c0 	.word	0x200042c0

080056f8 <_fwalk_sglue>:
 80056f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fc:	4607      	mov	r7, r0
 80056fe:	4688      	mov	r8, r1
 8005700:	4614      	mov	r4, r2
 8005702:	2600      	movs	r6, #0
 8005704:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005708:	f1b9 0901 	subs.w	r9, r9, #1
 800570c:	d505      	bpl.n	800571a <_fwalk_sglue+0x22>
 800570e:	6824      	ldr	r4, [r4, #0]
 8005710:	2c00      	cmp	r4, #0
 8005712:	d1f7      	bne.n	8005704 <_fwalk_sglue+0xc>
 8005714:	4630      	mov	r0, r6
 8005716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d907      	bls.n	8005730 <_fwalk_sglue+0x38>
 8005720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005724:	3301      	adds	r3, #1
 8005726:	d003      	beq.n	8005730 <_fwalk_sglue+0x38>
 8005728:	4629      	mov	r1, r5
 800572a:	4638      	mov	r0, r7
 800572c:	47c0      	blx	r8
 800572e:	4306      	orrs	r6, r0
 8005730:	3568      	adds	r5, #104	@ 0x68
 8005732:	e7e9      	b.n	8005708 <_fwalk_sglue+0x10>

08005734 <_puts_r>:
 8005734:	6a03      	ldr	r3, [r0, #32]
 8005736:	b570      	push	{r4, r5, r6, lr}
 8005738:	6884      	ldr	r4, [r0, #8]
 800573a:	4605      	mov	r5, r0
 800573c:	460e      	mov	r6, r1
 800573e:	b90b      	cbnz	r3, 8005744 <_puts_r+0x10>
 8005740:	f7ff ffc2 	bl	80056c8 <__sinit>
 8005744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005746:	07db      	lsls	r3, r3, #31
 8005748:	d405      	bmi.n	8005756 <_puts_r+0x22>
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	0598      	lsls	r0, r3, #22
 800574e:	d402      	bmi.n	8005756 <_puts_r+0x22>
 8005750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005752:	f000 f99e 	bl	8005a92 <__retarget_lock_acquire_recursive>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	0719      	lsls	r1, r3, #28
 800575a:	d502      	bpl.n	8005762 <_puts_r+0x2e>
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d135      	bne.n	80057ce <_puts_r+0x9a>
 8005762:	4621      	mov	r1, r4
 8005764:	4628      	mov	r0, r5
 8005766:	f000 f8c5 	bl	80058f4 <__swsetup_r>
 800576a:	b380      	cbz	r0, 80057ce <_puts_r+0x9a>
 800576c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005770:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005772:	07da      	lsls	r2, r3, #31
 8005774:	d405      	bmi.n	8005782 <_puts_r+0x4e>
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	059b      	lsls	r3, r3, #22
 800577a:	d402      	bmi.n	8005782 <_puts_r+0x4e>
 800577c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800577e:	f000 f989 	bl	8005a94 <__retarget_lock_release_recursive>
 8005782:	4628      	mov	r0, r5
 8005784:	bd70      	pop	{r4, r5, r6, pc}
 8005786:	2b00      	cmp	r3, #0
 8005788:	da04      	bge.n	8005794 <_puts_r+0x60>
 800578a:	69a2      	ldr	r2, [r4, #24]
 800578c:	429a      	cmp	r2, r3
 800578e:	dc17      	bgt.n	80057c0 <_puts_r+0x8c>
 8005790:	290a      	cmp	r1, #10
 8005792:	d015      	beq.n	80057c0 <_puts_r+0x8c>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	6022      	str	r2, [r4, #0]
 800579a:	7019      	strb	r1, [r3, #0]
 800579c:	68a3      	ldr	r3, [r4, #8]
 800579e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057a2:	3b01      	subs	r3, #1
 80057a4:	60a3      	str	r3, [r4, #8]
 80057a6:	2900      	cmp	r1, #0
 80057a8:	d1ed      	bne.n	8005786 <_puts_r+0x52>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da11      	bge.n	80057d2 <_puts_r+0x9e>
 80057ae:	4622      	mov	r2, r4
 80057b0:	210a      	movs	r1, #10
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 f85f 	bl	8005876 <__swbuf_r>
 80057b8:	3001      	adds	r0, #1
 80057ba:	d0d7      	beq.n	800576c <_puts_r+0x38>
 80057bc:	250a      	movs	r5, #10
 80057be:	e7d7      	b.n	8005770 <_puts_r+0x3c>
 80057c0:	4622      	mov	r2, r4
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f857 	bl	8005876 <__swbuf_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d1e7      	bne.n	800579c <_puts_r+0x68>
 80057cc:	e7ce      	b.n	800576c <_puts_r+0x38>
 80057ce:	3e01      	subs	r6, #1
 80057d0:	e7e4      	b.n	800579c <_puts_r+0x68>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	6022      	str	r2, [r4, #0]
 80057d8:	220a      	movs	r2, #10
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e7ee      	b.n	80057bc <_puts_r+0x88>
	...

080057e0 <puts>:
 80057e0:	4b02      	ldr	r3, [pc, #8]	@ (80057ec <puts+0xc>)
 80057e2:	4601      	mov	r1, r0
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	f7ff bfa5 	b.w	8005734 <_puts_r>
 80057ea:	bf00      	nop
 80057ec:	20000024 	.word	0x20000024

080057f0 <__sread>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	460c      	mov	r4, r1
 80057f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f8:	f000 f8fc 	bl	80059f4 <_read_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	bfab      	itete	ge
 8005800:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005802:	89a3      	ldrhlt	r3, [r4, #12]
 8005804:	181b      	addge	r3, r3, r0
 8005806:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800580a:	bfac      	ite	ge
 800580c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800580e:	81a3      	strhlt	r3, [r4, #12]
 8005810:	bd10      	pop	{r4, pc}

08005812 <__swrite>:
 8005812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005816:	461f      	mov	r7, r3
 8005818:	898b      	ldrh	r3, [r1, #12]
 800581a:	05db      	lsls	r3, r3, #23
 800581c:	4605      	mov	r5, r0
 800581e:	460c      	mov	r4, r1
 8005820:	4616      	mov	r6, r2
 8005822:	d505      	bpl.n	8005830 <__swrite+0x1e>
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	2302      	movs	r3, #2
 800582a:	2200      	movs	r2, #0
 800582c:	f000 f8d0 	bl	80059d0 <_lseek_r>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005836:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	4632      	mov	r2, r6
 800583e:	463b      	mov	r3, r7
 8005840:	4628      	mov	r0, r5
 8005842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005846:	f000 b8e7 	b.w	8005a18 <_write_r>

0800584a <__sseek>:
 800584a:	b510      	push	{r4, lr}
 800584c:	460c      	mov	r4, r1
 800584e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005852:	f000 f8bd 	bl	80059d0 <_lseek_r>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	bf15      	itete	ne
 800585c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800585e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005862:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005866:	81a3      	strheq	r3, [r4, #12]
 8005868:	bf18      	it	ne
 800586a:	81a3      	strhne	r3, [r4, #12]
 800586c:	bd10      	pop	{r4, pc}

0800586e <__sclose>:
 800586e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005872:	f000 b89d 	b.w	80059b0 <_close_r>

08005876 <__swbuf_r>:
 8005876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005878:	460e      	mov	r6, r1
 800587a:	4614      	mov	r4, r2
 800587c:	4605      	mov	r5, r0
 800587e:	b118      	cbz	r0, 8005888 <__swbuf_r+0x12>
 8005880:	6a03      	ldr	r3, [r0, #32]
 8005882:	b90b      	cbnz	r3, 8005888 <__swbuf_r+0x12>
 8005884:	f7ff ff20 	bl	80056c8 <__sinit>
 8005888:	69a3      	ldr	r3, [r4, #24]
 800588a:	60a3      	str	r3, [r4, #8]
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	071a      	lsls	r2, r3, #28
 8005890:	d501      	bpl.n	8005896 <__swbuf_r+0x20>
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	b943      	cbnz	r3, 80058a8 <__swbuf_r+0x32>
 8005896:	4621      	mov	r1, r4
 8005898:	4628      	mov	r0, r5
 800589a:	f000 f82b 	bl	80058f4 <__swsetup_r>
 800589e:	b118      	cbz	r0, 80058a8 <__swbuf_r+0x32>
 80058a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80058a4:	4638      	mov	r0, r7
 80058a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	6922      	ldr	r2, [r4, #16]
 80058ac:	1a98      	subs	r0, r3, r2
 80058ae:	6963      	ldr	r3, [r4, #20]
 80058b0:	b2f6      	uxtb	r6, r6
 80058b2:	4283      	cmp	r3, r0
 80058b4:	4637      	mov	r7, r6
 80058b6:	dc05      	bgt.n	80058c4 <__swbuf_r+0x4e>
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 fa76 	bl	8005dac <_fflush_r>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d1ed      	bne.n	80058a0 <__swbuf_r+0x2a>
 80058c4:	68a3      	ldr	r3, [r4, #8]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	701e      	strb	r6, [r3, #0]
 80058d2:	6962      	ldr	r2, [r4, #20]
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d004      	beq.n	80058e4 <__swbuf_r+0x6e>
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	07db      	lsls	r3, r3, #31
 80058de:	d5e1      	bpl.n	80058a4 <__swbuf_r+0x2e>
 80058e0:	2e0a      	cmp	r6, #10
 80058e2:	d1df      	bne.n	80058a4 <__swbuf_r+0x2e>
 80058e4:	4621      	mov	r1, r4
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 fa60 	bl	8005dac <_fflush_r>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d0d9      	beq.n	80058a4 <__swbuf_r+0x2e>
 80058f0:	e7d6      	b.n	80058a0 <__swbuf_r+0x2a>
	...

080058f4 <__swsetup_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4b29      	ldr	r3, [pc, #164]	@ (800599c <__swsetup_r+0xa8>)
 80058f8:	4605      	mov	r5, r0
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	460c      	mov	r4, r1
 80058fe:	b118      	cbz	r0, 8005908 <__swsetup_r+0x14>
 8005900:	6a03      	ldr	r3, [r0, #32]
 8005902:	b90b      	cbnz	r3, 8005908 <__swsetup_r+0x14>
 8005904:	f7ff fee0 	bl	80056c8 <__sinit>
 8005908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800590c:	0719      	lsls	r1, r3, #28
 800590e:	d422      	bmi.n	8005956 <__swsetup_r+0x62>
 8005910:	06da      	lsls	r2, r3, #27
 8005912:	d407      	bmi.n	8005924 <__swsetup_r+0x30>
 8005914:	2209      	movs	r2, #9
 8005916:	602a      	str	r2, [r5, #0]
 8005918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005922:	e033      	b.n	800598c <__swsetup_r+0x98>
 8005924:	0758      	lsls	r0, r3, #29
 8005926:	d512      	bpl.n	800594e <__swsetup_r+0x5a>
 8005928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800592a:	b141      	cbz	r1, 800593e <__swsetup_r+0x4a>
 800592c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005930:	4299      	cmp	r1, r3
 8005932:	d002      	beq.n	800593a <__swsetup_r+0x46>
 8005934:	4628      	mov	r0, r5
 8005936:	f000 f8bd 	bl	8005ab4 <_free_r>
 800593a:	2300      	movs	r3, #0
 800593c:	6363      	str	r3, [r4, #52]	@ 0x34
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	2300      	movs	r3, #0
 8005948:	6063      	str	r3, [r4, #4]
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	f043 0308 	orr.w	r3, r3, #8
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	b94b      	cbnz	r3, 800596e <__swsetup_r+0x7a>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005964:	d003      	beq.n	800596e <__swsetup_r+0x7a>
 8005966:	4621      	mov	r1, r4
 8005968:	4628      	mov	r0, r5
 800596a:	f000 fa6d 	bl	8005e48 <__smakebuf_r>
 800596e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005972:	f013 0201 	ands.w	r2, r3, #1
 8005976:	d00a      	beq.n	800598e <__swsetup_r+0x9a>
 8005978:	2200      	movs	r2, #0
 800597a:	60a2      	str	r2, [r4, #8]
 800597c:	6962      	ldr	r2, [r4, #20]
 800597e:	4252      	negs	r2, r2
 8005980:	61a2      	str	r2, [r4, #24]
 8005982:	6922      	ldr	r2, [r4, #16]
 8005984:	b942      	cbnz	r2, 8005998 <__swsetup_r+0xa4>
 8005986:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800598a:	d1c5      	bne.n	8005918 <__swsetup_r+0x24>
 800598c:	bd38      	pop	{r3, r4, r5, pc}
 800598e:	0799      	lsls	r1, r3, #30
 8005990:	bf58      	it	pl
 8005992:	6962      	ldrpl	r2, [r4, #20]
 8005994:	60a2      	str	r2, [r4, #8]
 8005996:	e7f4      	b.n	8005982 <__swsetup_r+0x8e>
 8005998:	2000      	movs	r0, #0
 800599a:	e7f7      	b.n	800598c <__swsetup_r+0x98>
 800599c:	20000024 	.word	0x20000024

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <_close_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d06      	ldr	r5, [pc, #24]	@ (80059cc <_close_r+0x1c>)
 80059b4:	2300      	movs	r3, #0
 80059b6:	4604      	mov	r4, r0
 80059b8:	4608      	mov	r0, r1
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	f7ff fc2e 	bl	800521c <_close>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d102      	bne.n	80059ca <_close_r+0x1a>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	b103      	cbz	r3, 80059ca <_close_r+0x1a>
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	200042c4 	.word	0x200042c4

080059d0 <_lseek_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d07      	ldr	r5, [pc, #28]	@ (80059f0 <_lseek_r+0x20>)
 80059d4:	4604      	mov	r4, r0
 80059d6:	4608      	mov	r0, r1
 80059d8:	4611      	mov	r1, r2
 80059da:	2200      	movs	r2, #0
 80059dc:	602a      	str	r2, [r5, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	f7ff fbdd 	bl	800519e <_lseek>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d102      	bne.n	80059ee <_lseek_r+0x1e>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	b103      	cbz	r3, 80059ee <_lseek_r+0x1e>
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	200042c4 	.word	0x200042c4

080059f4 <_read_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d07      	ldr	r5, [pc, #28]	@ (8005a14 <_read_r+0x20>)
 80059f8:	4604      	mov	r4, r0
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	602a      	str	r2, [r5, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f7ff fb75 	bl	80050f2 <_read>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_read_r+0x1e>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_read_r+0x1e>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	200042c4 	.word	0x200042c4

08005a18 <_write_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	@ (8005a38 <_write_r+0x20>)
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	4608      	mov	r0, r1
 8005a20:	4611      	mov	r1, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	602a      	str	r2, [r5, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f7ff fbcb 	bl	80051c2 <_write>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_write_r+0x1e>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_write_r+0x1e>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	200042c4 	.word	0x200042c4

08005a3c <__errno>:
 8005a3c:	4b01      	ldr	r3, [pc, #4]	@ (8005a44 <__errno+0x8>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000024 	.word	0x20000024

08005a48 <__libc_init_array>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a80 <__libc_init_array+0x38>)
 8005a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a84 <__libc_init_array+0x3c>)
 8005a4e:	1b64      	subs	r4, r4, r5
 8005a50:	10a4      	asrs	r4, r4, #2
 8005a52:	2600      	movs	r6, #0
 8005a54:	42a6      	cmp	r6, r4
 8005a56:	d109      	bne.n	8005a6c <__libc_init_array+0x24>
 8005a58:	4d0b      	ldr	r5, [pc, #44]	@ (8005a88 <__libc_init_array+0x40>)
 8005a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a8c <__libc_init_array+0x44>)
 8005a5c:	f000 fa62 	bl	8005f24 <_init>
 8005a60:	1b64      	subs	r4, r4, r5
 8005a62:	10a4      	asrs	r4, r4, #2
 8005a64:	2600      	movs	r6, #0
 8005a66:	42a6      	cmp	r6, r4
 8005a68:	d105      	bne.n	8005a76 <__libc_init_array+0x2e>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a70:	4798      	blx	r3
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7ee      	b.n	8005a54 <__libc_init_array+0xc>
 8005a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7a:	4798      	blx	r3
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	e7f2      	b.n	8005a66 <__libc_init_array+0x1e>
 8005a80:	08005fd8 	.word	0x08005fd8
 8005a84:	08005fd8 	.word	0x08005fd8
 8005a88:	08005fd8 	.word	0x08005fd8
 8005a8c:	08005fdc 	.word	0x08005fdc

08005a90 <__retarget_lock_init_recursive>:
 8005a90:	4770      	bx	lr

08005a92 <__retarget_lock_acquire_recursive>:
 8005a92:	4770      	bx	lr

08005a94 <__retarget_lock_release_recursive>:
 8005a94:	4770      	bx	lr

08005a96 <memcpy>:
 8005a96:	440a      	add	r2, r1
 8005a98:	4291      	cmp	r1, r2
 8005a9a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a9e:	d100      	bne.n	8005aa2 <memcpy+0xc>
 8005aa0:	4770      	bx	lr
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aac:	4291      	cmp	r1, r2
 8005aae:	d1f9      	bne.n	8005aa4 <memcpy+0xe>
 8005ab0:	bd10      	pop	{r4, pc}
	...

08005ab4 <_free_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d041      	beq.n	8005b40 <_free_r+0x8c>
 8005abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac0:	1f0c      	subs	r4, r1, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bfb8      	it	lt
 8005ac6:	18e4      	addlt	r4, r4, r3
 8005ac8:	f000 f8e0 	bl	8005c8c <__malloc_lock>
 8005acc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b44 <_free_r+0x90>)
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	b933      	cbnz	r3, 8005ae0 <_free_r+0x2c>
 8005ad2:	6063      	str	r3, [r4, #4]
 8005ad4:	6014      	str	r4, [r2, #0]
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005adc:	f000 b8dc 	b.w	8005c98 <__malloc_unlock>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d908      	bls.n	8005af6 <_free_r+0x42>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	1821      	adds	r1, r4, r0
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	bf01      	itttt	eq
 8005aec:	6819      	ldreq	r1, [r3, #0]
 8005aee:	685b      	ldreq	r3, [r3, #4]
 8005af0:	1809      	addeq	r1, r1, r0
 8005af2:	6021      	streq	r1, [r4, #0]
 8005af4:	e7ed      	b.n	8005ad2 <_free_r+0x1e>
 8005af6:	461a      	mov	r2, r3
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	b10b      	cbz	r3, 8005b00 <_free_r+0x4c>
 8005afc:	42a3      	cmp	r3, r4
 8005afe:	d9fa      	bls.n	8005af6 <_free_r+0x42>
 8005b00:	6811      	ldr	r1, [r2, #0]
 8005b02:	1850      	adds	r0, r2, r1
 8005b04:	42a0      	cmp	r0, r4
 8005b06:	d10b      	bne.n	8005b20 <_free_r+0x6c>
 8005b08:	6820      	ldr	r0, [r4, #0]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	1850      	adds	r0, r2, r1
 8005b0e:	4283      	cmp	r3, r0
 8005b10:	6011      	str	r1, [r2, #0]
 8005b12:	d1e0      	bne.n	8005ad6 <_free_r+0x22>
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	6053      	str	r3, [r2, #4]
 8005b1a:	4408      	add	r0, r1
 8005b1c:	6010      	str	r0, [r2, #0]
 8005b1e:	e7da      	b.n	8005ad6 <_free_r+0x22>
 8005b20:	d902      	bls.n	8005b28 <_free_r+0x74>
 8005b22:	230c      	movs	r3, #12
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	e7d6      	b.n	8005ad6 <_free_r+0x22>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	1821      	adds	r1, r4, r0
 8005b2c:	428b      	cmp	r3, r1
 8005b2e:	bf04      	itt	eq
 8005b30:	6819      	ldreq	r1, [r3, #0]
 8005b32:	685b      	ldreq	r3, [r3, #4]
 8005b34:	6063      	str	r3, [r4, #4]
 8005b36:	bf04      	itt	eq
 8005b38:	1809      	addeq	r1, r1, r0
 8005b3a:	6021      	streq	r1, [r4, #0]
 8005b3c:	6054      	str	r4, [r2, #4]
 8005b3e:	e7ca      	b.n	8005ad6 <_free_r+0x22>
 8005b40:	bd38      	pop	{r3, r4, r5, pc}
 8005b42:	bf00      	nop
 8005b44:	200042d0 	.word	0x200042d0

08005b48 <sbrk_aligned>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8005b88 <sbrk_aligned+0x40>)
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	6831      	ldr	r1, [r6, #0]
 8005b50:	4605      	mov	r5, r0
 8005b52:	b911      	cbnz	r1, 8005b5a <sbrk_aligned+0x12>
 8005b54:	f000 f9d6 	bl	8005f04 <_sbrk_r>
 8005b58:	6030      	str	r0, [r6, #0]
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 f9d1 	bl	8005f04 <_sbrk_r>
 8005b62:	1c43      	adds	r3, r0, #1
 8005b64:	d103      	bne.n	8005b6e <sbrk_aligned+0x26>
 8005b66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	1cc4      	adds	r4, r0, #3
 8005b70:	f024 0403 	bic.w	r4, r4, #3
 8005b74:	42a0      	cmp	r0, r4
 8005b76:	d0f8      	beq.n	8005b6a <sbrk_aligned+0x22>
 8005b78:	1a21      	subs	r1, r4, r0
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 f9c2 	bl	8005f04 <_sbrk_r>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d1f2      	bne.n	8005b6a <sbrk_aligned+0x22>
 8005b84:	e7ef      	b.n	8005b66 <sbrk_aligned+0x1e>
 8005b86:	bf00      	nop
 8005b88:	200042cc 	.word	0x200042cc

08005b8c <_malloc_r>:
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	1ccd      	adds	r5, r1, #3
 8005b92:	f025 0503 	bic.w	r5, r5, #3
 8005b96:	3508      	adds	r5, #8
 8005b98:	2d0c      	cmp	r5, #12
 8005b9a:	bf38      	it	cc
 8005b9c:	250c      	movcc	r5, #12
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	db01      	blt.n	8005ba8 <_malloc_r+0x1c>
 8005ba4:	42a9      	cmp	r1, r5
 8005ba6:	d904      	bls.n	8005bb2 <_malloc_r+0x26>
 8005ba8:	230c      	movs	r3, #12
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	2000      	movs	r0, #0
 8005bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c88 <_malloc_r+0xfc>
 8005bb6:	f000 f869 	bl	8005c8c <__malloc_lock>
 8005bba:	f8d8 3000 	ldr.w	r3, [r8]
 8005bbe:	461c      	mov	r4, r3
 8005bc0:	bb44      	cbnz	r4, 8005c14 <_malloc_r+0x88>
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f7ff ffbf 	bl	8005b48 <sbrk_aligned>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	4604      	mov	r4, r0
 8005bce:	d158      	bne.n	8005c82 <_malloc_r+0xf6>
 8005bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8005bd4:	4627      	mov	r7, r4
 8005bd6:	2f00      	cmp	r7, #0
 8005bd8:	d143      	bne.n	8005c62 <_malloc_r+0xd6>
 8005bda:	2c00      	cmp	r4, #0
 8005bdc:	d04b      	beq.n	8005c76 <_malloc_r+0xea>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	4639      	mov	r1, r7
 8005be2:	4630      	mov	r0, r6
 8005be4:	eb04 0903 	add.w	r9, r4, r3
 8005be8:	f000 f98c 	bl	8005f04 <_sbrk_r>
 8005bec:	4581      	cmp	r9, r0
 8005bee:	d142      	bne.n	8005c76 <_malloc_r+0xea>
 8005bf0:	6821      	ldr	r1, [r4, #0]
 8005bf2:	1a6d      	subs	r5, r5, r1
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f7ff ffa6 	bl	8005b48 <sbrk_aligned>
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d03a      	beq.n	8005c76 <_malloc_r+0xea>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	442b      	add	r3, r5
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	f8d8 3000 	ldr.w	r3, [r8]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	bb62      	cbnz	r2, 8005c68 <_malloc_r+0xdc>
 8005c0e:	f8c8 7000 	str.w	r7, [r8]
 8005c12:	e00f      	b.n	8005c34 <_malloc_r+0xa8>
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	1b52      	subs	r2, r2, r5
 8005c18:	d420      	bmi.n	8005c5c <_malloc_r+0xd0>
 8005c1a:	2a0b      	cmp	r2, #11
 8005c1c:	d917      	bls.n	8005c4e <_malloc_r+0xc2>
 8005c1e:	1961      	adds	r1, r4, r5
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	6025      	str	r5, [r4, #0]
 8005c24:	bf18      	it	ne
 8005c26:	6059      	strne	r1, [r3, #4]
 8005c28:	6863      	ldr	r3, [r4, #4]
 8005c2a:	bf08      	it	eq
 8005c2c:	f8c8 1000 	streq.w	r1, [r8]
 8005c30:	5162      	str	r2, [r4, r5]
 8005c32:	604b      	str	r3, [r1, #4]
 8005c34:	4630      	mov	r0, r6
 8005c36:	f000 f82f 	bl	8005c98 <__malloc_unlock>
 8005c3a:	f104 000b 	add.w	r0, r4, #11
 8005c3e:	1d23      	adds	r3, r4, #4
 8005c40:	f020 0007 	bic.w	r0, r0, #7
 8005c44:	1ac2      	subs	r2, r0, r3
 8005c46:	bf1c      	itt	ne
 8005c48:	1a1b      	subne	r3, r3, r0
 8005c4a:	50a3      	strne	r3, [r4, r2]
 8005c4c:	e7af      	b.n	8005bae <_malloc_r+0x22>
 8005c4e:	6862      	ldr	r2, [r4, #4]
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	bf0c      	ite	eq
 8005c54:	f8c8 2000 	streq.w	r2, [r8]
 8005c58:	605a      	strne	r2, [r3, #4]
 8005c5a:	e7eb      	b.n	8005c34 <_malloc_r+0xa8>
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	6864      	ldr	r4, [r4, #4]
 8005c60:	e7ae      	b.n	8005bc0 <_malloc_r+0x34>
 8005c62:	463c      	mov	r4, r7
 8005c64:	687f      	ldr	r7, [r7, #4]
 8005c66:	e7b6      	b.n	8005bd6 <_malloc_r+0x4a>
 8005c68:	461a      	mov	r2, r3
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d1fb      	bne.n	8005c68 <_malloc_r+0xdc>
 8005c70:	2300      	movs	r3, #0
 8005c72:	6053      	str	r3, [r2, #4]
 8005c74:	e7de      	b.n	8005c34 <_malloc_r+0xa8>
 8005c76:	230c      	movs	r3, #12
 8005c78:	6033      	str	r3, [r6, #0]
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f000 f80c 	bl	8005c98 <__malloc_unlock>
 8005c80:	e794      	b.n	8005bac <_malloc_r+0x20>
 8005c82:	6005      	str	r5, [r0, #0]
 8005c84:	e7d6      	b.n	8005c34 <_malloc_r+0xa8>
 8005c86:	bf00      	nop
 8005c88:	200042d0 	.word	0x200042d0

08005c8c <__malloc_lock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	@ (8005c94 <__malloc_lock+0x8>)
 8005c8e:	f7ff bf00 	b.w	8005a92 <__retarget_lock_acquire_recursive>
 8005c92:	bf00      	nop
 8005c94:	200042c8 	.word	0x200042c8

08005c98 <__malloc_unlock>:
 8005c98:	4801      	ldr	r0, [pc, #4]	@ (8005ca0 <__malloc_unlock+0x8>)
 8005c9a:	f7ff befb 	b.w	8005a94 <__retarget_lock_release_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	200042c8 	.word	0x200042c8

08005ca4 <__sflush_r>:
 8005ca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cac:	0716      	lsls	r6, r2, #28
 8005cae:	4605      	mov	r5, r0
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	d454      	bmi.n	8005d5e <__sflush_r+0xba>
 8005cb4:	684b      	ldr	r3, [r1, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dc02      	bgt.n	8005cc0 <__sflush_r+0x1c>
 8005cba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dd48      	ble.n	8005d52 <__sflush_r+0xae>
 8005cc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cc2:	2e00      	cmp	r6, #0
 8005cc4:	d045      	beq.n	8005d52 <__sflush_r+0xae>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ccc:	682f      	ldr	r7, [r5, #0]
 8005cce:	6a21      	ldr	r1, [r4, #32]
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	d030      	beq.n	8005d36 <__sflush_r+0x92>
 8005cd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	0759      	lsls	r1, r3, #29
 8005cda:	d505      	bpl.n	8005ce8 <__sflush_r+0x44>
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ce2:	b10b      	cbz	r3, 8005ce8 <__sflush_r+0x44>
 8005ce4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	2300      	movs	r3, #0
 8005cea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cec:	6a21      	ldr	r1, [r4, #32]
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b0      	blx	r6
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	d106      	bne.n	8005d06 <__sflush_r+0x62>
 8005cf8:	6829      	ldr	r1, [r5, #0]
 8005cfa:	291d      	cmp	r1, #29
 8005cfc:	d82b      	bhi.n	8005d56 <__sflush_r+0xb2>
 8005cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8005da8 <__sflush_r+0x104>)
 8005d00:	40ca      	lsrs	r2, r1
 8005d02:	07d6      	lsls	r6, r2, #31
 8005d04:	d527      	bpl.n	8005d56 <__sflush_r+0xb2>
 8005d06:	2200      	movs	r2, #0
 8005d08:	6062      	str	r2, [r4, #4]
 8005d0a:	04d9      	lsls	r1, r3, #19
 8005d0c:	6922      	ldr	r2, [r4, #16]
 8005d0e:	6022      	str	r2, [r4, #0]
 8005d10:	d504      	bpl.n	8005d1c <__sflush_r+0x78>
 8005d12:	1c42      	adds	r2, r0, #1
 8005d14:	d101      	bne.n	8005d1a <__sflush_r+0x76>
 8005d16:	682b      	ldr	r3, [r5, #0]
 8005d18:	b903      	cbnz	r3, 8005d1c <__sflush_r+0x78>
 8005d1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d1e:	602f      	str	r7, [r5, #0]
 8005d20:	b1b9      	cbz	r1, 8005d52 <__sflush_r+0xae>
 8005d22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d26:	4299      	cmp	r1, r3
 8005d28:	d002      	beq.n	8005d30 <__sflush_r+0x8c>
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f7ff fec2 	bl	8005ab4 <_free_r>
 8005d30:	2300      	movs	r3, #0
 8005d32:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d34:	e00d      	b.n	8005d52 <__sflush_r+0xae>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b0      	blx	r6
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	1c50      	adds	r0, r2, #1
 8005d40:	d1c9      	bne.n	8005cd6 <__sflush_r+0x32>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0c6      	beq.n	8005cd6 <__sflush_r+0x32>
 8005d48:	2b1d      	cmp	r3, #29
 8005d4a:	d001      	beq.n	8005d50 <__sflush_r+0xac>
 8005d4c:	2b16      	cmp	r3, #22
 8005d4e:	d11e      	bne.n	8005d8e <__sflush_r+0xea>
 8005d50:	602f      	str	r7, [r5, #0]
 8005d52:	2000      	movs	r0, #0
 8005d54:	e022      	b.n	8005d9c <__sflush_r+0xf8>
 8005d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d5a:	b21b      	sxth	r3, r3
 8005d5c:	e01b      	b.n	8005d96 <__sflush_r+0xf2>
 8005d5e:	690f      	ldr	r7, [r1, #16]
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	d0f6      	beq.n	8005d52 <__sflush_r+0xae>
 8005d64:	0793      	lsls	r3, r2, #30
 8005d66:	680e      	ldr	r6, [r1, #0]
 8005d68:	bf08      	it	eq
 8005d6a:	694b      	ldreq	r3, [r1, #20]
 8005d6c:	600f      	str	r7, [r1, #0]
 8005d6e:	bf18      	it	ne
 8005d70:	2300      	movne	r3, #0
 8005d72:	eba6 0807 	sub.w	r8, r6, r7
 8005d76:	608b      	str	r3, [r1, #8]
 8005d78:	f1b8 0f00 	cmp.w	r8, #0
 8005d7c:	dde9      	ble.n	8005d52 <__sflush_r+0xae>
 8005d7e:	6a21      	ldr	r1, [r4, #32]
 8005d80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d82:	4643      	mov	r3, r8
 8005d84:	463a      	mov	r2, r7
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b0      	blx	r6
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	dc08      	bgt.n	8005da0 <__sflush_r+0xfc>
 8005d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da0:	4407      	add	r7, r0
 8005da2:	eba8 0800 	sub.w	r8, r8, r0
 8005da6:	e7e7      	b.n	8005d78 <__sflush_r+0xd4>
 8005da8:	20400001 	.word	0x20400001

08005dac <_fflush_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b913      	cbnz	r3, 8005dbc <_fflush_r+0x10>
 8005db6:	2500      	movs	r5, #0
 8005db8:	4628      	mov	r0, r5
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	b118      	cbz	r0, 8005dc6 <_fflush_r+0x1a>
 8005dbe:	6a03      	ldr	r3, [r0, #32]
 8005dc0:	b90b      	cbnz	r3, 8005dc6 <_fflush_r+0x1a>
 8005dc2:	f7ff fc81 	bl	80056c8 <__sinit>
 8005dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f3      	beq.n	8005db6 <_fflush_r+0xa>
 8005dce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005dd0:	07d0      	lsls	r0, r2, #31
 8005dd2:	d404      	bmi.n	8005dde <_fflush_r+0x32>
 8005dd4:	0599      	lsls	r1, r3, #22
 8005dd6:	d402      	bmi.n	8005dde <_fflush_r+0x32>
 8005dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dda:	f7ff fe5a 	bl	8005a92 <__retarget_lock_acquire_recursive>
 8005dde:	4628      	mov	r0, r5
 8005de0:	4621      	mov	r1, r4
 8005de2:	f7ff ff5f 	bl	8005ca4 <__sflush_r>
 8005de6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005de8:	07da      	lsls	r2, r3, #31
 8005dea:	4605      	mov	r5, r0
 8005dec:	d4e4      	bmi.n	8005db8 <_fflush_r+0xc>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	059b      	lsls	r3, r3, #22
 8005df2:	d4e1      	bmi.n	8005db8 <_fflush_r+0xc>
 8005df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005df6:	f7ff fe4d 	bl	8005a94 <__retarget_lock_release_recursive>
 8005dfa:	e7dd      	b.n	8005db8 <_fflush_r+0xc>

08005dfc <__swhatbuf_r>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	460c      	mov	r4, r1
 8005e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e04:	2900      	cmp	r1, #0
 8005e06:	b096      	sub	sp, #88	@ 0x58
 8005e08:	4615      	mov	r5, r2
 8005e0a:	461e      	mov	r6, r3
 8005e0c:	da0d      	bge.n	8005e2a <__swhatbuf_r+0x2e>
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e14:	f04f 0100 	mov.w	r1, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2340      	movne	r3, #64	@ 0x40
 8005e1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e20:	2000      	movs	r0, #0
 8005e22:	6031      	str	r1, [r6, #0]
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	b016      	add	sp, #88	@ 0x58
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	f000 f848 	bl	8005ec0 <_fstat_r>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	dbec      	blt.n	8005e0e <__swhatbuf_r+0x12>
 8005e34:	9901      	ldr	r1, [sp, #4]
 8005e36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e3e:	4259      	negs	r1, r3
 8005e40:	4159      	adcs	r1, r3
 8005e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e46:	e7eb      	b.n	8005e20 <__swhatbuf_r+0x24>

08005e48 <__smakebuf_r>:
 8005e48:	898b      	ldrh	r3, [r1, #12]
 8005e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e4c:	079d      	lsls	r5, r3, #30
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	d507      	bpl.n	8005e64 <__smakebuf_r+0x1c>
 8005e54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	6163      	str	r3, [r4, #20]
 8005e60:	b003      	add	sp, #12
 8005e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e64:	ab01      	add	r3, sp, #4
 8005e66:	466a      	mov	r2, sp
 8005e68:	f7ff ffc8 	bl	8005dfc <__swhatbuf_r>
 8005e6c:	9f00      	ldr	r7, [sp, #0]
 8005e6e:	4605      	mov	r5, r0
 8005e70:	4639      	mov	r1, r7
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7ff fe8a 	bl	8005b8c <_malloc_r>
 8005e78:	b948      	cbnz	r0, 8005e8e <__smakebuf_r+0x46>
 8005e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e7e:	059a      	lsls	r2, r3, #22
 8005e80:	d4ee      	bmi.n	8005e60 <__smakebuf_r+0x18>
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	f043 0302 	orr.w	r3, r3, #2
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	e7e2      	b.n	8005e54 <__smakebuf_r+0xc>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	6020      	str	r0, [r4, #0]
 8005e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	9b01      	ldr	r3, [sp, #4]
 8005e9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e9e:	b15b      	cbz	r3, 8005eb8 <__smakebuf_r+0x70>
 8005ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f000 f81d 	bl	8005ee4 <_isatty_r>
 8005eaa:	b128      	cbz	r0, 8005eb8 <__smakebuf_r+0x70>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	431d      	orrs	r5, r3
 8005ebc:	81a5      	strh	r5, [r4, #12]
 8005ebe:	e7cf      	b.n	8005e60 <__smakebuf_r+0x18>

08005ec0 <_fstat_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4d07      	ldr	r5, [pc, #28]	@ (8005ee0 <_fstat_r+0x20>)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	f7ff f9ec 	bl	80052aa <_fstat>
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	d102      	bne.n	8005edc <_fstat_r+0x1c>
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	b103      	cbz	r3, 8005edc <_fstat_r+0x1c>
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	bf00      	nop
 8005ee0:	200042c4 	.word	0x200042c4

08005ee4 <_isatty_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4d06      	ldr	r5, [pc, #24]	@ (8005f00 <_isatty_r+0x1c>)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	f7ff fb40 	bl	8005574 <_isatty>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_isatty_r+0x1a>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_isatty_r+0x1a>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	200042c4 	.word	0x200042c4

08005f04 <_sbrk_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d06      	ldr	r5, [pc, #24]	@ (8005f20 <_sbrk_r+0x1c>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fa fe12 	bl	8000b38 <_sbrk>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_sbrk_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_sbrk_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	200042c4 	.word	0x200042c4

08005f24 <_init>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

08005f30 <_fini>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr
